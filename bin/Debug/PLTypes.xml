<?xml version="1.0"?>
<doc>
  <assembly>
    <name>PLTypes</name>
  </assembly>
  <members>
    <member name="T:PowerLanguage.SessionObject">
      <summary>
             The class that defines a session object.
            </summary>
    </member>
    <member name="M:PowerLanguage.SessionObject.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
            </returns>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />. 
                            </param>
      <exception cref="T:System.NullReferenceException">The <paramref name="obj" /> parameter is null.
                            </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:PowerLanguage.SessionObject.GetHashCode">
      <summary>
            Serves as a hash function for a particular type. 
            </summary>
      <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:PowerLanguage.SessionObject.op_Equality(PowerLanguage.SessionObject,PowerLanguage.SessionObject)">
      <summary>
      </summary>
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:PowerLanguage.SessionObject.op_Inequality(PowerLanguage.SessionObject,PowerLanguage.SessionObject)">
      <summary>
      </summary>
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:PowerLanguage.SessionObject.#ctor(System.DayOfWeek,System.DayOfWeek,System.TimeSpan,System.TimeSpan,System.Boolean)">
      <summary>
             Initializes a new instance of the SessionObject.
            </summary>
      <param name="startDay">Start session day.</param>
      <param name="endDay">End session day.</param>
      <param name="startTime">Start session time.</param>
      <param name="endTime">End session time.</param>
      <param name="seok">End of session attribute.</param>
    </member>
    <member name="M:PowerLanguage.SessionObject.#ctor(System.Int32,System.Int32,System.Double,System.Double,System.Boolean)">
      <summary>
             Initializes a new instance of the SessionObject.
            </summary>
      <param name="startDay">Start session day.</param>
      <param name="endDay">End session day.</param>
      <param name="startTime">Start session time.</param>
      <param name="endTime">End session time.</param>
      <param name="seok">End of session attribute.</param>
    </member>
    <member name="P:PowerLanguage.SessionObject.StartDay">
      <summary>
             Start session day.
            </summary>
    </member>
    <member name="P:PowerLanguage.SessionObject.EndDay">
      <summary>
             End session day.
            </summary>
    </member>
    <member name="P:PowerLanguage.SessionObject.StartTime">
      <summary>
             Start session time.
            </summary>
    </member>
    <member name="P:PowerLanguage.SessionObject.EndTime">
      <summary>
             End session time.
            </summary>
    </member>
    <member name="P:PowerLanguage.SessionObject.EndOfSession">
      <summary>
            End of session attribute.
            </summary>
    </member>
    <member name="T:PowerLanguage.InputProxy">
      <exclude />
    </member>
    <member name="M:PowerLanguage.InputProxy.Verify(System.String)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.InputProxy.Apply">
      <exclude />
    </member>
    <member name="P:PowerLanguage.InputProxy.Name">
      <exclude />
    </member>
    <member name="P:PowerLanguage.InputProxy.Value">
      <exclude />
    </member>
    <member name="P:PowerLanguage.InputProxy.Type">
      <exclude />
    </member>
    <member name="P:PowerLanguage.InputProxy.ValuesList">
      <exclude />
    </member>
    <member name="T:PowerLanguage.InputsScaner">
      <exclude />
    </member>
    <member name="M:PowerLanguage.InputsScaner.Scan(System.Type)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.InputsScaner.Scan(System.Object)">
      <exclude />
    </member>
    <member name="T:PowerLanguage.IPlotAttributesArray`1">
      <summary>
             Interface to access the plot attributes array. 
            </summary>
      <typeparam name="T">
             Any type - double, int, string, etc. 
             </typeparam>
    </member>
    <member name="T:PowerLanguage.ISeries`1">
      <summary>
             Base interface for functions, series variables, and price series. 
             Provides access to historical values of inherited objects.
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="P:PowerLanguage.ISeries`1.Item(System.Int32)">
      <summary>
             Read-only property. Returns a reference to a bar located a specified number of bars back from the current bar.
            </summary>
      <param name="barsAgo">The numerical expression, specifying the number of bars back.</param>
    </member>
    <member name="P:PowerLanguage.ISeries`1.Value">
      <summary>
             Read-only property. Returns series value.
            </summary>
    </member>
    <member name="P:PowerLanguage.IPlotAttributesArray`1.Item(System.Int32)">
      <summary>
             Read-write property. Returns a reference to the plot attributes located a specified number of bars back from the current.
            </summary>
      <param name="barsAgo">
             The numerical expression specifying the number of bars back. 
             </param>
    </member>
    <member name="T:PowerLanguage.IPlotObjectBase`1">
      <summary>
             Common base interface for plot object. 
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:PowerLanguage.IPlotObjectBase`1.Set(`0)">
      <summary>
             Setting plot to a 'val' value.
            </summary>
      <param name="val">The place in which a plot will be set.</param>
    </member>
    <member name="M:PowerLanguage.IPlotObjectBase`1.Set(`0,System.Drawing.Color)">
      <summary>
             Setting plot to a 'val' value with 'color' color.
            </summary>
      <param name="val">The place in which a plot will be set.</param>
      <param name="color">Plot color.</param>
    </member>
    <member name="M:PowerLanguage.IPlotObjectBase`1.Set(`0,System.Drawing.KnownColor)">
      <summary>
             Setting plot to a 'val' value with a known 'color' color.
            </summary>
      <param name="val">The place in which a plot will be set.</param>
      <param name="color">Plot color.</param>
    </member>
    <member name="M:PowerLanguage.IPlotObjectBase`1.Reset">
      <summary>
             Do not draw plot on this bar (analog to EL’s NoPlot function).
            </summary>
    </member>
    <member name="P:PowerLanguage.IPlotObjectBase`1.Name">
      <summary>
             Read-only property. Return plot name.
            </summary>
    </member>
    <member name="P:PowerLanguage.IPlotObjectBase`1.BGColor">
      <summary>
             Read-write property. Sets/gets plot's background color.
            </summary>
    </member>
    <member name="T:PowerLanguage.IPlotObjectStr">
      <summary>
            An interface providing access to string plot manipulations.
            </summary>
    </member>
    <member name="T:PowerLanguage.IPlotObject">
      <summary>
             An interface providing access to plot manipulations.
            </summary>
    </member>
    <member name="M:PowerLanguage.IPlotObject.Set(System.Double,System.Drawing.Color,System.Int32)">
      <summary>
             Setting plot to a 'val' price with 'color' color 
             and 'width' width on current bar.
            </summary>
      <param name="val">Plot price value.</param>
      <param name="color">Plot color. By default: Color.Default</param>
      <param name="width">Plot width. By default: -1</param>
    </member>
    <member name="M:PowerLanguage.IPlotObject.Set(System.Double,System.Drawing.KnownColor,System.Int32)">
      <summary>
             Setting plot to a 'val' price with 'color' color 
             and 'width' width on current bar.
            </summary>
      <param name="val">Plot price value.</param>
      <param name="color">Plot color.</param>
      <param name="width">Plot width.</param>
    </member>
    <member name="M:PowerLanguage.IPlotObject.Set(System.Int32,System.Double)">
      <summary>
             Setting plot to a 'val' price on a bar ‘bars_ago’ bars back.
            </summary>
      <param name="barsAgo">Bars back number.</param>
      <param name="val">Plot price value.</param>
    </member>
    <member name="M:PowerLanguage.IPlotObject.Set(System.Int32,System.Double,System.Drawing.Color)">
      <summary>
             Setting plot to a 'val' price with 'color' color 
             on a bar 'bars_ago' bars back.
            </summary>
      <param name="barsAgo">Bars back number.</param>
      <param name="val">Plot price value.</param>
      <param name="color">Plot color. By default: Color.Default</param>
    </member>
    <member name="M:PowerLanguage.IPlotObject.Set(System.Int32,System.Double,System.Drawing.KnownColor)">
      <summary>
             Setting plot to a 'val' price and 'color' color on a bar ‘bars_ago’ bars back.
            </summary>
      <param name="barsAgo">Bars back number.</param>
      <param name="val">Plot price value.</param>
      <param name="color">Plot color.</param>
    </member>
    <member name="M:PowerLanguage.IPlotObject.Set(System.Int32,System.Double,System.Drawing.Color,System.Int32)">
      <summary>
             Setting plot to a 'val' price with 'color' color 
             on a bar 'bars_ago' bars back and 'width' width on current bar.
            </summary>
      <param name="barsAgo">Bars back number.</param>
      <param name="val">Plot price value.</param>
      <param name="color">Plot color. By default: Color.Default</param>
      <param name="width">Plot width. By default: -1</param>
    </member>
    <member name="M:PowerLanguage.IPlotObject.Set(System.Int32,System.Double,System.Drawing.KnownColor,System.Int32)">
      <summary>
             Setting plot to a 'val' price with 'color' color 
             on a bar 'bars_ago' bars back and 'width' width on current bar.
            </summary>
      <param name="barsAgo">Bars back number.</param>
      <param name="val">Plot price value.</param>
      <param name="color">Plot color.</param>
      <param name="width">Plot width.</param>
    </member>
    <member name="P:PowerLanguage.IPlotObject.Values">
      <summary>
             Read-only property. 
             Provides an array for accessing Values (plot values) of the bars previous 
             to the current one. The array index is number of bars back (Bars ago).
            </summary>
    </member>
    <member name="P:PowerLanguage.IPlotObject.Colors">
      <summary>
             Read-only property. 
             Provides an array for accessing Colors (plot color) of the bars previous 
             to the current one. The array index is number of bars back (Bars ago).
            </summary>
    </member>
    <member name="P:PowerLanguage.IPlotObject.Widths">
      <summary>
             Read-only property. 
             Provides an array for accessing Widths (plot width) of the bars previous 
             to the current one. The array index is number of bars back (Bars ago)
            </summary>
    </member>
    <member name="T:PowerLanguage.EPlotShapes">
      <summary>
             Enumeration describing plot shapes. 
            </summary>
    </member>
    <member name="F:PowerLanguage.EPlotShapes.Line">
      <summary>
             Line plot shape.
            </summary>
    </member>
    <member name="F:PowerLanguage.EPlotShapes.Histogram">
      <summary>
             Histogram plot shape.
            </summary>
    </member>
    <member name="F:PowerLanguage.EPlotShapes.Point">
      <summary>
             Point plot shape.
            </summary>
    </member>
    <member name="F:PowerLanguage.EPlotShapes.Cross">
      <summary>
             Cross plot shape.
            </summary>
    </member>
    <member name="F:PowerLanguage.EPlotShapes.BarHigh">
      <summary>
             BarHigh plot shape.
            </summary>
    </member>
    <member name="F:PowerLanguage.EPlotShapes.BarLow">
      <summary>
             BarLow plot shape.
            </summary>
    </member>
    <member name="F:PowerLanguage.EPlotShapes.LeftTick">
      <summary>
             LeftTick plot shape.
            </summary>
    </member>
    <member name="F:PowerLanguage.EPlotShapes.RightTick">
      <summary>
             RightTick plot shape.
            </summary>
    </member>
    <member name="T:PowerLanguage.EPlotStyle">
      <summary>
             Enumeration describing plot shapes. 
            </summary>
    </member>
    <member name="F:PowerLanguage.EPlotStyle.Solid">
      <summary>
             Solid plot line.
            </summary>
    </member>
    <member name="F:PowerLanguage.EPlotStyle.Dash">
      <summary>
             Dash plot line.
            </summary>
    </member>
    <member name="F:PowerLanguage.EPlotStyle.Dot">
      <summary>
             Dot plot line.
            </summary>
    </member>
    <member name="F:PowerLanguage.EPlotStyle.DashDot">
      <summary>
             Dash-Dot-Dash-Dot plot line.
            </summary>
    </member>
    <member name="F:PowerLanguage.EPlotStyle.DashDotDot">
      <summary>
             Dash-Dot-Dot-Dash plot line.
            </summary>
    </member>
    <member name="F:PowerLanguage.EPlotStyle.Invisible">
      <summary>
             Invisible plot line.
            </summary>
    </member>
    <member name="T:PowerLanguage.PlotAlignment">
      <summary>
            Output value alignment in Scanner's cell.
            </summary>
    </member>
    <member name="F:PowerLanguage.PlotAlignment.Left">
      <summary>
            Text alignment is set to Left
            </summary>
    </member>
    <member name="F:PowerLanguage.PlotAlignment.Center">
      <summary>
            Text alignment is set to Center
            </summary>
    </member>
    <member name="F:PowerLanguage.PlotAlignment.Right">
      <summary>
            Text alignment is set to Right
            </summary>
    </member>
    <member name="T:PowerLanguage.PlotFormat">
      <summary>
            Plots data format in Scanner's cell.
            </summary>
    </member>
    <member name="F:PowerLanguage.PlotFormat.SameAsInstrument">
      <summary>
            Scale format of output value is the same as instrument.
            </summary>
    </member>
    <member name="F:PowerLanguage.PlotFormat.Number">
      <summary>
            Scale format of output value is set to show complete value.
            </summary>
    </member>
    <member name="F:PowerLanguage.PlotFormat.Currency">
      <summary>
            Adds "$" sign after the output value.
            </summary>
    </member>
    <member name="F:PowerLanguage.PlotFormat.Percentage">
      <summary>
            Adds "%" sign after the output value.
            </summary>
    </member>
    <member name="F:PowerLanguage.PlotFormat.Date">
      <summary>
            Converts values from "datetime" format to "date" format.
            </summary>
    </member>
    <member name="F:PowerLanguage.PlotFormat.Time">
      <summary>
            Converts values from "datetime" format to "time" format.
            </summary>
    </member>
    <member name="F:PowerLanguage.PlotFormat.Text">
      <summary>
            Converts values to text format.
            </summary>
    </member>
    <member name="T:PowerLanguage.PlotAttributes">
      <summary>
             A structure for plots initialization.
            </summary>
    </member>
    <member name="M:PowerLanguage.PlotAttributes.#ctor(System.String,PowerLanguage.EPlotShapes,System.Drawing.Color,System.Drawing.Color,System.Int32,PowerLanguage.EPlotStyle,System.Boolean)">
      <summary>
             Initializes a new instance of the PlotAttributes.
            </summary>
      <param name="name">Plot name.</param>
      <param name="type">Plot type.</param>
      <param name="fgColor">Plot foreground color.</param>
      <param name="bgColor">Plot background color.</param>
      <param name="width">Plot width.</param>
      <param name="style">Plot style.</param>
      <param name="showLastPriceMarker">Determines whether to show last price marker.</param>
    </member>
    <member name="M:PowerLanguage.PlotAttributes.#ctor(System.String,PowerLanguage.EPlotShapes,System.Drawing.Color,System.Drawing.Color,System.Int32,System.Int32,System.Boolean)">
      <summary>
             Initializes a new instance of the PlotAttributes.
            </summary>
      <param name="name">Plot name.</param>
      <param name="type">Plot type.</param>
      <param name="fgColor">Plot foreground color.</param>
      <param name="bgColor">Plot background color.</param>
      <param name="width">Plot width.</param>
      <param name="style">Plot style.</param>
      <param name="showLastPriceMarker">Determines whether to show last price marker.</param>
    </member>
    <member name="M:PowerLanguage.PlotAttributes.#ctor(System.String,PowerLanguage.EPlotShapes,System.Drawing.Color)">
      <summary>
             Initializes a new instance of the PlotAttributes.
            </summary>
      <param name="name">Plot name.</param>
      <param name="type">Plot type.</param>
      <param name="fgColor">Plot foreground color.</param>
    </member>
    <member name="M:PowerLanguage.PlotAttributes.#ctor(System.String,System.Int32)">
      <summary>
             Initializes a new instance of the PlotAttributes.
            </summary>
      <param name="name">Plot name.</param>
      <param name="plotNum">Plot number.</param>
    </member>
    <member name="M:PowerLanguage.PlotAttributes.#ctor(System.String)">
      <summary>
             Initializes a new instance of the PlotAttributes.
            </summary>
      <param name="name">Plot name.</param>
    </member>
    <member name="M:PowerLanguage.PlotAttributes.#ctor(System.Int32)">
      <summary>
             Initializes a new instance of the PlotAttributes.
            </summary>
      <param name="plotNum">Plot number.</param>
    </member>
    <member name="F:PowerLanguage.PlotAttributes.Name">
      <summary>
             Plot name.
            </summary>
    </member>
    <member name="F:PowerLanguage.PlotAttributes.Type">
      <summary>
             Plot type:
             Line,
             Histogram,
             Point,
             Cross,
             BarHigh,
             BarLow,
             LeftTick,
             RightTick
            </summary>
    </member>
    <member name="F:PowerLanguage.PlotAttributes.Color">
      <summary>
             Plot’s foreground color.
            </summary>
    </member>
    <member name="F:PowerLanguage.PlotAttributes.BGColor">
      <summary>
             Plot’s background color.
            </summary>
    </member>
    <member name="F:PowerLanguage.PlotAttributes.Width">
      <summary>
             Plot’s width.
            </summary>
    </member>
    <member name="F:PowerLanguage.PlotAttributes.Style">
      <summary>
             Plot’s style.
            </summary>
    </member>
    <member name="F:PowerLanguage.PlotAttributes.MarkerLastPrice">
      <summary>
             Determines whether to show last price marker.
            </summary>
    </member>
    <member name="F:PowerLanguage.PlotAttributes.Alignment">
      <summary>
            Plot value alignment in Scanner's cell.
            </summary>
    </member>
    <member name="F:PowerLanguage.PlotAttributes.Format">
      <summary>
            Plots data format in Scanner's cell.
            </summary>
    </member>
    <member name="F:PowerLanguage.PlotAttributes.Precision">
      <summary>
            Number of digits after decimal point
            </summary>
    </member>
    <member name="T:PowerLanguage.StringPlotAttributes">
      <summary>
            A structure for string plot initialization.
            </summary>
    </member>
    <member name="F:PowerLanguage.StringPlotAttributes.Name">
      <summary>
            Plot name.
            </summary>
    </member>
    <member name="F:PowerLanguage.StringPlotAttributes.Color">
      <summary>
             Plot’s foreground color.
            </summary>
    </member>
    <member name="F:PowerLanguage.StringPlotAttributes.BGColor">
      <summary>
             Plot’s background color.
            </summary>
    </member>
    <member name="F:PowerLanguage.StringPlotAttributes.Alignment">
      <summary>
            Plot value alignment in Scanner's cell.
            </summary>
    </member>
    <member name="M:PowerLanguage.StringPlotAttributes.#ctor(System.String,System.Drawing.Color,System.Drawing.Color)">
      <summary>
            Initializes a new instance of the StringPlotAttributes.
            </summary>
      <param name="name">Plot name.</param>
      <param name="color">Plot’s foreground color.</param>
      <param name="bgColor">Plot’s background color.</param>
    </member>
    <member name="M:PowerLanguage.StringPlotAttributes.#ctor(System.String,System.Drawing.Color)">
      <summary>
            Initializes a new instance of the StringPlotAttributes.
            </summary>
      <param name="name">Plot name.</param>
      <param name="color">Plot’s foreground color.</param>
    </member>
    <member name="M:PowerLanguage.StringPlotAttributes.#ctor(System.Int32)">
      <summary>
             Initializes a new instance of the StringPlotAttributes.
            </summary>
      <param name="plotNum">Plot number.</param>
    </member>
    <member name="T:PowerLanguage.RequestTimeZone">
      <summary>
             Enumeration that describes time zone for the request.
            </summary>
    </member>
    <member name="F:PowerLanguage.RequestTimeZone.Local">
      <summary>
            Local Time Zone.
            </summary>
    </member>
    <member name="F:PowerLanguage.RequestTimeZone.GMT">
      <summary>
            GMT Time Zone.
            </summary>
    </member>
    <member name="F:PowerLanguage.RequestTimeZone.Exchange">
      <summary>
            Exchange Time Zone.
            </summary>
    </member>
    <member name="T:PowerLanguage.RequestQuoteField">
      <summary>
             Enumeration that describes quote field for the request.
            </summary>
    </member>
    <member name="F:PowerLanguage.RequestQuoteField.Bid">
      <summary>
            Bid Fields.
            </summary>
    </member>
    <member name="F:PowerLanguage.RequestQuoteField.Trade">
      <summary>
            Trade Fields.
            </summary>
    </member>
    <member name="F:PowerLanguage.RequestQuoteField.Ask">
      <summary>
            Ask Fields.
            </summary>
    </member>
    <member name="T:PowerLanguage.InstrumentDataRequest">
      <summary>
             The structure that defines instrument data request. 
            </summary>
    </member>
    <member name="M:PowerLanguage.InstrumentDataRequest.Verify">
      <summary>
            Checks for correctness.
            </summary>
    </member>
    <member name="F:PowerLanguage.InstrumentDataRequest.Symbol">
      <summary>
            Symbol name.
            </summary>
    </member>
    <member name="F:PowerLanguage.InstrumentDataRequest.DataFeed">
      <summary>
            Data feed name.
            </summary>
    </member>
    <member name="F:PowerLanguage.InstrumentDataRequest.Exchange">
      <summary>
            Exchange name.
            </summary>
    </member>
    <member name="F:PowerLanguage.InstrumentDataRequest.Category">
      <summary>
            Symbol category <see cref="T:PowerLanguage.ESymbolCategory" />.
            </summary>
    </member>
    <member name="F:PowerLanguage.InstrumentDataRequest.Resolution">
      <summary>
            Resolution info <see cref="T:PowerLanguage.Resolution" />.
            </summary>
    </member>
    <member name="F:PowerLanguage.InstrumentDataRequest.TimeZone">
      <summary>
            Time zone field. <see cref="T:PowerLanguage.RequestTimeZone" />.
            Default value is <see cref="F:PowerLanguage.RequestTimeZone.Local" />.
            </summary>
    </member>
    <member name="F:PowerLanguage.InstrumentDataRequest.QuoteField">
      <summary>
             Field of the QuoteField. <see cref="T:PowerLanguage.RequestQuoteField" />.
             Default value is <see cref="F:PowerLanguage.RequestQuoteField.Trade" />.
            </summary>
    </member>
    <member name="F:PowerLanguage.InstrumentDataRequest.SessionName">
      <summary>
             Field of the Session Name.
            </summary>
    </member>
    <member name="F:PowerLanguage.InstrumentDataRequest.FilterOutOfRangeData">
      <summary>
            Indicates whether to filter result data based on start/end point of the request.
            </summary>
    </member>
    <member name="F:PowerLanguage.InstrumentDataRequest.Subscribe2RT">
      <summary>
            Defines whether request is realtime or historical.
            </summary>
    </member>
    <member name="M:PowerLanguage.InstrumentDataRequest.#ctor(System.String,System.String,System.String,PowerLanguage.ESymbolCategory,PowerLanguage.Resolution,System.DateTime,System.DateTime)">
      <summary>
            Initializes a new instance of <see cref="T:PowerLanguage.InstrumentDataRequest" />.
            </summary>
      <param name="symbol">Symbol name.</param>
      <param name="dataFeed">Data feed name.</param>
      <param name="exchange">Exchange name.</param>
      <param name="category">Symbol category.</param>
      <param name="resolution">Resolution info.</param>
      <param name="from">"From" DateTime.</param>
      <param name="to">"To" DateTime.</param>
    </member>
    <member name="M:PowerLanguage.InstrumentDataRequest.#ctor(PowerLanguage.IInstrumentSettings,PowerLanguage.Resolution,System.DateTime,System.DateTime)">
      <summary>
            Initialize a new instance of <see cref="T:PowerLanguage.InstrumentDataRequest" />.
            </summary>
      <param name="Settings">Instrument settings. <see cref="T:PowerLanguage.IInstrumentSettings" /></param>
      <param name="resolution">Resolution info.</param>
      <param name="from">"From" DateTime.</param>
      <param name="to">"To" DateTime.</param>
    </member>
    <member name="M:PowerLanguage.InstrumentDataRequest.#ctor(PowerLanguage.IInstrumentSettings)">
      <summary>
            Initializes a new instance of <see cref="T:PowerLanguage.InstrumentDataRequest" />.
            </summary>
      <param name="Settings">Instrument settings. <see cref="T:PowerLanguage.IInstrumentSettings" /></param>
    </member>
    <member name="M:PowerLanguage.InstrumentDataRequest.#ctor(System.String,ATCenterProxy.interop.MTPA_MCSymbolInfo2,PowerLanguage.Resolution,System.DateTime,System.DateTime)">
      <summary>
            Initializes a new instance of <see cref="T:PowerLanguage.InstrumentDataRequest" />.
            </summary>
      <param name="dataFeed">Data feed name.</param>
      <param name="symbol">Symbol name.</param>
      <param name="resolution">Resolution info.</param>
      <param name="from">"From" DateTime.</param>
      <param name="to">"To" DateTime.</param>
    </member>
    <member name="M:PowerLanguage.InstrumentDataRequest.#ctor(ATCenterProxy.interop.MTPA_MCSymbolInfo2)">
      <summary>
            Initializes a new instance of <see cref="T:PowerLanguage.InstrumentDataRequest" />.
            </summary>
      <param name="symbol">Symbol info.</param>
    </member>
    <member name="F:PowerLanguage.InstrumentDataRequest.BuildVolumeOn">
      <summary>
            Instrument's "build volume on" setting. <see cref="T:PowerLanguage.BuildVolumeOn" /></summary>
    </member>
    <member name="F:PowerLanguage.InstrumentDataRequest.Range">
      <summary>
            Represents data request's range. <see cref="T:PowerLanguage.DataRequest" /></summary>
    </member>
    <member name="M:PowerLanguage.InstrumentDataRequest.#ctor(PowerLanguage.IInstrumentSettings,PowerLanguage.Resolution,PowerLanguage.DataRequest)">
      <summary>
            Initializes a new instance of <see cref="T:PowerLanguage.InstrumentDataRequest" />.
            </summary>
      <param name="settings">Instrument's settings. <see cref="T:PowerLanguage.IInstrumentSettings" /></param>
      <param name="res">Instrument's resolution. <see cref="T:PowerLanguage.Resolution" /></param>
      <param name="request">Instrument's data range. <see cref="T:PowerLanguage.DataRequest" /></param>
    </member>
    <member name="P:PowerLanguage.InstrumentDataRequest.From">
      <summary>
            Obsolete. Use <see cref="F:PowerLanguage.InstrumentDataRequest.Range" />.
            </summary>
    </member>
    <member name="P:PowerLanguage.InstrumentDataRequest.To">
      <summary>
            Obsolete. Use <see cref="F:PowerLanguage.InstrumentDataRequest.Range" />.
            </summary>
    </member>
    <member name="T:PowerLanguage.BuildVolumeOn">
      <summary>
            Enumeration that describes Instrument's "build volume on" setting.
            </summary>
    </member>
    <member name="F:PowerLanguage.BuildVolumeOn.TickCount">
      <summary>
            Build on tick count.
            </summary>
    </member>
    <member name="F:PowerLanguage.BuildVolumeOn.Volume">
      <summary>
            Build on volume.
            </summary>
    </member>
    <member name="T:PowerLanguage.LoadDataCallback">
      <summary>
             LoadDataCallback delegate.
            </summary>
      <param name="Result">Result object.</param>
    </member>
    <member name="T:PowerLanguage.DataLoadedEvent">
      <summary>
            Enumeration the describes reasons for making the LoadDataCallback callback. 
            </summary>
    </member>
    <member name="F:PowerLanguage.DataLoadedEvent.None">
      <summary>
            None.
            </summary>
    </member>
    <member name="F:PowerLanguage.DataLoadedEvent.History">
      <summary>
            LoadDataCallback was made because historical data arrived.
            </summary>
    </member>
    <member name="F:PowerLanguage.DataLoadedEvent.RTUpdateLastBar">
      <summary>
            LoadDataCallback was made because last bar was updated.
            </summary>
    </member>
    <member name="F:PowerLanguage.DataLoadedEvent.RTNewBar">
      <summary>
            LoadDataCallback was made because new bar was formed.
            </summary>
    </member>
    <member name="T:PowerLanguage.IDataLoaderResult">
      <summary>
             The result of data loading.
            </summary>
    </member>
    <member name="P:PowerLanguage.IDataLoaderResult.IsCompleted">
      <summary>
             Read-only property. Returns whether data loading is completed.
            </summary>
    </member>
    <member name="P:PowerLanguage.IDataLoaderResult.State">
      <summary>
             Read-only property. Returns current state of the object.
            </summary>
    </member>
    <member name="P:PowerLanguage.IDataLoaderResult.Data">
      <summary>
             Read-only property. Returns loaded data.
            </summary>
    </member>
    <member name="P:PowerLanguage.IDataLoaderResult.Data2">
      <summary>
            Read-only property. Describes volume profile data. <see cref="T:PowerLanguage.BarPriceLevels" />.
            </summary>
    </member>
    <member name="P:PowerLanguage.IDataLoaderResult.Request">
      <summary>
             Read-only property. Returns request.
            </summary>
    </member>
    <member name="P:PowerLanguage.IDataLoaderResult.RTData">
      <summary>
            Nullable property represents real-time data. <see cref="T:PowerLanguage.Bar" />.
            </summary>
    </member>
    <member name="P:PowerLanguage.IDataLoaderResult.RTData2">
      <summary>
            Nullable property represents real-time volume profile data. <see cref="T:PowerLanguage.BarPriceLevels" />.
            </summary>
    </member>
    <member name="P:PowerLanguage.IDataLoaderResult.Event">
      <summary>
            LoadDataCallback event's call reason. <see cref="T:PowerLanguage.DataLoadedEvent" />.
            </summary>
    </member>
    <member name="T:PowerLanguage.IDataLoader">
      <summary>
             Data loading.
            </summary>
    </member>
    <member name="M:PowerLanguage.IDataLoader.BeginLoadData(PowerLanguage.InstrumentDataRequest,PowerLanguage.LoadDataCallback,System.Object)">
      <summary>
             Initializes the data loading.
            </summary>
      <param name="Request">Data loading request.</param>
      <param name="Sink">Result Callback.</param>
      <param name="State">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:PowerLanguage.IDataLoader.EndLoadData(PowerLanguage.IDataLoaderResult)">
      <summary>
             Cancel data loading.
            </summary>
      <param name="Result">Result of data loading.</param>
    </member>
    <member name="T:PowerLanguage.PublicFunctions">
      <summary>
             A set of public functions for common use.
            </summary>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.Iff``1(System.Boolean,``0,``0)">
      <summary>
             The function that returns trueVal if the condition is true and returns
             falseVal if the condition is false.
            </summary>
      <param name="condition">Condition.</param>
      <param name="trueVal">Function returns value if the condition is true.</param>
      <param name="falseVal">Function returns value if the condition is false.</param>
      <typeparam name="T">Any type - double, int, string, etc.</typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.IffLogic``1(System.Boolean,``0,``0)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.PublicFunctions.TrueRangeCustom(PowerLanguage.ISeries{System.Double},PowerLanguage.ISeries{System.Double},PowerLanguage.ISeries{System.Double},System.Int32)">
      <summary>
             The function returns TrueRangeCustom value for the offset 'bars ago' from current bar.
            </summary>
      <param name="high">High series values.</param>
      <param name="low">Low series values.</param>
      <param name="close">Close series values.</param>
      <param name="offset">The numerical expression specifying the number of bars back.</param>
      <returns>TrueRangeCustom value for the offset 'bars ago' from current bar.</returns>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.TrueRangeCustom(PowerLanguage.ISeries{System.Double},PowerLanguage.ISeries{System.Double},PowerLanguage.ISeries{System.Double})">
      <summary>
             The function returns TrueRangeCustom value for the current bar.
            </summary>
      <param name="high">Hight series values.</param>
      <param name="low">Low series values.</param>
      <param name="close">Close series values.</param>
      <returns>TrueRangeCustom value for the current bar.</returns>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.TrueRange(PowerLanguage.IStudy)">
      <summary>
             The function returns TrueRange value for current bar of the base data stream.
            </summary>
      <param name="_this">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.TrueRange(PowerLanguage.IStudy,System.Int32)">
      <summary>
             The function returns TrueRange value for the base datastream.
            </summary>
      <param name="_this">
      </param>
      <param name="barsback">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.TrueRange(PowerLanguage.IStudy,System.Int32,System.Int32)">
      <summary>
             The function returns TrueRangeCustom value for '_this' study data on data stream and 'barsback' bars ago.
            </summary>
      <param name="_this">Study info.</param>
      <param name="barsback">Number of bars ago.</param>
      <param name="datastream">Data stream number.</param>
      <returns>TrueRangeCustom value for '_this' study data on data stream and 'barsback' bars ago.</returns>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.TrueRangeSeries(PowerLanguage.IStudy)">
      <summary>
            The function returns TrueRange series value.
            </summary>
      <param name="_this">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.TrueRangeSeries(PowerLanguage.IStudy,System.Int32)">
      <summary>
            The function returns TrueRange series value.
            </summary>
      <param name="_this">
      </param>
      <param name="bb">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.TrueRangeSeries(PowerLanguage.IStudy,System.Int32,System.Int32)">
      <summary>
            The function returns TrueRange series value.
            </summary>
      <param name="_this">
      </param>
      <param name="bb">
      </param>
      <param name="datastream">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.TimeNextBar(PowerLanguage.ISeriesSymbolData)">
      <summary>
            Return time for next bar.
            Can be used in signals/strategy with CalcAtOpenNextBarAttribute(true) attribute
            </summary>
      <param name="_this">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.OpenNextBar(PowerLanguage.ISeriesSymbolData)">
      <summary>
            Return Open of a next bar.
            Can be used in signals/strategy with CalcAtOpenNextBarAttribute(true) attribute
            </summary>
      <param name="_this">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.RaiseRunTimeError(System.String)">
      <summary>
             A function to raise a study's runtime exception.
            </summary>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.GradientColor(System.Double,System.Double,System.Double,System.Drawing.Color,System.Drawing.Color)">
      <summary>
             The function to calculate gradient color of the input parameters.
            </summary>
      <param name="val">Value.</param>
      <param name="min">Min value.</param>
      <param name="max">Max value.</param>
      <param name="lcolor">Left color.</param>
      <param name="rcolor">Right color.</param>
      <returns>Gradient color of the input parameters.</returns>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.Min(System.Double,System.Double[])">
      <summary>
             The function calculates min value from the 'args' array.
            </summary>
      <param name="firstArg">First argument.</param>
      <param name="args">An array of values where minimum will be found.</param>
      <returns>A min value from args array.</returns>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.Max(System.Double,System.Double[])">
      <summary>
             The function calculates min value from the args array.
            </summary>
      <param name="firstArg">First argument.</param>
      <param name="args">An array of values where maximum will be found.</param>
      <returns>A max value from args array.</returns>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.Avg(System.Double,System.Double[])">
      <summary>
             The function calculates average value of the args array.
            </summary>
      <param name="firstArg">First argument.</param>
      <param name="args">An array of values where average will be found.</param>
      <returns>An average value from args array.</returns>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.DoubleLess(System.Double,System.Double)">
      <summary>
             The function checks that 'lval' is less than 'rval'.
            </summary>
      <param name="lval">First value.</param>
      <param name="rval">Second value.</param>
      <returns>True if lval is less than rval, and false otherwise.</returns>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.DoubleGreater(System.Double,System.Double)">
      <summary>
             The function checks that lval is greater than rval.
            </summary>
      <param name="lval">First value.</param>
      <param name="rval">Second value.</param>
      <returns>True if lval is greater than rval, and false otherwise.</returns>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.DoubleLessEquals(System.Double,System.Double)">
      <summary>
             The function checks that lval is less than rval or lval is not greater than rval.
            </summary>
      <param name="lval">First value.</param>
      <param name="rval">Second value.</param>
      <returns>True if lval is less than rval or lval is not greater than rval, and false otherwise.</returns>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.DoubleGreaterEquals(System.Double,System.Double)">
      <summary>
             The function checks that lval is greater than rval or lval is not less than rval.
            </summary>
      <param name="lval">First value.</param>
      <param name="rval">Second value.</param>
      <returns>True if lval is greater than rval or lval is not less than rval, and false otherwise.</returns>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.DoubleEquals(System.Double,System.Double)">
      <summary>
             The function checks that lval is not less than rval or lval is not greater than rval.
            </summary>
      <param name="lval">First value.</param>
      <param name="rval">Second value.</param>
      <returns>True if lval is equal to rval, and false otherwise.</returns>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.IsDayBased(PowerLanguage.EResolution)">
      <summary>
            Returns 'true' if resolution is Day or higher; otherwise returns 'false'.
            </summary>
      <param name="resolution">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.BarsSinceEntry(PowerLanguage.IStrategy,System.Int32)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.PublicFunctions.BarsSinceEntry(PowerLanguage.IStrategy)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.PublicFunctions.BarsSinceExit(PowerLanguage.IStrategy,System.Int32)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.PublicFunctions.BarsSinceExit(PowerLanguage.IStrategy)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.PublicFunctions.ContractProfit(PowerLanguage.IStrategy,System.Int32)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.PublicFunctions.ContractProfit(PowerLanguage.IStrategy)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.PublicFunctions.CurrentEntries(PowerLanguage.IStrategy)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.PublicFunctions.EntryTime(PowerLanguage.IStrategy,System.Int32)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.PublicFunctions.EntryTime(PowerLanguage.IStrategy)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.PublicFunctions.EntryPrice(PowerLanguage.IStrategy,System.Int32)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.PublicFunctions.EntryPrice(PowerLanguage.IStrategy)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.PublicFunctions.ExitTime(PowerLanguage.IStrategy,System.Int32)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.PublicFunctions.ExitTime(PowerLanguage.IStrategy)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.PublicFunctions.ExitPrice(PowerLanguage.IStrategy,System.Int32)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.PublicFunctions.ExitPrice(PowerLanguage.IStrategy)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.PublicFunctions.MaxEntries(PowerLanguage.IStrategy,System.Int32)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.PublicFunctions.MaxEntries(PowerLanguage.IStrategy)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.PublicFunctions.MaxPositionsAgo(PowerLanguage.IStrategy)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.PublicFunctions.MaxPositionLoss(PowerLanguage.IStrategy,System.Int32)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.PublicFunctions.MaxPositionLoss(PowerLanguage.IStrategy)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.PublicFunctions.MaxPositionProfit(PowerLanguage.IStrategy,System.Int32)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.PublicFunctions.MaxPositionProfit(PowerLanguage.IStrategy)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.PublicFunctions.OpenPositionProfit(PowerLanguage.IStrategy)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.PublicFunctions.PositionProfit(PowerLanguage.IStrategy,System.Int32)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.PublicFunctions.PositionProfit(PowerLanguage.IStrategy)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.PublicFunctions.Summ(PowerLanguage.ISeries{System.Double},System.Int32,System.Int32)">
      <summary>
             The function calculates the sum of series values.
            </summary>
      <param name="seria">Series values.</param>
      <param name="length">The number of elements.</param>
      <param name="barOffset">The number of bars ago.</param>
      <returns>The sum of series values.</returns>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.Summation(PowerLanguage.ISeries{System.Double},System.Int32)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.PublicFunctions.Summation(PowerLanguage.ISeries{System.Double},System.Int32,System.Int32)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.PublicFunctions.Average(PowerLanguage.ISeries{System.Double},System.Int32,System.Int32)">
      <summary>
             The function calculates the average of series values.
            </summary>
      <param name="seria">Series values.</param>
      <param name="length">The number of elements.</param>
      <param name="barOffset">The number of bars ago.</param>
      <returns>The average of series values.</returns>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.Average(PowerLanguage.ISeries{System.Double},System.Int32)">
      <summary>
             The function calculates the average of series values from current bar.
            </summary>
      <param name="seria">Series values.</param>
      <param name="length">The number of elements.</param>
      <returns>The average of series values from current bar.</returns>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.SummationCustom(PowerLanguage.ISeries{System.Double},System.Int32,System.Int32)">
      <summary>
             The function calculates the sum of series values.
            </summary>
      <param name="seria">Series values.</param>
      <param name="length">The number of elements. Parameter should be &gt; 0.</param>
      <param name="offset">The number of bars ago.</param>
      <returns>The sum of series values.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
      </exception>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.SummationCustom(PowerLanguage.ISeries{System.Double},System.Int32)">
      <summary>
             The function calculates the sum of series values for current bar.
            </summary>
      <param name="seria">Series values.</param>
      <param name="length">The number of elements. Parameter should be &gt; 0.</param>
      <returns>The sum of series values.</returns>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.SummationIf(PowerLanguage.ISeries{System.Boolean},PowerLanguage.ISeries{System.Double},System.Int32,System.Int32)">
      <summary>
             The function calculates the sum of series values with condition.
            </summary>
      <param name="seria">Series values.</param>
      <param name="ifSeria">Conditions array.</param>
      <param name="length">The number of elements. Parameter should be &gt; 0.</param>
      <param name="offset">The number of bars ago.</param>
      <returns>The sum of series values with conditions.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
      </exception>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.SummationIf(PowerLanguage.ISeries{System.Boolean},PowerLanguage.ISeries{System.Double},System.Int32)">
      <summary>
             The function calculates the sum of series values with condition for current bar.
            </summary>
      <param name="seria">Series values.</param>
      <param name="ifSeria">Conditions array.</param>
      <param name="length">The number of elements. Parameter should be &gt; 0.</param>
      <returns>The sum of series values with conditions.</returns>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.AverageCustom(PowerLanguage.ISeries{System.Double},System.Int32,System.Int32)">
      <summary>
             The function calculates the average series value.
            </summary>
      <param name="seria">Series values.</param>
      <param name="length">The number of elements. Parameter should be &gt; 0.</param>
      <param name="offset">The number of bars ago.</param>
      <returns>The average series values.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
      </exception>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.AverageCustom(PowerLanguage.ISeries{System.Double},System.Int32)">
      <summary>
             The function calculates the average series value.
            </summary>
      <param name="seria">Series values.</param>
      <param name="length">The number of elements. Parameter should be &gt; 0.</param>
      <returns>The average series values.</returns>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.WAverageCustom(PowerLanguage.ISeries{System.Double},System.Int32,System.Int32)">
      <summary>
             The function calculates the average series value.
            </summary>
      <param name="seria">Series values.</param>
      <param name="length">The number of elements. Parameter should be &gt; 0.</param>
      <param name="offset">The number of bars ago. Parameter should be &gt; 0.</param>
      <returns>The average series values.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
      </exception>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.WAverageCustom(PowerLanguage.ISeries{System.Double},System.Int32)">
      <summary>
             The function calculates the average series value.
            </summary>
      <param name="seria">Series values.</param>
      <param name="length">The number of elements. Parameter should be &gt; 0.</param>
      <returns>The average series values.</returns>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.Highest(PowerLanguage.ISeries{System.Double},System.Int32,System.Int32@,System.Int32)">
      <summary>
             The function calculates the highest series value.
            </summary>
      <param name="seria">Series values.</param>
      <param name="length">The number of elements. Parameter should be &gt; 0.</param>
      <param name="barOffset">Index of highest series value.</param>
      <param name="barsback">Bars back number.</param>
      <returns>The highest series value.</returns>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.Highest(PowerLanguage.ISeries{System.Double},System.Int32,System.Int32)">
      <summary>
             The function calculates the highest series value.
            </summary>
      <param name="seria">Series values.</param>
      <param name="length">The number of elements. Parameter should be &gt; 0.</param>
      <param name="barsback">Bars back number.</param>
      <returns>The highest series value.</returns>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.Highest(PowerLanguage.ISeries{System.Double},System.Int32,System.Int32@)">
      <summary>
             The function calculates the highest series value.
            </summary>
      <param name="seria">Series values.</param>
      <param name="length">The number of elements. Parameter should be &gt; 0.</param>
      <param name="barOffset">Index of highest series value.</param>
      <returns>The highest series value.</returns>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.Highest(PowerLanguage.ISeries{System.Double},System.Int32)">
      <summary>
             The function calculates the highest series value.
            </summary>
      <param name="seria">Series values.</param>
      <param name="length">The number of elements. Parameter should be &gt; 0.</param>
      <returns>The highest series value.</returns>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.Lowest(PowerLanguage.ISeries{System.Double},System.Int32,System.Int32@)">
      <summary>
             The function calculates the lowest series value.
            </summary>
      <param name="seria">Series values.</param>
      <param name="length">The number of elements. Parameter should be &gt; 0.</param>
      <param name="barOffset">Index of lowest series value.</param>
      <returns>The lowest series value.</returns>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.Lowest(PowerLanguage.ISeries{System.Double},System.Int32,System.Int32@,System.Int32)">
      <summary>
             The function calculates the lowest series value.
            </summary>
      <param name="seria">Series values.</param>
      <param name="length">The number of elements. Parameter should be &gt; 0.</param>
      <param name="barOffset">Index of lowest seria value.</param>
      <param name="barsback">Bars back number.</param>
      <returns>The lowest series value.</returns>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.Lowest(PowerLanguage.ISeries{System.Double},System.Int32,System.Int32)">
      <summary>
             The function calculates the lowest series value.
            </summary>
      <param name="seria">Series values.</param>
      <param name="length">The number of elements. Parameter should be &gt; 0.</param>
      <param name="barsback">Bars back number.</param>
      <returns>The lowest series value.</returns>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.Lowest(PowerLanguage.ISeries{System.Double},System.Int32)">
      <summary>
             The function calculates the lowest series value.
            </summary>
      <param name="seria">Series values.</param>
      <param name="length">The number of elements. Parameter should be &gt; 0.</param>
      <returns>The lowest series value.</returns>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.Crosses``1(PowerLanguage.ISeries{``0},PowerLanguage.ISeries{``0},System.Int32,System.Collections.Generic.IComparer{``0})">
      <summary>
             The function checks that series1 crosses series2.
            </summary>
      <param name="seria1">First series values.</param>
      <param name="seria2">Second series values.</param>
      <param name="maxLookBack">The number of max bars back.</param>
      <param name="comparator">Comparator to find crosses.</param>
      <typeparam name="T">Any type - double, int, string, etc.</typeparam>
      <returns>True if series1 crosses series2 and false otherwise.</returns>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.Crosses``1(PowerLanguage.ISeries{``0},``0,System.Int32,System.Collections.Generic.IComparer{``0})">
      <summary>
             The function checks that series1 has desired value.
            </summary>
      <param name="seria1">Series values.</param>
      <param name="val">The desired value.</param>
      <param name="maxLookBack">The number of max bars back.</param>
      <param name="comparator">Comparator to find the crosses.</param>
      <typeparam name="T">Any type - double, int, string, etc.</typeparam>
      <returns>True if series has desired value and false otherwise.</returns>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.CrossesUnder(PowerLanguage.ISeries{System.Double},PowerLanguage.ISeries{System.Double},System.Int32)">
      <summary>
             The function checks that series1 crosses series2.
            </summary>
      <param name="seria1">First series values.</param>
      <param name="seria2">Second series values.</param>
      <param name="maxLookBack">The number of max bars back.</param>
      <returns>True if series1 crosses series2 and false otherwise.</returns>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.CrossesUnder(PowerLanguage.ISeries{System.Double},System.Double,System.Int32)">
      <summary>
             The function checks that series has desired value.
            </summary>
      <param name="seria">Series values.</param>
      <param name="value">The desired value.</param>
      <param name="maxLookBack">The number of max bars back.</param>
      <returns>True if series has desired value and false otherwise.</returns>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.CrossesOver(PowerLanguage.ISeries{System.Double},PowerLanguage.ISeries{System.Double},System.Int32)">
      <summary>
             The function checks that series1 crosses series2.
            </summary>
      <param name="seria1">First series values.</param>
      <param name="seria2">Second series values.</param>
      <param name="maxLookBack">The number of max bars back.</param>
      <returns>True if series1 crosses series2 and false otherwise.</returns>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.CrossesOver(PowerLanguage.ISeries{System.Double},System.Double,System.Int32)">
      <summary>
             The function checks that series has desired value.
            </summary>
      <param name="seria">Series values.</param>
      <param name="value">The desired value.</param>
      <param name="maxLookBack">The number of max bars back.</param>
      <returns>True if series has desired value and false otherwise.</returns>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.CrossesUnder(PowerLanguage.IStudy,PowerLanguage.ISeries{System.Double},PowerLanguage.ISeries{System.Double})">
      <summary>
             The function checks that series1 crosses under series2.
            </summary>
      <param name="_this">Study data.</param>
      <param name="seria1">First series values.</param>
      <param name="seria2">Second series values.</param>
      <returns>True if series1 crosses series2 and false otherwise.</returns>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.CrossesUnder(PowerLanguage.IStudy,PowerLanguage.ISeries{System.Double},System.Double)">
      <summary>
             The function checks that series has desired value.
            </summary>
      <param name="_this">Study data.</param>
      <param name="seria">Series values.</param>
      <param name="value">The desired value.</param>
      <returns>True if series has desired value and false otherwise.</returns>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.CrossesOver(PowerLanguage.IStudy,PowerLanguage.ISeries{System.Double},PowerLanguage.ISeries{System.Double})">
      <summary>
             The function checks that series1 crosses over series2.
            </summary>
      <param name="_this">Study data.</param>
      <param name="seria1">First series values.</param>
      <param name="seria2">Second series values.</param>
      <returns>True if series1 crosses series2 and false otherwise.</returns>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.CrossesOver(PowerLanguage.IStudy,PowerLanguage.ISeries{System.Double},System.Double)">
      <summary>
             The function checks that series has desired value.
            </summary>
      <param name="_this">Study data.</param>
      <param name="seria">Series values.</param>
      <param name="value">The desired value.</param>
      <returns>True if series has desired value and false otherwise.</returns>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.VarianceCustom(PowerLanguage.ISeries{System.Double},System.Int32,System.Int32)">
      <summary>
             The function calculates custom variance.
            </summary>
      <param name="prices">Series values.</param>
      <param name="length">The number of elements.</param>
      <param name="dataType">Data type.</param>
      <returns>Custom variance value.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
      </exception>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.SummCustom(System.Double[],System.Int32)">
      <summary>
            This function calculates summ of array values
            </summary>
      <param name="prices">
      </param>
      <param name="length">
      </param>
      <returns>
      </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
      </exception>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.AverageCustom(System.Double[],System.Int32)">
      <summary>
            This function calculates average value of array
            </summary>
      <param name="prices">
      </param>
      <param name="length">
      </param>
      <returns>
      </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
      </exception>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.VarianceCustom(System.Double[],System.Int32,System.Int32)">
      <summary>
            The function calculates custom variance.
            </summary>
      <param name="prices">
      </param>
      <param name="length">
      </param>
      <param name="dataType">
      </param>
      <returns>
      </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
      </exception>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.StandardDeviationCustom(PowerLanguage.ISeries{System.Double},System.Int32,System.Int32)">
      <summary>
             The function calculates custom standard deviation.
            </summary>
      <param name="prices">Series values.</param>
      <param name="length">The number of elements.</param>
      <param name="dataType">Data type.</param>
      <returns>Custom standard deviation value.</returns>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.StandardDeviationCustom(System.Double[],System.Int32,System.Int32)">
      <summary>
            The function calculates custom standard deviation.
            </summary>
      <param name="prices">
      </param>
      <param name="length">
      </param>
      <param name="dataType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.BollingerBandCustom(PowerLanguage.ISeries{System.Double},System.Int32,System.Double)">
      <summary>
             The function calculates Bollinger Band custom.
            </summary>
      <param name="prices">Series values.</param>
      <param name="length">The number of elements.</param>
      <param name="numDevs">
      </param>
      <returns>Bollinger Band custom value.</returns>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.UlcerIndex(PowerLanguage.ISeries{System.Double},System.Int32)">
      <summary>
             The function calculates ulcer index.
            </summary>
      <param name="seria">Series values.</param>
      <param name="length">The number of elements.</param>
      <returns>Ulcer index value.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
      </exception>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.LinearRegCustom(PowerLanguage.ISeries{System.Double},System.Int32,System.Int32,System.Int32,System.Double@,System.Double@,System.Double@)">
      <summary>
             The function calculates linear reg custom.
            </summary>
      <param name="seria">Series values.</param>
      <param name="length">Number of elements.</param>
      <param name="targetBar">Target bar value.</param>
      <param name="offset">Offset value.</param>
      <param name="slope">Slope value.</param>
      <param name="angle">Angle value.</param>
      <param name="intercept">Intercept value.</param>
      <returns>Linear reg custom value.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
      </exception>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.LinearRegCustom(PowerLanguage.ISeries{System.Double},System.Int32,System.Int32,System.Double@,System.Double@,System.Double@)">
      <summary>
             The function calculates linear reg custom.
            </summary>
      <param name="seria">Series values.</param>
      <param name="length">The number of elements.</param>
      <param name="targetBar">Target bar value.</param>
      <param name="slope">Slope value.</param>
      <param name="angle">Angle value.</param>
      <param name="intercept">Intercept value.</param>
      <returns>Linear reg custom value.</returns>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.StandardError(PowerLanguage.ISeries{System.Double},System.Int32)">
      <summary>
             The function calculates standard error value.
            </summary>
      <param name="seria">Series values.</param>
      <param name="length">The number of elements.</param>
      <returns>Standard error value.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
      </exception>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.Extremum``1(PowerLanguage.ISeries{``0},System.Int32,System.Int32,System.Collections.Generic.IComparer{``0},System.Int32@)">
      <summary>
             The function calculates extremum value.
            </summary>
      <param name="seria1">Series values.</param>
      <param name="length">The number of elements.</param>
      <param name="offset">Offset value.</param>
      <param name="comparator">Comparator to find the extremum.</param>
      <param name="extremeBar">Extremum bar index.</param>
      <typeparam name="T">
      </typeparam>
      <returns>Extremum value.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
      </exception>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.ExtremeHigh(PowerLanguage.ISeries{System.Double},System.Int32,System.Int32,System.Int32@)">
      <summary>
             The function calculates extremum high value.
            </summary>
      <param name="seria">Series values.</param>
      <param name="length">The number of elements.</param>
      <param name="offset">Offset value.</param>
      <param name="extremeBar">Extremum bar index.</param>
      <returns>Extremum high value.</returns>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.ExtremeHigh(PowerLanguage.ISeries{System.Double},System.Int32,System.Int32@)">
      <summary>
             The function calculates extremum high value.
            </summary>
      <param name="seria">Series values.</param>
      <param name="length">The number of elements.</param>
      <param name="extremeBar">Extremum bar index.</param>
      <returns>Extremum high value.</returns>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.ExtremeLow(PowerLanguage.ISeries{System.Double},System.Int32,System.Int32,System.Int32@)">
      <summary>
             The function calculates extremum low value.
            </summary>
      <param name="seria">Series values.</param>
      <param name="length">The number of elements.</param>
      <param name="offset">Offset value.</param>
      <param name="extremeBar">Extremum bar index.</param>
      <returns>Extremum low value.</returns>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.ExtremeLow(PowerLanguage.ISeries{System.Double},System.Int32,System.Int32@)">
      <summary>
             The function calculates extremum low value.
            </summary>
      <param name="seria">Series values.</param>
      <param name="length">The number of elements.</param>
      <param name="extremeBar">Extremum bar index.</param>
      <returns>Extremum low value.</returns>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.Pivot``1(PowerLanguage.IStudy,PowerLanguage.ISeries{``0},System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Collections.Generic.IComparer{``0},``0@,System.Int32@)">
      <summary>
             The function calculates pivot values.
            </summary>
      <param name="tech">Technique data.</param>
      <param name="seria">Series values.</param>
      <param name="length">The number of elements.</param>
      <param name="leftStrength">The left strength value.</param>
      <param name="rightStrength">The right strength value.</param>
      <param name="instance">Instance value.</param>
      <param name="offset">Offset value.</param>
      <param name="comparator">Comparator to find the pivot.</param>
      <param name="pivotPrice">Found pivot price.</param>
      <param name="pivotBar">Found pivot bar.</param>
      <typeparam name="T">
      </typeparam>
      <returns>1 if pivot is found and -1 otherwise.</returns>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.Pivot``1(PowerLanguage.IStudy,PowerLanguage.ISeries{``0},System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,``0@,System.Int32@)">
      <summary>
             The function calculates pivot values.
            </summary>
      <param name="tech">Technique data.</param>
      <param name="seria">Series values.</param>
      <param name="barsLookBack">Bars look back value.</param>
      <param name="leftStrength">The left strength value.</param>
      <param name="rightStrength">The right strength value.</param>
      <param name="instance">Instance value.</param>
      <param name="offset">Offset value.</param>
      <param name="highLow">Indicates whether high or low.</param>
      <param name="pivotPrice">Found pivot price.</param>
      <param name="pivotBar">Found pivot bar.</param>
      <typeparam name="T">
      </typeparam>
      <returns>1 if pivot is found and -1 otherwise.</returns>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.PivotHigh(PowerLanguage.IStudy,PowerLanguage.ISeries{System.Double},System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
      <summary>
             The function calculates pivot high values.
            </summary>
      <param name="tech">Technique data.</param>
      <param name="seria">Series values.</param>
      <param name="barsLookBack">Bars look back value.</param>
      <param name="leftStrength">The left strength value.</param>
      <param name="rightStrength">The right strength value.</param>
      <param name="instance">Instance value.</param>
      <param name="offset">Offset value.</param>
      <param name="pivotBar">Found pivot bar.</param>
      <returns>1 if pivot is found and -1 otherwise.</returns>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.PivotHigh(PowerLanguage.IStudy,PowerLanguage.ISeries{System.Double},System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
      <summary>
             The function calculates pivot high values.
            </summary>
      <param name="tech">Technique data.</param>
      <param name="seria">Series values.</param>
      <param name="barsLookBack">Bars look back value.</param>
      <param name="leftStrength">The left strength value.</param>
      <param name="rightStrength">The right strength value.</param>
      <param name="instance">Instance value.</param>
      <param name="pivotBar">Found pivot bar.</param>
      <returns>1 if pivot is found and -1 otherwise.</returns>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.PivotLow(PowerLanguage.IStudy,PowerLanguage.ISeries{System.Double},System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
      <summary>
             The function calculates pivot low values.
            </summary>
      <param name="tech">Study data.</param>
      <param name="seria">Series values.</param>
      <param name="barsLookBack">Bars look back value.</param>
      <param name="leftStrength">The left strength value.</param>
      <param name="rightStrength">The right strength value.</param>
      <param name="instance">Instance value.</param>
      <param name="offset">Offset value.</param>
      <param name="pivotBar">Found pivot bar.</param>
      <returns>1 if pivot is found and -1 otherwise.</returns>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.PivotLow(PowerLanguage.IStudy,PowerLanguage.ISeries{System.Double},System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
      <summary>
             The function calculates pivot low values.
            </summary>
      <param name="tech">Study data.</param>
      <param name="seria">Series values.</param>
      <param name="barsLookBack">Bars look back value.</param>
      <param name="leftStrength">The left strength value.</param>
      <param name="rightStrength">The right strength value.</param>
      <param name="instance">Instance value.</param>
      <param name="pivotBar">Found pivot bar.</param>
      <returns>1 if pivot is found and -1 otherwise.</returns>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.CummRatio(System.Double[],System.Double[],System.Int32,System.Double)">
      <summary>
            The function calculates cumulative ratio value.
            </summary>
      <param name="_src">Source data.</param>
      <param name="_dst">Destination data.</param>
      <param name="_count">Count of elements.</param>
      <param name="_initial_value">Initial value.</param>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.Variance(System.Double[])">
      <summary>
            The function calculates variance value.
            </summary>
      <param name="prices">Prices array.</param>
      <returns>Variance value.</returns>
    </member>
    <member name="M:PowerLanguage.PublicFunctions.StandardDeviation(System.Double[])">
      <summary>
            The function calculates standard deviation.
            </summary>
      <param name="prices">Prices array.</param>
      <returns>Standard deviation value.</returns>
    </member>
    <member name="T:PowerLanguage.PublicFunctions.CComparer`1">
      <exclude />
    </member>
    <member name="M:PowerLanguage.PublicFunctions.CComparer`1.Compare(`0,`0)">
      <exclude />
    </member>
    <member name="T:PowerLanguage.PublicFunctions.CDoubleComparer">
      <exclude />
    </member>
    <member name="M:PowerLanguage.PublicFunctions.CDoubleComparer.Compare(System.Double,System.Double)">
      <exclude />
    </member>
    <member name="T:PowerLanguage.PublicFunctions.CDoubleComparerRev">
      <exclude />
    </member>
    <member name="M:PowerLanguage.PublicFunctions.CDoubleComparerRev.Compare(System.Double,System.Double)">
      <exclude />
    </member>
    <member name="T:PowerLanguage.PublicFunctions.CComparerReverse`1">
      <exclude />
    </member>
    <member name="M:PowerLanguage.PublicFunctions.CComparerReverse`1.Compare(`0,`0)">
      <exclude />
    </member>
    <member name="T:PowerLanguage.VolumeProfile.IProfilesCollectionService">
      <exclude />
    </member>
    <member name="M:PowerLanguage.VolumeProfile.IProfilesCollectionService.Syncronize">
      <exclude />
    </member>
    <member name="E:PowerLanguage.VolumeProfile.IProfilesCollectionService.ENeedSync">
      <exclude />
    </member>
    <member name="T:PowerLanguage.InputAttribute">
      <summary>
             Class that contains information about the input attribute.
            </summary>
    </member>
    <member name="M:PowerLanguage.InputAttribute.#ctor(System.String[])">
      <summary>
            Initializes a new instance of the InputAttribute class with list of values.
            </summary>
      <param name="_enumeration">
      </param>
    </member>
    <member name="M:PowerLanguage.InputAttribute.#ctor">
      <summary>
             Initializes a new instance of the InputAttribute class.
            </summary>
    </member>
    <member name="F:PowerLanguage.InputAttribute.m_enumeration">
      <exclude />
    </member>
    <member name="T:PowerLanguage.IBoolValueAttribute">
      <exclude />
    </member>
    <member name="P:PowerLanguage.IBoolValueAttribute.Value">
      <exclude />
    </member>
    <member name="T:PowerLanguage.RecoverDrawingsAttribute">
      <summary>
             The class that defines RecoverDrawingsAttribute.
            </summary>
    </member>
    <member name="M:PowerLanguage.RecoverDrawingsAttribute.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the RecoverDrawingsAttribute class.
            </summary>
      <param name="value">RecoverDrawingsAttribute value.</param>
    </member>
    <member name="M:PowerLanguage.RecoverDrawingsAttribute.#ctor">
      <summary>
            Initializes a new instance of the RecoverDrawingsAttribute class.
            </summary>
    </member>
    <member name="P:PowerLanguage.RecoverDrawingsAttribute.Value">
      <summary>
            Read-write property. RecoverDrawingsAttribute value.
            </summary>
    </member>
    <member name="T:PowerLanguage.MouseEventsAttribute">
      <summary>
             The class that defines MouseEventsAttribute.
            </summary>
    </member>
    <member name="M:PowerLanguage.MouseEventsAttribute.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the MouseEventsAttribute class.
            </summary>
      <param name="value">MouseEventsAttribute value.</param>
    </member>
    <member name="M:PowerLanguage.MouseEventsAttribute.#ctor">
      <summary>
            Initializes a new instance of the MouseEventsAttribute class.
            </summary>
    </member>
    <member name="P:PowerLanguage.MouseEventsAttribute.Value">
      <summary>
            Read-write property. MouseEventsAttribute value.
            </summary>
    </member>
    <member name="T:PowerLanguage.SameAsSymbolAttribute">
      <summary>
            Setting that defines whether the indicator is marked "Same As Symbol" or not.
            </summary>
    </member>
    <member name="M:PowerLanguage.SameAsSymbolAttribute.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the SameAsSymbolAttribute class.
            </summary>
      <param name="value">SameAsSymbolAttribute value.</param>
    </member>
    <member name="M:PowerLanguage.SameAsSymbolAttribute.#ctor">
      <summary>
            Initializes a new instance of the SameAsSymbolAttribute class.
            </summary>
    </member>
    <member name="P:PowerLanguage.SameAsSymbolAttribute.Value">
      <summary>
            Read-write property. SameAsSymbolAttribute value.
            </summary>
    </member>
    <member name="T:PowerLanguage.UpdateOnEveryTickAttribute">
      <summary>
            The class that defines UpdateOnEveryTickAttribute.
            </summary>
    </member>
    <member name="M:PowerLanguage.UpdateOnEveryTickAttribute.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the UpdateOnEveryTickAttribute class.
            </summary>
      <param name="value">UpdateOnEveryTickAttribute value.</param>
    </member>
    <member name="M:PowerLanguage.UpdateOnEveryTickAttribute.#ctor">
      <summary>
            Initializes a new instance of the UpdateOnEveryTickAttribute class.
            </summary>
    </member>
    <member name="P:PowerLanguage.UpdateOnEveryTickAttribute.Value">
      <summary>
            Read-write property. UpdateOnEveryTickAttribute value.
            </summary>
    </member>
    <member name="T:PowerLanguage.SkipIdenticalTicksAttribute">
      <summary>
            The class that defines SkipIdenticalTicksAttribute.
            </summary>
    </member>
    <member name="M:PowerLanguage.SkipIdenticalTicksAttribute.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the SkipIdenticalTicksAttribute class.
            </summary>
      <param name="value">SkipIdenticalTicksAttribute value.</param>
    </member>
    <member name="M:PowerLanguage.SkipIdenticalTicksAttribute.#ctor">
      <summary>
            Initializes a new instance of the SkipIdenticalTicksAttribute class.
            </summary>
    </member>
    <member name="P:PowerLanguage.SkipIdenticalTicksAttribute.Value">
      <summary>
            Read-write property. SkipIdenticalTicksAttribute value.
            </summary>
    </member>
    <member name="T:PowerLanguage.CalcAtOpenNextBarAttribute">
      <summary>
            The class that defines CalcOnNextBarOpenAttribute.
            </summary>
    </member>
    <member name="M:PowerLanguage.CalcAtOpenNextBarAttribute.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the CalcOnNextBarOpenAttribute class.
            </summary>
      <param name="value">SkipIdenticalTicksAttribute value.</param>
    </member>
    <member name="M:PowerLanguage.CalcAtOpenNextBarAttribute.#ctor">
      <summary>
            Initializes a new instance of the CalcOnNextBarOpenAttribute class.
            </summary>
    </member>
    <member name="P:PowerLanguage.CalcAtOpenNextBarAttribute.Value">
      <summary>
            Read-write property. SkipIdenticalTicksAttribute value.
            </summary>
    </member>
    <member name="T:PowerLanguage.IOGModeAttribute">
      <summary>
            The class that defines IOGModeAttribute.
            </summary>
    </member>
    <member name="M:PowerLanguage.IOGModeAttribute.#ctor(PowerLanguage.IOGMode)">
      <summary>
            Initializes a new instance of the IOGModeAttribute class.
            </summary>
      <param name="value">IOGModeAttribute value.</param>
    </member>
    <member name="M:PowerLanguage.IOGModeAttribute.#ctor">
      <summary>
            Initializes a new instance of the IOGModeAttribute class.
            </summary>
    </member>
    <member name="P:PowerLanguage.IOGModeAttribute.Value">
      <summary>
            Read-write property. IOGModeAttribute value.
            </summary>
    </member>
    <member name="T:PowerLanguage.ExitFromOneEntryOnceAttribute">
      <summary>
            The class that defines ExitFromOneEntryOnceAttribute.
            </summary>
    </member>
    <member name="M:PowerLanguage.ExitFromOneEntryOnceAttribute.#ctor(PowerLanguage.ExitFromOneEntryOnce)">
      <summary>
            Initializes a new instance of the ExitFromOneEntryOnceAttribute class.
            </summary>
      <param name="value">ExitFromOneEntryOnceAttribute value.</param>
    </member>
    <member name="M:PowerLanguage.ExitFromOneEntryOnceAttribute.#ctor">
      <summary>
            Initializes a new instance of the ExitFromOneEntryOnceAttribute class.
            </summary>
    </member>
    <member name="P:PowerLanguage.ExitFromOneEntryOnceAttribute.Value">
      <summary>
            Read-write property. ExitFromOneEntryOnceAttribute value.
            </summary>
    </member>
    <member name="T:PowerLanguage.Extensions">
      <exclude />
    </member>
    <member name="M:PowerLanguage.Extensions.IsOneTick(PowerLanguage.Resolution)">
      <summary>
            Return true if resolution is 1 tick.
            </summary>
      <param name="_this">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:PowerLanguage.Extensions.IsTimeBased(PowerLanguage.Resolution)">
      <summary>
            Return true if resolution is time-based i.e. seconds, minutes, hours etc.
            </summary>
      <param name="_this">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:PowerLanguage.Extensions.IsDayOrHigher(PowerLanguage.Resolution)">
      <summary>
            Return true if resolution is day or higher (week, month, quarter, year)
            </summary>
      <param name="_this">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:PowerLanguage.Extensions.Duration(PowerLanguage.Resolution)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.Extensions.StartOfSession(PowerLanguage.SessionObject,System.DateTime)">
      <summary>
            Returns DateTime begin of session (sess) that is nearest to specified DateTime (_dt) in the past.
            </summary>
      <param name="_sess">
      </param>
      <param name="_dt">
      </param>
      <returns>
      </returns>
      <exception cref="T:System.ApplicationException">
      </exception>
    </member>
    <member name="M:PowerLanguage.Extensions.EndOfSession(PowerLanguage.SessionObject,System.DateTime)">
      <summary>
            Returns DateTime end of session (sess) that is nearest to specified DateTime (_dt) in the future.
            </summary>
      <param name="_sess">
      </param>
      <param name="_dt">
      </param>
      <returns>
      </returns>
      <exception cref="T:System.ApplicationException">
      </exception>
    </member>
    <member name="M:PowerLanguage.Extensions.SessionForDate(PowerLanguage.IROList{PowerLanguage.SessionObject},System.DateTime)">
      <summary>
            Find session object for specified DateTime (_dt)
            </summary>
      <param name="_this">
      </param>
      <param name="_dt">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:PowerLanguage.Extensions.IndexOfSessionForDate(PowerLanguage.IROList{PowerLanguage.SessionObject},System.DateTime)">
      <summary>
            Find index of session object for specified DateTime (_dt) in the sessions list
            </summary>
      <param name="_this">
      </param>
      <param name="_dt">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:PowerLanguage.Extensions.EndOffsetToPast(PowerLanguage.SessionObject,System.DateTime)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.Extensions.BeginOffsetToPast(PowerLanguage.SessionObject,System.DateTime)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.Extensions.Last(PowerLanguage.IDrawSymbolBars)">
      <summary>
            Returns last bar
            </summary>
      <param name="_this">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:PowerLanguage.Extensions.Gradient(System.Drawing.Color,System.Single,System.Single)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.Extensions.Invert(System.Drawing.Color)">
      <summary>
            Returns inverted color
            </summary>
      <param name="_this">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:PowerLanguage.Extensions.Min(System.DateTime,System.DateTime)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.Extensions.Max(System.DateTime,System.DateTime)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.Extensions.Length(PowerLanguage.Pair{System.DateTime,System.DateTime})">
      <exclude />
    </member>
    <member name="M:PowerLanguage.Extensions.IsEqual(PowerLanguage.PriceCtx,System.Double,System.Double)">
      <summary>
            Check prices for equality. It's take to consideration PriceScale and MinMove
            </summary>
      <param name="_this">
      </param>
      <param name="_1">
      </param>
      <param name="_2">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:PowerLanguage.Extensions.CompareTo(PowerLanguage.PriceCtx,System.Double,System.Double)">
      <summary>
            Compare prices. It's take to consideration PriceScale and MinMove.
            </summary>
      <param name="_this">
      </param>
      <param name="_1">
      </param>
      <param name="_2">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:PowerLanguage.PriceCtx">
      <summary>
            Utility class for prices.
            </summary>
    </member>
    <!-- Badly formed XML comment ignored for member "M:PowerLanguage.PriceCtx.#ctor(System.Double,System.Int32)" -->
    <member name="M:PowerLanguage.PriceCtx.#ctor(PowerLanguage.IInstrumentSettings)">
      <summary>
            Construct PriceCtx from instrument settings
            </summary>
      <param name="_settings">
      </param>
    </member>
    <member name="M:PowerLanguage.PriceCtx.#ctor(PowerLanguage.PriceCtx,System.Int32)">
      <summary>
            Construct PriceCtx from existing one and specify multiplier for MinMove.
            </summary>
      <param name="ctx">
      </param>
      <param name="multiplier">
      </param>
    </member>
    <member name="M:PowerLanguage.PriceCtx.ToString(System.Double)">
      <summary>
            Convert price to string 
            </summary>
      <param name="_price">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:PowerLanguage.PriceCtx.PriceScale">
      <summary>
            price scale
            </summary>
    </member>
    <member name="P:PowerLanguage.PriceCtx.MinMove">
      <summary>
            Minimum price movement
            </summary>
    </member>
    <member name="T:PowerLanguage.Price">
      <summary>
      </summary>
    </member>
    <member name="M:PowerLanguage.Price.op_Explicit(PowerLanguage.Price)~System.Int64">
      <summary>
      </summary>
      <param name="_p">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:PowerLanguage.Price.op_Explicit(PowerLanguage.Price)~System.Double">
      <summary>
      </summary>
      <param name="_p">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:PowerLanguage.Price.op_LessThan(PowerLanguage.Price,PowerLanguage.Price)">
      <summary>
      </summary>
      <param name="_p1">
      </param>
      <param name="_p2">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:PowerLanguage.Price.op_LessThanOrEqual(PowerLanguage.Price,PowerLanguage.Price)">
      <summary>
      </summary>
      <param name="_p1">
      </param>
      <param name="_p2">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:PowerLanguage.Price.op_GreaterThanOrEqual(PowerLanguage.Price,PowerLanguage.Price)">
      <summary>
      </summary>
      <param name="_p1">
      </param>
      <param name="_p2">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:PowerLanguage.Price.op_GreaterThan(PowerLanguage.Price,PowerLanguage.Price)">
      <summary>
      </summary>
      <param name="_p1">
      </param>
      <param name="_p2">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:PowerLanguage.Price.Convert(System.Double,PowerLanguage.PriceCtx)">
      <summary>
      </summary>
      <param name="_price">
      </param>
      <param name="_ctx">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:PowerLanguage.Price.Convert(System.Int64,PowerLanguage.PriceCtx)">
      <summary>
      </summary>
      <param name="_price">
      </param>
      <param name="_ctx">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:PowerLanguage.Price.#ctor(System.Double,PowerLanguage.PriceCtx)">
      <summary>
      </summary>
      <param name="mDbl">
      </param>
      <param name="_ctx">
      </param>
    </member>
    <member name="M:PowerLanguage.Price.#ctor(System.Int64,PowerLanguage.PriceCtx)">
      <summary>
      </summary>
      <param name="mInt">
      </param>
      <param name="_ctx">
      </param>
    </member>
    <member name="M:PowerLanguage.Price.op_Equality(PowerLanguage.Price,PowerLanguage.Price)">
      <summary>
      </summary>
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:PowerLanguage.Price.op_Inequality(PowerLanguage.Price,PowerLanguage.Price)">
      <summary>
      </summary>
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:PowerLanguage.Price.op_Addition(PowerLanguage.Price,System.Int32)">
      <summary>
      </summary>
      <param name="left">
      </param>
      <param name="inc">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:PowerLanguage.Price.op_Subtraction(PowerLanguage.Price,System.Int32)">
      <summary>
      </summary>
      <param name="left">
      </param>
      <param name="dec">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:PowerLanguage.Price.Dbl">
      <summary>
      </summary>
    </member>
    <member name="P:PowerLanguage.Price.Int">
      <summary>
      </summary>
    </member>
    <member name="P:PowerLanguage.Price.Empty">
      <summary>
      </summary>
    </member>
    <member name="T:PowerLanguage.Pair`2">
      <summary>
            Generic class for pair values
            </summary>
      <typeparam name="T1">
      </typeparam>
      <typeparam name="T2">
      </typeparam>
    </member>
    <member name="M:PowerLanguage.Pair`2.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
            </returns>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />. 
                            </param>
      <exception cref="T:System.NullReferenceException">The <paramref name="obj" /> parameter is null.
                            </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:PowerLanguage.Pair`2.GetHashCode">
      <summary>
            Serves as a hash function for a particular type. 
            </summary>
      <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:PowerLanguage.Pair`2.op_Equality(PowerLanguage.Pair{`0,`1},PowerLanguage.Pair{`0,`1})">
      <summary>
            Determines whether the left is equal to the right
            </summary>
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:PowerLanguage.Pair`2.op_Inequality(PowerLanguage.Pair{`0,`1},PowerLanguage.Pair{`0,`1})">
      <summary>
            Determines whether the left is not equal to the right
            </summary>
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:PowerLanguage.Pair`2.#ctor(`0,`1)">
      <summary>
            Constructor
            </summary>
      <param name="first">
      </param>
      <param name="second">
      </param>
    </member>
    <member name="M:PowerLanguage.Pair`2.#ctor">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="P:PowerLanguage.Pair`2.First">
      <summary>
            The first memeber
            </summary>
    </member>
    <member name="P:PowerLanguage.Pair`2.Second">
      <summary>
            The second member
            </summary>
    </member>
    <member name="T:PowerLanguage.Pair`1">
      <summary>
            Specialization of generic Pair class
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:PowerLanguage.Pair`1.#ctor(`0,`0)">
      <summary>
            Constructor
            </summary>
      <param name="first">
      </param>
      <param name="second">
      </param>
    </member>
    <member name="M:PowerLanguage.Pair`1.#ctor">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="T:PowerLanguage.PairExt">
      <exclude />
    </member>
    <member name="M:PowerLanguage.PairExt.Contains``1(PowerLanguage.Pair{``0},``0)">
      <summary>
            Return true if val is greate or equal item.First and less or equal item.Second
            </summary>
      <param name="item">
      </param>
      <param name="val">
      </param>
      <typeparam name="T">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:PowerLanguage.PairExt.ContainsLeftOpened``1(PowerLanguage.Pair{``0},``0)">
      <summary>
            Return true if val is greate item.First and less or equal item.Second
            </summary>
      <param name="item">
      </param>
      <param name="val">
      </param>
      <typeparam name="T">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="T:PowerLanguage.IStatusLine">
      <summary>
             Interface for an information reflected in Status Line.
            </summary>
    </member>
    <member name="P:PowerLanguage.IStatusLine.Time">
      <summary>
             Read-only property. Returns current time.
            </summary>
    </member>
    <member name="P:PowerLanguage.IStatusLine.High">
      <summary>
             Read-only property. Returns daily High.
            </summary>
    </member>
    <member name="P:PowerLanguage.IStatusLine.Low">
      <summary>
             Read-only property. Returns daily Low.
            </summary>
    </member>
    <member name="P:PowerLanguage.IStatusLine.Open">
      <summary>
             Read-only property. Returns daily Open.
            </summary>
    </member>
    <member name="P:PowerLanguage.IStatusLine.Close">
      <summary>
             Read-only property. Returns daily Close.
            </summary>
    </member>
    <member name="P:PowerLanguage.IStatusLine.PrevClose">
      <summary>
             Read-only property. Returns previous day’s Close.
            </summary>
    </member>
    <member name="P:PowerLanguage.IStatusLine.Ask">
      <summary>
             Read-only property. Returns current Ask.
            </summary>
    </member>
    <member name="P:PowerLanguage.IStatusLine.Bid">
      <summary>
             Read-only property. Returns current Bid.
            </summary>
    </member>
    <member name="P:PowerLanguage.IStatusLine.Last">
      <summary>
             Read-only property. Returns Last.
            </summary>
    </member>
    <member name="P:PowerLanguage.IStatusLine.TotalVolume">
      <summary>
             Read-only property. Returns Total Volume.
            </summary>
    </member>
    <member name="P:PowerLanguage.IStatusLine.OpenInt">
      <summary>
             Read-only property.  Returns Open Interest.
            </summary>
    </member>
    <member name="P:PowerLanguage.IStatusLine.DailyVolume">
      <summary>
             Read-only property. Returns daily Volume.
            </summary>
    </member>
    <member name="T:PowerLanguage.EApplicationCode">
      <summary>
             The code of the application that executes the study.
             <seealso cref="P:PowerLanguage.IApplicationInfo.ApplicationCode" /></summary>
    </member>
    <member name="F:PowerLanguage.EApplicationCode.Unknown">
      <summary>
             Unknown application code.
            </summary>
    </member>
    <member name="F:PowerLanguage.EApplicationCode.Charting">
      <summary>
             'Charting' application code.
            </summary>
    </member>
    <member name="F:PowerLanguage.EApplicationCode.Scanner">
      <summary>
             'Scanner' application code.
            </summary>
    </member>
    <member name="F:PowerLanguage.EApplicationCode.Portfolio">
      <summary>
             'Portfolio' application code.
            </summary>
    </member>
    <member name="T:PowerLanguage.CalculationReason">
      <summary>
            Enumeration that describes the reason for the calculation (i.e. calculation was triggered by a new bar/tick or initialized after left-click on the chart).
            <seealso cref="P:PowerLanguage.IApplicationInfo.CalcReason" /></summary>
    </member>
    <member name="F:PowerLanguage.CalculationReason.Default">
      <summary>
            Calculation is to be initialized when the new bar/tick appeared.
            </summary>
    </member>
    <member name="F:PowerLanguage.CalculationReason.LeftMouseClick">
      <summary>
            Calculation is to be initialized after left-click on the chart.
            </summary>
    </member>
    <member name="F:PowerLanguage.CalculationReason.RightMouseClick">
      <summary>
            Calculation is to be initialized after right-click on the chart.
            </summary>
    </member>
    <member name="F:PowerLanguage.CalculationReason.Timer">
      <summary>
            Calculation is to be initialized after expiration of <see cref="M:PowerLanguage.ICalculationControl.RecalcLastBarAfter(System.TimeSpan)" /> timeout.
            </summary>
    </member>
    <member name="F:PowerLanguage.CalculationReason.MarketPositionChange">
      <summary>
            Calculation is to be initialized after market position for the instrument has been changed. For <see cref="!:PowerLanguage.Strategy.SignalObject" /> only.
            </summary>
    </member>
    <member name="F:PowerLanguage.CalculationReason.OrderFilled">
      <summary>
            Calculation is to be initialized after order filled event. For <see cref="!:PowerLanguage.Strategy.SignalObject" /> only.
            </summary>
    </member>
    <member name="T:PowerLanguage.IApplicationInfo">
      <summary>
             Environment access interface.
            </summary>
    </member>
    <member name="P:PowerLanguage.IApplicationInfo.BarSpacing">
      <summary>
             Read-only property. Returns a distance between bars in pixels.
            </summary>
    </member>
    <member name="P:PowerLanguage.IApplicationInfo.ChartShiftBars">
      <summary>
             Read-only property. 
             Returns a distance from the last bar to the right border 
             of the chart’s screen area, measured in bars.
            </summary>
    </member>
    <member name="P:PowerLanguage.IApplicationInfo.ChartShiftPcnt">
      <summary>
             Read-only property. 
             Returns a distance from the last bar to the right border 
             of the chart’s screen area, measured in percent.
            </summary>
    </member>
    <member name="P:PowerLanguage.IApplicationInfo.HighestScaleValue">
      <summary>
             Read-only property. 
             Returns the highest bar price on the visible part of the chart.
            </summary>
    </member>
    <member name="P:PowerLanguage.IApplicationInfo.LowestScaleValue">
      <summary>
             Read-only property.  
             Returns the lowest bar price on the visible part of the chart.
            </summary>
    </member>
    <member name="P:PowerLanguage.IApplicationInfo.LeftScreenTime">
      <summary>
             Read-only property.  
             Returns the first bar’s time on the visible part of the chart.
            </summary>
    </member>
    <member name="P:PowerLanguage.IApplicationInfo.RightScreenTime">
      <summary>
             Read-only property. 
             Returns the last bar’s time on the visible part of the chart.
            </summary>
    </member>
    <member name="P:PowerLanguage.IApplicationInfo.Optimizing">
      <summary>
             Read-only property. Indicates if optimization is running.
            </summary>
    </member>
    <member name="P:PowerLanguage.IApplicationInfo.IOGEnabled">
      <summary>
             Read-only property. Indicates if Intrabar Order Generation (IOG) mode is on.
            </summary>
    </member>
    <member name="P:PowerLanguage.IApplicationInfo.IsRealTimeCalc">
      <summary>
             Read-only property. Indicates if there‘s an ongoing real-time calculation.
            </summary>
    </member>
    <member name="P:PowerLanguage.IApplicationInfo.IsAutoTradingMode">
      <summary>
             Read-only property.  Indicates if auto-trading is on.
            </summary>
    </member>
    <member name="P:PowerLanguage.IApplicationInfo.OrderConfirmationRequired">
      <summary>
             Read-only property. 
             Indicates if auto-trading is on with order confirmation.
            </summary>
    </member>
    <member name="P:PowerLanguage.IApplicationInfo.UserID">
      <summary>
             Read-only property. Returns the UserID of a user (can be seen in MC-&gt;Help-&gt;About).
            </summary>
    </member>
    <member name="P:PowerLanguage.IApplicationInfo.BGColor">
      <summary>
             Read-only property. Returns the Background Color of the chart.
            </summary>
    </member>
    <member name="P:PowerLanguage.IApplicationInfo.ApplicationCode">
      <summary>
             Read-only property. Returns the code of the application that executed the study.
            </summary>
    </member>
    <member name="P:PowerLanguage.IApplicationInfo.UserName">
      <summary>
             Read-only property. Returns the MultiCharts user's authorization login, i.e. the license name provided after purchase.
            </summary>
    </member>
    <member name="P:PowerLanguage.IApplicationInfo.ChartWindowHWND">
      <summary>
            Read-only property. Returns HWND of window where study was applied.
            </summary>
    </member>
    <member name="P:PowerLanguage.IApplicationInfo.ScannerRow">
      <summary>
            Read-only property. Identifies the symbol's row number in Scanner; returns a positive non-zero value from a Scanner application else returns 0.
            </summary>
    </member>
    <member name="P:PowerLanguage.IApplicationInfo.CalcReason">
      <summary>
            Read-only property. Returns the reason for the calculation. <see cref="T:PowerLanguage.CalculationReason" />.
            </summary>
    </member>
    <member name="T:PowerLanguage.DrawingAbstract">
      <exclude />
    </member>
    <member name="T:PowerLanguage.IDrawObject">
      <summary>
             A base interface for accessing drawing objects.
            </summary>
    </member>
    <member name="M:PowerLanguage.IDrawObject.Delete">
      <summary>
             Delete current drawing object.
            </summary>
      <returns>Returns an indication whether the drawing object was deleted.</returns>
    </member>
    <member name="P:PowerLanguage.IDrawObject.ID">
      <summary>
             Read-only property. Returns drawing ID.
            </summary>
    </member>
    <member name="P:PowerLanguage.IDrawObject.Exist">
      <summary>
             Read-only property. Returns an indication whether the drawing exists.
            </summary>
    </member>
    <member name="P:PowerLanguage.IDrawObject.Locked">
      <summary>
            Lock drawing on the chart. Lock for drawings prevents it from unnecessary user changes.
            </summary>
    </member>
    <member name="T:PowerLanguage.TextObject">
      <exclude />
    </member>
    <member name="T:PowerLanguage.ITextObject">
      <summary>
             An interface for accessing Text Drawings.
            </summary>
    </member>
    <member name="M:PowerLanguage.ITextObject.HaveFont(System.Drawing.FontStyle)">
      <summary>
             A method for requesting drawing’s font style.
            </summary>
      <param name="style">The requested drawing’s font style.</param>
      <returns>Indicates whether there is a requested font style in the text object.</returns>
    </member>
    <member name="M:PowerLanguage.ITextObject.SetFont(System.Drawing.FontStyle,System.Boolean)">
      <summary>
             A method for setting drawing’s font style.
            </summary>
      <param name="style">Text object font style.</param>
      <param name="val">Drawing’s font style value.</param>
    </member>
    <member name="P:PowerLanguage.ITextObject.Color">
      <summary>
             Text Drawing color get/set property.
            </summary>
    </member>
    <member name="P:PowerLanguage.ITextObject.BGColor">
      <summary>
             Background Color get/set property.
            </summary>
    </member>
    <member name="P:PowerLanguage.ITextObject.Location">
      <summary>
             Text Drawing current placement (date, time, and price) get/set property.
            </summary>
    </member>
    <member name="P:PowerLanguage.ITextObject.HStyle">
      <summary>
             Text Drawing horizontal text style get/set property.
             Right = 0,
             Left = 1,
             Center = 2
            </summary>
    </member>
    <member name="P:PowerLanguage.ITextObject.VStyle">
      <summary>
             Text Drawing vertical text style get/set property.
             Below = 0,
             Above = 1,
             Center = 2
            </summary>
    </member>
    <member name="P:PowerLanguage.ITextObject.Border">
      <summary>
             Text Drawing border get/set property.
            </summary>
    </member>
    <member name="P:PowerLanguage.ITextObject.Size">
      <summary>
             Text Drawing size get/set property.
            </summary>
    </member>
    <member name="P:PowerLanguage.ITextObject.FontName">
      <summary>
             Font name get/set property.
            </summary>
    </member>
    <member name="P:PowerLanguage.ITextObject.Text">
      <summary>
             Drawing’s text get/set property.
            </summary>
    </member>
    <member name="M:PowerLanguage.TextObject.#ctor(System.Int32)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.TextObject.Equals(PowerLanguage.ITextObject)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.TextObject.HaveFont(System.Drawing.FontStyle)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.TextObject.SetFont(System.Drawing.FontStyle,System.Boolean)">
      <exclude />
    </member>
    <member name="P:PowerLanguage.TextObject.Color">
      <exclude />
    </member>
    <member name="P:PowerLanguage.TextObject.BGColor">
      <exclude />
    </member>
    <member name="P:PowerLanguage.TextObject.Location">
      <exclude />
    </member>
    <member name="P:PowerLanguage.TextObject.HStyle">
      <exclude />
    </member>
    <member name="P:PowerLanguage.TextObject.VStyle">
      <exclude />
    </member>
    <member name="P:PowerLanguage.TextObject.Border">
      <exclude />
    </member>
    <member name="P:PowerLanguage.TextObject.Size">
      <exclude />
    </member>
    <member name="P:PowerLanguage.TextObject.FontName">
      <exclude />
    </member>
    <member name="P:PowerLanguage.TextObject.Text">
      <exclude />
    </member>
    <member name="T:PowerLanguage.TrendLine">
      <exclude />
    </member>
    <member name="T:PowerLanguage.ITrendLineObject">
      <summary>
             TrendLine Drawing access interface.
            </summary>
    </member>
    <member name="M:PowerLanguage.ITrendLineObject.PriceValue(System.DateTime)">
      <summary>
             A function returning price value by DateTime.
            </summary>
      <param name="dateTime">DateTime value for requested price value.</param>
      <returns>Price value for specified DateTime.</returns>
    </member>
    <member name="P:PowerLanguage.ITrendLineObject.Begin">
      <summary>
             Get/set property for '_start' coordinate of TrendLine.
            </summary>
    </member>
    <member name="P:PowerLanguage.ITrendLineObject.End">
      <summary>
             Get/set property for '_end' coordinate of TrendLine.
            </summary>
    </member>
    <member name="P:PowerLanguage.ITrendLineObject.Color">
      <summary>
             Get/set property for TrendLine color.
            </summary>
    </member>
    <member name="P:PowerLanguage.ITrendLineObject.Style">
      <summary>
             Get/set property for TrendLine style.
             ToolSolid   = 1,
             ToolDashed  = 2,
             ToolDotted  = 3,
             ToolDashed2 = 4,
             ToolDashed3 = 5.
            </summary>
    </member>
    <member name="P:PowerLanguage.ITrendLineObject.Alert">
      <summary>
             Get/set property for alert status.
             Disabled = 0,
             BreakoutIntrabar = 1,
             BreakoutOnClose = 2.
            </summary>
    </member>
    <member name="P:PowerLanguage.ITrendLineObject.Size">
      <summary>
             Get/set property for TrendLine width.
            </summary>
    </member>
    <member name="P:PowerLanguage.ITrendLineObject.ExtLeft">
      <summary>
             Get/set property for the Extended properties to the left.
            </summary>
    </member>
    <member name="P:PowerLanguage.ITrendLineObject.ExtRight">
      <summary>
             Get/set property for the Extended properties to the right.
            </summary>
    </member>
    <member name="M:PowerLanguage.TrendLine.#ctor(System.Int32)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.TrendLine.Equals(PowerLanguage.ITrendLineObject)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.TrendLine.PriceValue(System.DateTime)">
      <exclude />
    </member>
    <member name="P:PowerLanguage.TrendLine.Begin">
      <exclude />
    </member>
    <member name="P:PowerLanguage.TrendLine.End">
      <exclude />
    </member>
    <member name="P:PowerLanguage.TrendLine.Color">
      <exclude />
    </member>
    <member name="P:PowerLanguage.TrendLine.Style">
      <exclude />
    </member>
    <member name="P:PowerLanguage.TrendLine.Alert">
      <exclude />
    </member>
    <member name="P:PowerLanguage.TrendLine.Size">
      <exclude />
    </member>
    <member name="P:PowerLanguage.TrendLine.ExtLeft">
      <exclude />
    </member>
    <member name="P:PowerLanguage.TrendLine.ExtRight">
      <exclude />
    </member>
    <member name="T:PowerLanguage.Arrow">
      <exclude />
    </member>
    <member name="T:PowerLanguage.IArrowObject">
      <summary>
             Arrow Drawings access interface.
            </summary>
    </member>
    <member name="M:PowerLanguage.IArrowObject.HaveFont(System.Drawing.FontStyle)">
      <summary>
             Returns 'false' for regular font style, 'true' for any other, defined, style.
            </summary>
      <param name="style">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:PowerLanguage.IArrowObject.SetFont(System.Drawing.FontStyle,System.Boolean)">
      <summary>
             A method for setting drawing text’s font system style.
            </summary>
      <param name="style">
      </param>
      <param name="val">
      </param>
    </member>
    <member name="P:PowerLanguage.IArrowObject.Location">
      <summary>
             Drawing coordinates get/set property.
            </summary>
    </member>
    <member name="P:PowerLanguage.IArrowObject.Style">
      <summary>
             Drawing style get/set property. 
             Overall there are 14 styles available 
             (EArrowForms – enumeration from ArrowForm0 to Style13).
            </summary>
    </member>
    <member name="P:PowerLanguage.IArrowObject.Direction">
      <summary>
             A property to get drawing’s direction.
            </summary>
    </member>
    <member name="P:PowerLanguage.IArrowObject.Size">
      <summary>
             A property to get/set drawing’s size.
            </summary>
    </member>
    <member name="P:PowerLanguage.IArrowObject.Color">
      <summary>
             A property to get/set drawing’s color.
            </summary>
    </member>
    <member name="P:PowerLanguage.IArrowObject.TextColor">
      <summary>
             A property to get/set drawing text’s color.
            </summary>
    </member>
    <member name="P:PowerLanguage.IArrowObject.TextBGColor">
      <summary>
             A property to get/set drawing’s background color.
            </summary>
    </member>
    <member name="P:PowerLanguage.IArrowObject.Text">
      <summary>
             A property to get/set drawing’s text.
            </summary>
    </member>
    <member name="P:PowerLanguage.IArrowObject.TextSize">
      <summary>
             A property to get/set drawing's text size.
            </summary>
    </member>
    <member name="P:PowerLanguage.IArrowObject.FontName">
      <summary>
             A get/set property for drawing's font name.
            </summary>
    </member>
    <member name="M:PowerLanguage.Arrow.#ctor(System.Int32)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.Arrow.Equals(PowerLanguage.IArrowObject)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.Arrow.HaveFont(System.Drawing.FontStyle)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.Arrow.SetFont(System.Drawing.FontStyle,System.Boolean)">
      <exclude />
    </member>
    <member name="P:PowerLanguage.Arrow.Location">
      <exclude />
    </member>
    <member name="P:PowerLanguage.Arrow.Style">
      <exclude />
    </member>
    <member name="P:PowerLanguage.Arrow.Direction">
      <exclude />
    </member>
    <member name="P:PowerLanguage.Arrow.Size">
      <exclude />
    </member>
    <member name="P:PowerLanguage.Arrow.Color">
      <exclude />
    </member>
    <member name="P:PowerLanguage.Arrow.TextColor">
      <exclude />
    </member>
    <member name="P:PowerLanguage.Arrow.TextBGColor">
      <exclude />
    </member>
    <member name="P:PowerLanguage.Arrow.Text">
      <exclude />
    </member>
    <member name="P:PowerLanguage.Arrow.TextSize">
      <exclude />
    </member>
    <member name="P:PowerLanguage.Arrow.FontName">
      <exclude />
    </member>
    <member name="T:PowerLanguage.DrawingsContainer`1">
      <exclude />
    </member>
    <member name="M:PowerLanguage.DrawingsContainer`1.clear_cache">
      <exclude />
    </member>
    <member name="M:PowerLanguage.DrawingsContainer`1.get_from_cache(System.Int32,PowerLanguage.DrawingsContainer{`0}.IDrawingCreator)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.DrawingsContainer`1.Dispose">
      <exclude />
    </member>
    <member name="T:PowerLanguage.DrawingsContainer`1.IDrawingCreator">
      <exclude />
    </member>
    <member name="M:PowerLanguage.DrawingsContainer`1.IDrawingCreator.Create(System.Int32)">
      <exclude />
    </member>
    <member name="T:PowerLanguage.DrawingsList`2">
      <exclude />
    </member>
    <member name="M:PowerLanguage.DrawingsList`2.GetFirst(PowerLanguage.EDrawingSource,`0@)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.DrawingsList`2.GetNext(PowerLanguage.EDrawingSource,`0,`0@)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.DrawingsList`2.GetDrwCollection(PowerLanguage.EDrawingSource)">
      <exclude />
    </member>
    <member name="T:PowerLanguage.TextCreator`1">
      <exclude />
    </member>
    <member name="T:PowerLanguage.ITextContainer">
      <summary>
             Container for ITextObject.
            </summary>
    </member>
    <member name="M:PowerLanguage.ITextContainer.Create(PowerLanguage.ChartPoint,System.String,System.Int32)">
      <summary>
             Creates a Text Drawings with point coordinates, 
             '_text' text, '_data_stream' number data stream, 
             and '_on_same_subchart' flag.
            </summary>
      <param name="point">The point on the chart at which to create a text drawing.</param>
      <param name="text">Text string.</param>
      <param name="dataStream">Data stream number. By default: 0</param>
      <returns>An instance of the interface describing text object.</returns>
    </member>
    <member name="M:PowerLanguage.ITextContainer.Create(PowerLanguage.ChartPoint,System.String,System.Boolean)">
      <summary>
             Creates a Text Drawing with point coordinates, 
             '_text' text, '_data_stream' number data stream, 
             and '_on_same_subchart' flag.
            </summary>
      <param name="point">The point on the chart at which to create a text drawing.</param>
      <param name="text">Text string.</param>
      <param name="onSameSubchart">By default: false</param>
      <returns>An instance of the interface describing text object.</returns>
    </member>
    <member name="M:PowerLanguage.ITextContainer.Create(PowerLanguage.ChartPoint,System.String)">
      <summary>
             Creates a Text Drawing with point coordinates, 
             '_text' text, '_data_stream' number data stream, 
             and '_on_same_subchart' flag.
            </summary>
      <param name="point">The point on the chart at which to create a text drawing.</param>
      <param name="text">Text string.</param>
      <returns>An instance of the interface describing text object.</returns>
    </member>
    <member name="M:PowerLanguage.ITextContainer.GetTextObjects(PowerLanguage.EDrawingSource)">
      <summary>
             A method for accessing collection’s elements using foreach.
            </summary>
      <param name="drawingSource">By default: AnyTechOrManual</param>
      <returns>
      </returns>
    </member>
    <member name="P:PowerLanguage.ITextContainer.Active">
      <summary>
             Read-only property. 
             Returns an interface to the active TextDrawing, if any; 
             otherwise returns 'nullptr'.
            </summary>
    </member>
    <member name="M:PowerLanguage.TextCreator`1.Create(PowerLanguage.ChartPoint,System.String,System.Int32)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.TextCreator`1.Create(PowerLanguage.ChartPoint,System.String,System.Boolean)">
      <exclude />
    </member>
    <member name="P:PowerLanguage.TextCreator`1.Active">
      <exclude />
    </member>
    <member name="T:PowerLanguage.TrendLineCreator`1">
      <exclude />
    </member>
    <member name="T:PowerLanguage.ITrendLineContainer">
      <summary>
             Container for ITrendLineObject collection.
            </summary>
    </member>
    <member name="M:PowerLanguage.ITrendLineContainer.Create(PowerLanguage.ChartPoint,PowerLanguage.ChartPoint,System.Int32)">
      <summary>
             Creates a TrendLine with '_start','_end'  coordinates, 
             '_data_stream' number data stream, and '_on_same_subchart' flag.
            </summary>
      <param name="start">TrendLine's start point.</param>
      <param name="end">TrendLine's end point.</param>
      <param name="dataStream">Data stream number. By default: 0</param>
      <returns>
      </returns>
    </member>
    <member name="M:PowerLanguage.ITrendLineContainer.Create(PowerLanguage.ChartPoint,PowerLanguage.ChartPoint,System.Boolean)">
      <summary>
             Creates a TrendLine with '_start','_end'  coordinates, 
             '_data_stream' number data stream, and '_on_same_subchart' flag.
            </summary>
      <param name="start">TrendLine's start point.</param>
      <param name="end">TrendLine's end point.</param>
      <param name="onSameSubchart">By default: false</param>
      <returns>An instance of the interface describing TrendLine object.</returns>
    </member>
    <member name="M:PowerLanguage.ITrendLineContainer.Create(PowerLanguage.ChartPoint,PowerLanguage.ChartPoint)">
      <summary>
             Creates a TrendLine with '_start','_end' coordinates, 
             '_data_stream' number data stream, and '_on_same_subchart' flag.
            </summary>
      <param name="start">TrendLine's start point.</param>
      <param name="end">TrendLine's end point.</param>
      <returns>An instance of the interface describing TrendLine object.</returns>
    </member>
    <member name="M:PowerLanguage.ITrendLineContainer.GetTrendLineObjects(PowerLanguage.EDrawingSource)">
      <summary>
             A method for accessing collection’s elements using foreach.
            </summary>
      <param name="drawingSource">By default: AnyTechOrManual</param>
      <returns>
      </returns>
    </member>
    <member name="P:PowerLanguage.ITrendLineContainer.Active">
      <summary>
             Read-only property. 
             Active ITrentLineDrw access interface, if any; nullptr otherwise.
            </summary>
    </member>
    <member name="M:PowerLanguage.TrendLineCreator`1.Create(PowerLanguage.ChartPoint,PowerLanguage.ChartPoint,System.Int32)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.TrendLineCreator`1.Create(PowerLanguage.ChartPoint,PowerLanguage.ChartPoint,System.Boolean)">
      <exclude />
    </member>
    <member name="P:PowerLanguage.TrendLineCreator`1.Active">
      <exclude />
    </member>
    <member name="T:PowerLanguage.ArrowCreator`1">
      <exclude />
    </member>
    <member name="T:PowerLanguage.IArrowContainer">
      <summary>
             Container for a collection of specific IArrowObject.
            </summary>
    </member>
    <member name="M:PowerLanguage.IArrowContainer.Create(PowerLanguage.ChartPoint,System.Boolean,System.Int32)">
      <summary>
             Create Arrow Drawing with '_start' coordinates, '_direction' direction,
             '_data_stream' number data stream, and '_on_same_subchart' flag. 
            </summary>
      <param name="point">The point on the chart to create an arrow.</param>
      <param name="direction">Arrow direction.</param>
      <param name="dataStream">The data stream number. By default: 0</param>
      <returns>
      </returns>
    </member>
    <member name="M:PowerLanguage.IArrowContainer.Create(PowerLanguage.ChartPoint,System.Boolean,System.Boolean)">
      <summary>
             Create Arrow Drawing with '_start' coordinates, '_direction' direction,
             '_data_stream' number data stream, and '_on_same_subchart' flag.
            </summary>
      <param name="point">The point on the chart to create an arrow.</param>
      <param name="direction">Arrow direction.</param>
      <param name="onSameSubchart">By default: false.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PowerLanguage.IArrowContainer.Create(PowerLanguage.ChartPoint,System.Boolean)">
      <summary>
             Create Arrow Drawing with '_start' coordinates, '_direction' direction,
             '_data_stream' number data stream, and '_on_same_subchart' flag.
            </summary>
      <param name="point">The point on the chart to create an arrow.</param>
      <param name="direction">Arrow direction.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PowerLanguage.IArrowContainer.GetArrowObjects(PowerLanguage.EDrawingSource)">
      <summary>
             A method for accessing collection’s elements using foreach.
            </summary>
      <param name="drawingSource">By default: AnyTechOrManual</param>
      <returns>
      </returns>
    </member>
    <member name="P:PowerLanguage.IArrowContainer.Active">
      <summary>
             Read-only property. 
             Returns an interface to the active IArrowObject, if any; nullptr otherwise.
            </summary>
    </member>
    <member name="M:PowerLanguage.ArrowCreator`1.Create(PowerLanguage.ChartPoint,System.Boolean,System.Int32)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.ArrowCreator`1.Create(PowerLanguage.ChartPoint,System.Boolean,System.Boolean)">
      <exclude />
    </member>
    <member name="P:PowerLanguage.ArrowCreator`1.Active">
      <exclude />
    </member>
    <member name="T:PowerLanguage.IOGMode">
      <summary>
            Enumeration describing IntrabarOrderGeneration (IOG) mode. 
            </summary>
    </member>
    <member name="F:PowerLanguage.IOGMode.Disabled">
      <summary>
            IOG mode is disabled.
             </summary>
    </member>
    <member name="F:PowerLanguage.IOGMode.Enabled">
      <summary>
            IOG mode is enabled.
            </summary>
    </member>
    <member name="T:PowerLanguage.ExitFromOneEntryOnce">
      <summary>
            Describes mode for processing exit orders.
             </summary>
    </member>
    <member name="F:PowerLanguage.ExitFromOneEntryOnce.FillAndKillExitOrder">
      <summary>
            Any one exit order can be applied an unlimited number of times to one entry. After this exit filled it cannot be applied again until the script recalculates and generates again.
             </summary>
    </member>
    <member name="F:PowerLanguage.ExitFromOneEntryOnce.StandardCalculation">
      <summary>
            Default. Any one exit order cannot be applied to one entry more than once. Exit order that was filled can be generated again and applied to a different entry.
             </summary>
    </member>
    <member name="T:PowerLanguage.EOrderAction">
      <summary>
             Enumeration describing order action. 
            </summary>
    </member>
    <member name="F:PowerLanguage.EOrderAction.Buy">
      <summary>
             Buy order action (closes current short position AND buys indicated amount of contracts).
            </summary>
    </member>
    <member name="F:PowerLanguage.EOrderAction.Sell">
      <summary>
             Sell order action (sells indicated amount of contracts).
            </summary>
    </member>
    <member name="F:PowerLanguage.EOrderAction.SellShort">
      <summary>
             Sell short order action (closes current long position AND sells indicated amount of contracts).
            </summary>
    </member>
    <member name="F:PowerLanguage.EOrderAction.BuyToCover">
      <summary>
             Buy to cover order action (buys indicated number of contracts).
            </summary>
    </member>
    <member name="T:PowerLanguage.OrderCategory">
      <summary>
             Enumeration describing order category.
            </summary>
    </member>
    <member name="F:PowerLanguage.OrderCategory.Market">
      <summary>
             Market order category.
            </summary>
    </member>
    <member name="F:PowerLanguage.OrderCategory.Limit">
      <summary>
             Limit order category.
            </summary>
    </member>
    <member name="F:PowerLanguage.OrderCategory.Stop">
      <summary>
             Stop order category.
            </summary>
    </member>
    <member name="F:PowerLanguage.OrderCategory.StopLimit">
      <summary>
             StopLimit order category.
            </summary>
    </member>
    <member name="T:PowerLanguage.ESpecOrdersMode">
      <summary>
             Enumeration describing special orders mode.
            </summary>
    </member>
    <member name="F:PowerLanguage.ESpecOrdersMode.PerContract">
      <summary>
             Per contract mode.
            </summary>
    </member>
    <member name="F:PowerLanguage.ESpecOrdersMode.PerPosition">
      <summary>
             Per position mode.
            </summary>
    </member>
    <member name="T:PowerLanguage.EMarketPositionSide">
      <summary>
             Enumeration describing market position side.
            </summary>
    </member>
    <member name="F:PowerLanguage.EMarketPositionSide.Flat">
      <summary>
             Flat position.
            </summary>
    </member>
    <member name="F:PowerLanguage.EMarketPositionSide.Long">
      <summary>
             Long position.
            </summary>
    </member>
    <member name="F:PowerLanguage.EMarketPositionSide.Short">
      <summary>
             Short position.
            </summary>
    </member>
    <member name="T:PowerLanguage.OrderExit">
      <summary>
             Class that contains information about the exit order. 
            </summary>
    </member>
    <member name="M:PowerLanguage.OrderExit.FromEntry(PowerLanguage.IOrderObject)">
      <summary>
             Read-only property. Returns instance of the OrderExit with EExitType.FromOne exit type.
            </summary>
      <param name="entry">The entry order which will be closed.</param>
      <returns>The instance of the OrderExit for closing the position, which was opened by entry order.</returns>
    </member>
    <member name="P:PowerLanguage.OrderExit.IsTotal">
      <summary>
             Read-only property. Indicates whether the exit order has the 'Total' type.
            </summary>
    </member>
    <member name="P:PowerLanguage.OrderExit.ExitType">
      <summary>
             Returns exit type.
            </summary>
    </member>
    <member name="P:PowerLanguage.OrderExit.EntryID">
      <summary>
             Returns entry order ID.
            </summary>
    </member>
    <member name="P:PowerLanguage.OrderExit.FromAll">
      <summary>
             Read-only property. Returns instance of the OrderExit with EExitType. "From All" exit type.
            </summary>
    </member>
    <member name="P:PowerLanguage.OrderExit.Total">
      <summary>
             Read-only property. Returns instance of the OrderExit with EExitType. "Total" exit type.
            </summary>
    </member>
    <member name="T:PowerLanguage.OrderExit.EExitType">
      <summary>
             Enumeration describing exit type.
            </summary>
    </member>
    <member name="F:PowerLanguage.OrderExit.EExitType.All">
      <summary>
             Close all entries.
            </summary>
    </member>
    <member name="F:PowerLanguage.OrderExit.EExitType.Total">
      <summary>
             Close as many entry orders as possible (or all), with the condition that the sum of all closed 
             contracts is not more than the specified number of contracts. 
            </summary>
    </member>
    <member name="F:PowerLanguage.OrderExit.EExitType.FromOne">
      <summary>
             Close a specific entry.
            </summary>
    </member>
    <member name="T:PowerLanguage.Contracts">
      <summary>
             Class that contains information about contracts.
            </summary>
    </member>
    <member name="F:PowerLanguage.Contracts.Contract">
      <summary>
             Number of Contracts.
            </summary>
    </member>
    <member name="F:PowerLanguage.Contracts.Type">
      <summary>
             Contracts type.
            </summary>
    </member>
    <member name="M:PowerLanguage.Contracts.CreateUserSpecified(System.Int32)">
      <summary>
             Creating the user-specified Contracts with a specified number of contracts.
            </summary>
      <param name="num">The number of contracts.</param>
      <returns>New instance of the user-specified Contracts with a specified number of contracts.</returns>
    </member>
    <member name="P:PowerLanguage.Contracts.IsUserSpecified">
      <summary>
             Read-only property. Returns an indication whether the type is specified by user.
            </summary>
    </member>
    <member name="P:PowerLanguage.Contracts.IsDefault">
      <summary>
             Read-only property. Returns an indication whether the contracts type is the default.
            </summary>
    </member>
    <member name="P:PowerLanguage.Contracts.Default">
      <summary>
             Read-only property. Returns a new instance of Contracts with default contracts type.
            </summary>
    </member>
    <member name="P:PowerLanguage.Contracts.UserSpecified">
      <summary>
             Read-only property. Returns a new instance of Contracts with user-specified contracts type.
            </summary>
    </member>
    <member name="T:PowerLanguage.Contracts.EContractsType">
      <summary>
             Enumeration describing types of contracts.
            </summary>
    </member>
    <member name="F:PowerLanguage.Contracts.EContractsType.Default">
      <summary>
             If the number of Contracts is not explicitly specified, 
             the number of contracts specified in the Strategy Properties dialog is used.
            </summary>
    </member>
    <member name="F:PowerLanguage.Contracts.EContractsType.UserSpecified">
      <summary>
             Number of Contracts is always taken from order’s Contracts property (0, by default).
            </summary>
    </member>
    <member name="T:PowerLanguage.Order">
      <summary>
             Class that contains information about the order.
            </summary>
    </member>
    <member name="M:PowerLanguage.Order.#ctor(System.String,PowerLanguage.EOrderAction,PowerLanguage.OrderCategory,PowerLanguage.Contracts,System.Boolean,PowerLanguage.OrderExit)">
      <summary>
             Initializes a new instance of Order.
            </summary>
      <param name="name">Order name.</param>
      <param name="action">Order action.</param>
      <param name="category">Order category.</param>
      <param name="lots">Order number of lots.</param>
      <param name="openNextBar">Indicates whether the order must be placed at the open of next bar.</param>
      <param name="exitInfo">Order exit information.</param>
    </member>
    <member name="M:PowerLanguage.Order.IsEntryAction(PowerLanguage.EOrderAction)">
      <summary>
             Indicates whether the specified order action is an entry.
            </summary>
      <param name="Action">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:PowerLanguage.Order.IsLongAction(PowerLanguage.EOrderAction)">
      <summary>
             Indicates whether the specified order action is long.
            </summary>
      <param name="Action">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:PowerLanguage.Order.Name">
      <summary>
             Read-only property. Order name.
            </summary>
    </member>
    <member name="P:PowerLanguage.Order.Action">
      <summary>
             Read-only property. Order Action:
             Buy,
             Sell,
             SellShort,
             BuyToCover.
            </summary>
    </member>
    <member name="P:PowerLanguage.Order.Category">
      <summary>
             Read-only property. Order category:
             Market,
             MarketRange,
             Limit,
             Stop.
            </summary>
    </member>
    <member name="P:PowerLanguage.Order.Contracts">
      <summary>
             Read-only property. Information about lot’s type and quantity.
            </summary>
    </member>
    <member name="P:PowerLanguage.Order.OnClose">
      <summary>
             Read-only property. Indicates whether the order is a closing order.
            </summary>
    </member>
    <member name="P:PowerLanguage.Order.OrderExit">
      <summary>
             Read-only property. Returns order exit information.
            </summary>
    </member>
    <member name="P:PowerLanguage.Order.IsEntry">
      <summary>
             Read-only property. Indicates whether the order is an entry order.
            </summary>
    </member>
    <member name="P:PowerLanguage.Order.IsExit">
      <summary>
             Read-only property. Indicates whether the order is an exit order.
            </summary>
    </member>
    <member name="P:PowerLanguage.Order.IsLong">
      <summary>
             Read-only property. Indicates whether the order is Long.
            </summary>
    </member>
    <member name="P:PowerLanguage.Order.IsShort">
      <summary>
             Read-only property. Indicates whether the order is Short.
            </summary>
    </member>
    <member name="T:PowerLanguage.IOrderObject">
      <summary>
             Base interface for orders.
            </summary>
    </member>
    <member name="P:PowerLanguage.IOrderObject.Info">
      <summary>
             Read-only property. Returns order information (Order).
            </summary>
    </member>
    <member name="P:PowerLanguage.IOrderObject.ID">
      <summary>
             Read-only property. Returns order ID.
            </summary>
    </member>
    <member name="T:PowerLanguage.IOrderMarket">
      <summary>
             An interface describing Market Order.
            </summary>
    </member>
    <member name="M:PowerLanguage.IOrderMarket.Send">
      <summary>
             Generation of an order.
            </summary>
    </member>
    <member name="M:PowerLanguage.IOrderMarket.Send(System.Int32)">
      <summary>
             Generation of an order with 'num_lots' number of lots.
            </summary>
      <param name="numLots">Number of lots. By default: 0</param>
    </member>
    <member name="M:PowerLanguage.IOrderMarket.Send(System.String)">
      <summary>
             Generation of an order with new order name.
            </summary>
    </member>
    <member name="M:PowerLanguage.IOrderMarket.Send(System.String,System.Int32)">
      <summary>
             Generation of an order with 'num_lots' number of lots.
            </summary>
      <param name="new_name">New order name. Will be used old name if new_name is null or empty</param>
      <param name="numLots">Number of lots. By default: 0</param>
    </member>
    <member name="T:PowerLanguage.IOrderPriced">
      <summary>
             An interface describing Price Order.
            </summary>
    </member>
    <member name="M:PowerLanguage.IOrderPriced.Send(System.Double)">
      <summary>
             Generation of Price order with 'price' price.
            </summary>
      <param name="price">Order price.</param>
    </member>
    <member name="M:PowerLanguage.IOrderPriced.Send(System.Double,System.Int32)">
      <summary>
             Generation of Price order with 'price' price 
             and 'num_lots' number of contracts.
            </summary>
      <param name="price">Order price.</param>
      <param name="numLots">Number of Lots. By default: 0</param>
    </member>
    <member name="M:PowerLanguage.IOrderPriced.Send(System.String,System.Double)">
      <summary>
             Generation of Price order with 'price' price.
            </summary>
      <param name="new_name">New order name. Will be used old name if new_name is null or empty</param>
      <param name="price">Order price.</param>
    </member>
    <member name="M:PowerLanguage.IOrderPriced.Send(System.String,System.Double,System.Int32)">
      <summary>
             Generation of Price order with 'price' price 
             and 'num_lots' number of contracts.
            </summary>
      <param name="new_name">New order name. Will be used old name if new_name is null or empty</param>
      <param name="price">Order price.</param>
      <param name="numLots">Number of Lots. By default: 0</param>
    </member>
    <member name="T:PowerLanguage.IOrderStopLimit">
      <summary>
             An interface describing StopLimit Order.
            </summary>
    </member>
    <member name="M:PowerLanguage.IOrderStopLimit.Send(System.Double,System.Double)">
      <summary>
             Generation of StopLimit order with 'stop_price' and 'limit_price' prices.
            </summary>
      <param name="stopPrice">Order stop condition price.</param>
      <param name="limitPrice">Order Limit price.</param>
    </member>
    <member name="M:PowerLanguage.IOrderStopLimit.Send(System.Double,System.Double,System.Int32)">
      <summary>
             Generation of Price order with 'stop_price' and 'limit_price' prices 
             and 'num_lots' number of contracts.
            </summary>
      <param name="stopPrice">Order stop condition price.</param>
      <param name="limitPrice">Order Limit price.</param>
      <param name="numLots">Number of Lots. By default: 0</param>
    </member>
    <member name="M:PowerLanguage.IOrderStopLimit.Send(System.String,System.Double,System.Double)">
      <summary>
             Generation of StopLimit order with 'stop_price' and 'limit_price' prices.
            </summary>
      <param name="new_name">New order name. Will be used old name if new_name is null or empty</param>
      <param name="stopPrice">Order stop condition price.</param>
      <param name="limitPrice">Order Limit price.</param>
    </member>
    <member name="M:PowerLanguage.IOrderStopLimit.Send(System.String,System.Double,System.Double,System.Int32)">
      <summary>
             Generation of Price order with 'stop_price' and 'limit_price' prices 
             and 'num_lots' number of contracts.
            </summary>
      <param name="new_name">New order name. Will be used old name if new_name is null or empty</param>
      <param name="stopPrice">Order stop condition price.</param>
      <param name="limitPrice">Order Limit price.</param>
      <param name="numLots">Number of Lots. By default: 0</param>
    </member>
    <member name="T:PowerLanguage.SOrderParameters">
      <summary>
             A structure containing information for order creation.
            </summary>
    </member>
    <member name="F:PowerLanguage.SOrderParameters.Lots">
      <summary>
             Contracts quantity and type.
            </summary>
    </member>
    <member name="F:PowerLanguage.SOrderParameters.Name">
      <summary>
             Order name.
            </summary>
    </member>
    <member name="F:PowerLanguage.SOrderParameters.Action">
      <summary>
             Order Action:
             Buy,
             Sell,
             SellShort,
             BuyToCover.
            </summary>
    </member>
    <member name="F:PowerLanguage.SOrderParameters.ExitTypeInfo">
      <summary>
             Order exit information.
            </summary>
    </member>
    <member name="M:PowerLanguage.SOrderParameters.#ctor(PowerLanguage.Contracts,System.String,PowerLanguage.EOrderAction,PowerLanguage.OrderExit)">
      <summary>
             Initializes a new instance of the SessionObject.
            </summary>
      <param name="lots">Number of lots.</param>
      <param name="name">Order name.</param>
      <param name="action">Order action.</param>
      <param name="exitInfo">Order exit info.</param>
    </member>
    <member name="M:PowerLanguage.SOrderParameters.#ctor(PowerLanguage.EOrderAction)">
      <summary>
             Initializes a new instance of the SessionObject.
            </summary>
      <param name="action">Order action.</param>
    </member>
    <member name="M:PowerLanguage.SOrderParameters.#ctor(PowerLanguage.EOrderAction,System.String)">
      <summary>
             Initializes a new instance of the SessionObject.
            </summary>
      <param name="action">Order action.</param>
      <param name="name">Order name.</param>
    </member>
    <member name="M:PowerLanguage.SOrderParameters.#ctor(PowerLanguage.Contracts,System.String,PowerLanguage.EOrderAction)">
      <summary>
             Initializes a new instance of the SessionObject.
            </summary>
      <param name="lots">Number of lots.</param>
      <param name="name">Order name.</param>
      <param name="action">Order action.</param>
    </member>
    <member name="M:PowerLanguage.SOrderParameters.#ctor(PowerLanguage.Contracts,PowerLanguage.EOrderAction)">
      <summary>
             Initializes a new instance of the SessionObject.
            </summary>
      <param name="lots">Number of lots.</param>
      <param name="action">Order action.</param>
    </member>
    <member name="M:PowerLanguage.SOrderParameters.#ctor(PowerLanguage.Contracts,PowerLanguage.EOrderAction,PowerLanguage.OrderExit)">
      <summary>
             Initializes a new instance of the SessionObject.
            </summary>
      <param name="lots">Number of lots.</param>
      <param name="action">Order action.</param>
      <param name="exitInfo">Order exit info.</param>
    </member>
    <member name="T:PowerLanguage.IOrderCreator">
      <summary>
             An interface for order creation.
            </summary>
    </member>
    <member name="M:PowerLanguage.IOrderCreator.MarketNextBar(PowerLanguage.SOrderParameters)">
      <summary>
             Function for market order creation on the next bar.
            </summary>
      <param name="orderParams">Parameters for creating market order.</param>
      <returns>An instance of the interface describing market order.</returns>
    </member>
    <member name="M:PowerLanguage.IOrderCreator.MarketThisBar(PowerLanguage.SOrderParameters)">
      <summary>
             Function for market order creation on the current bar.
            </summary>
      <param name="orderParams">Parameters for creating market order.</param>
      <returns>An instance of the interface describing market order.</returns>
    </member>
    <member name="M:PowerLanguage.IOrderCreator.Stop(PowerLanguage.SOrderParameters)">
      <summary>
             Function for Stop-order creation.
            </summary>
      <param name="orderParams">Parameters for creating stop order.</param>
      <returns>An instance of the interface describing stop order.</returns>
    </member>
    <member name="M:PowerLanguage.IOrderCreator.Limit(PowerLanguage.SOrderParameters)">
      <summary>
             Function for Limit-order creation.
            </summary>
      <param name="orderParams">Parameters for creating limit order.</param>
      <returns>An instance of the interface describing limit order.</returns>
    </member>
    <member name="M:PowerLanguage.IOrderCreator.StopLimit(PowerLanguage.SOrderParameters)">
      <summary>
             Function for StopLimit-order creation.
            </summary>
      <param name="orderParams">Parameters for creating stop-limit order.</param>
      <returns>An instance of the interface describing stop-limit order.</returns>
    </member>
    <member name="T:PowerLanguage.ITradeOrder">
      <summary>
             An entry-point interface to information on trade’s orders (access to entry and exit of the trade).
            </summary>
    </member>
    <member name="P:PowerLanguage.ITradeOrder.Price">
      <summary>
             Read-only property. Order execution price.
            </summary>
    </member>
    <member name="P:PowerLanguage.ITradeOrder.BarNumber">
      <summary>
             Read-only property. Order executions bar's number.
            </summary>
    </member>
    <member name="P:PowerLanguage.ITradeOrder.Time">
      <summary>
             Read-only property. Order execution bar's time.
            </summary>
    </member>
    <member name="P:PowerLanguage.ITradeOrder.Contracts">
      <summary>
             Read-only property. Trade volume.
            </summary>
    </member>
    <member name="P:PowerLanguage.ITradeOrder.Name">
      <summary>
             Read-only property. Order name.
            </summary>
    </member>
    <member name="P:PowerLanguage.ITradeOrder.Action">
      <summary>
             Read-only property. 
             Enumerator with following values: Buy, Sell, SellShort, BuyToCover.
            </summary>
    </member>
    <member name="P:PowerLanguage.ITradeOrder.Category">
      <summary>
             Read-only property. 
             Enumerator with following values: Market, MarketRange, Limit, Stop.
            </summary>
    </member>
    <member name="T:PowerLanguage.ITrade">
      <summary>
             An interface for accessing trade’s information.
            </summary>
    </member>
    <member name="P:PowerLanguage.ITrade.EntryOrder">
      <summary>
             Read-only property. Returns trade’s entry-order.
            </summary>
    </member>
    <member name="P:PowerLanguage.ITrade.ExitOrder">
      <summary>
             Read-only property. Returns trade’s exit-order. Null, if trade is still open.
            </summary>
    </member>
    <member name="P:PowerLanguage.ITrade.CommissionValue">
      <summary>
            Read-only property. Returns trade’s commission.
            </summary>
    </member>
    <member name="P:PowerLanguage.ITrade.Profit">
      <summary>
            Read-only property. Returns trade’s profit.
            </summary>
    </member>
    <member name="P:PowerLanguage.ITrade.IsOpen">
      <summary>
             Read-only property. Indicates if trade is open.
            </summary>
    </member>
    <member name="P:PowerLanguage.ITrade.IsLong">
      <summary>
             Read-only property. Indicates if trade’s entry order is a long entry (Buy action).
            </summary>
    </member>
    <member name="T:PowerLanguage.IMarketPosition">
      <summary>
             An interface that provides information about the position.
            </summary>
    </member>
    <member name="P:PowerLanguage.IMarketPosition.Side">
      <summary>
             Read-only property. Returns position type.
             Flat,
             Long,
             Short.
            </summary>
    </member>
    <member name="P:PowerLanguage.IMarketPosition.Profit">
      <summary>
             Read-only property. Returns position profit.
            </summary>
    </member>
    <member name="P:PowerLanguage.IMarketPosition.ProfitPerContract">
      <summary>
             Read-only property. Returns profit per single contract.
            </summary>
    </member>
    <member name="P:PowerLanguage.IMarketPosition.OpenProfit">
      <summary>
             Read-only property. Returns position’s non-fixed profit.
            </summary>
    </member>
    <member name="P:PowerLanguage.IMarketPosition.MaxDrawDown">
      <summary>
             Read-only property. Returns position’s maximum potential loss (drawdown).
            </summary>
    </member>
    <member name="P:PowerLanguage.IMarketPosition.MaxRunUp">
      <summary>
             Read-only property. Returns position’s maximum potential profit.
            </summary>
    </member>
    <member name="P:PowerLanguage.IMarketPosition.OpenLots">
      <summary>
             Read-only property. Returns position’s open lots.
            </summary>
    </member>
    <member name="P:PowerLanguage.IMarketPosition.Value">
      <summary>
             Read-only property. Returns position’s value.
            </summary>
    </member>
    <member name="P:PowerLanguage.IMarketPosition.OpenTrades">
      <summary>
             Open trades for given position 
             (a collection will be empty for closed positions).
            </summary>
    </member>
    <member name="P:PowerLanguage.IMarketPosition.ClosedTrades">
      <summary>
             A collection of closed orders for given position.
            </summary>
    </member>
    <member name="T:PowerLanguage.IStrategyPerformance">
      <summary>
             An interface for accessing strategy information.
            </summary>
    </member>
    <member name="P:PowerLanguage.IStrategyPerformance.AvgEntryPrice">
      <summary>
             Read-only property. Returns average entry price.
            </summary>
    </member>
    <member name="P:PowerLanguage.IStrategyPerformance.OpenEquity">
      <summary>
             Read-only property. Returns potential profit, i.e. current Profit and Loss, aka PnL.
            </summary>
    </member>
    <member name="P:PowerLanguage.IStrategyPerformance.ClosedEquity">
      <summary>
             Read-only property. Returns fixed profit.
            </summary>
    </member>
    <member name="P:PowerLanguage.IStrategyPerformance.MarketPosition">
      <summary>
             Read-only property. Returns current Market Position for strategy on the chart.
            </summary>
    </member>
    <member name="P:PowerLanguage.IStrategyPerformance.MarketPositionAtBroker">
      <summary>
             Read-only property. Returns Market Position requested from the broker.
            </summary>
    </member>
    <member name="P:PowerLanguage.IStrategyPerformance.MarketPositionAtBrokerForTheStrategy">
      <summary>
             Read-only property. Returns Market Position requested from the broker for the current strategy.
            </summary>
    </member>
    <member name="P:PowerLanguage.IStrategyPerformance.AvgEntryPriceAtBroker">
      <summary>
             Read-only property. Returns average entry price for position that was requested from the broker.
            </summary>
    </member>
    <member name="P:PowerLanguage.IStrategyPerformance.AvgEntryPriceAtBrokerForTheStrategy">
      <summary>
             Read-only property. Returns average entry price for position requested from the broker for the current strategy.
            </summary>
    </member>
    <member name="T:PowerLanguage.OrderCreator">
      <summary> Allows order generation.
            </summary>
    </member>
    <member name="M:PowerLanguage.OrderCreator.CreateOrder(PowerLanguage.Order)">
      <exclude />
    </member>
    <member name="T:PowerLanguage.TradeOrder">
      <exclude />
    </member>
    <member name="M:PowerLanguage.TradeOrder.#ctor(System.Double,System.Int32,System.DateTime,System.Int32,System.String,PowerLanguage.EOrderAction,PowerLanguage.OrderCategory)">
      <exclude />
    </member>
    <member name="P:PowerLanguage.TradeOrder.Price">
      <exclude />
    </member>
    <member name="P:PowerLanguage.TradeOrder.BarNumber">
      <exclude />
    </member>
    <member name="P:PowerLanguage.TradeOrder.Time">
      <exclude />
    </member>
    <member name="P:PowerLanguage.TradeOrder.Contracts">
      <exclude />
    </member>
    <member name="P:PowerLanguage.TradeOrder.Name">
      <exclude />
    </member>
    <member name="P:PowerLanguage.TradeOrder.Action">
      <exclude />
    </member>
    <member name="P:PowerLanguage.TradeOrder.Category">
      <exclude />
    </member>
    <member name="T:PowerLanguage.Trade">
      <exclude />
    </member>
    <member name="M:PowerLanguage.Trade.#ctor(PowerLanguage.ITradeOrder,System.Double,System.Double)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.Trade.#ctor(PowerLanguage.ITradeOrder,PowerLanguage.ITradeOrder,System.Double,System.Double)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.Trade.#ctor(PowerLanguage.ITrade,PowerLanguage.ITradeOrder,System.Double,System.Double)">
      <exclude />
    </member>
    <member name="P:PowerLanguage.Trade.EntryOrder">
      <exclude />
    </member>
    <member name="P:PowerLanguage.Trade.ExitOrder">
      <exclude />
    </member>
    <member name="P:PowerLanguage.Trade.IsOpen">
      <exclude />
    </member>
    <member name="P:PowerLanguage.Trade.IsLong">
      <exclude />
    </member>
    <member name="T:PowerLanguage.IPortfolioPerformance">
      <summary>
             An interface providing access to portfolio performance.
            </summary>
    </member>
    <member name="M:PowerLanguage.IPortfolioPerformance.CalcMaxPotentialLossForEntry(System.Int32,System.Int32,System.Double)">
      <param name="side">Specifies the entry type (e.g. 1 Long entry or -1 Short entry).</param>
      <param name="contracts">Specifies the number of contracts.</param>
      <param name="price">Specifies the price value. This parameter may be rounded down if entered a Short position or rounded up if entered a Long position.</param>
      <summary>Provides method to calculate maximum potential loss (not including margin, commission or slippage) if user entered the position with the specified Side(buy, sell), number of Contracts and Price.
             <para>Notes:</para><para>This property can only be used in signals that will be used in the Portfolio Backtester.</para></summary>
    </member>
    <member name="M:PowerLanguage.IPortfolioPerformance.CalcMaxPotentialLossForEntry(System.Int32,System.Int32)">
      <summary>
             Provides method to calculate maximum potential loss (not including margin, commission or slippage) if user entered the position with the specified Side(buy, sell) and number of Contracts at the Close price.
            </summary>
    </member>
    <member name="M:PowerLanguage.IPortfolioPerformance.CalcMaxPotentialLossForEntry(System.Int32)">
      <summary>
             Provides method to calculate maximum potential loss (not including margin, commission or slippage) if user entered the position with the specified Side(buy, sell) for a number of contracts indicated in the Format Settings dialog window under the Properties tab at Close price.
            </summary>
    </member>
    <member name="M:PowerLanguage.IPortfolioPerformance.SetMaxPotentialLossPerContract(System.Double)">
      <summary>
             Provides method to redefine the values for the indicated symbol. The values in the $ box, if the Absolute Max Potential Loss option is selected, or the values in the % box, if the Max Potential Loss is selected. The newly set value is valid during the strategy calculation or until the SetMaxPotentialLossPerContract is requested again assigning a new value.
            </summary>
    </member>
    <member name="P:PowerLanguage.IPortfolioPerformance.CurrentEntries">
      <summary>Read-only property. Returns a numerical value, indicating the combined number of entries currently open within a portfolio.
             <para>Example:</para><example><para>Assign a value, indicating the combined number of entries currently open within a portfolio, to "var0" variable.</para><code>
             int var0 = Portfolio.CurrentEntries;
             </code></example><para>Notes:</para><para>This property can only be used in signals that will be used in the Portfolio Backtester.</para></summary>
    </member>
    <member name="P:PowerLanguage.IPortfolioPerformance.GrossLoss">
      <summary>Read-only property. Returns a negative numerical value indicating the total currency value of all completed losing trades for a portfolio.
             <para>Example:</para><example><para>GrossLoss will return a value of -50 if there were a total of four losing trades, at 10, 5, 20, and 15.</para><para>GrossLoss will return a value of 0 if no losing trades were completed during the entire trading period.</para><code>
             double grossLoss = Portfolio.GrossLoss;
             </code></example><para>Notes:</para><para>This property can only be used in signals that will be used in the Portfolio Backtester.</para></summary>
    </member>
    <member name="P:PowerLanguage.IPortfolioPerformance.GrossProfit">
      <summary>Read-only property. Returns a numerical value, indicating the total currency value of all completed winning trades for a portfolio.
             <para>Example:</para><example><para>GrossProfit will return a value of 50 if there were a total of four winning trades, at 10, 5, 20, and 15.</para><para>GrossProfit will return a value of 0 if no winning trades were completed during the entire trading period.</para><code>
             double grossProfit = Portfolio.GrossProfit;
             </code></example><para>Notes:</para><para>This property can only be used in signals that will be used in the Portfolio Backtester.</para></summary>
    </member>
    <member name="P:PowerLanguage.IPortfolioPerformance.InvestedCapital">
      <summary>Read-only property. Returns an absolute value in US dollars, indicating the amount of cash assets invested in portfolio securities on the moment of strategy calculation.
             <para>Example:</para><example><para>InvestedCapital will return a value of 100 000 if the amount of cash assets invested in portfolio securities on the moment of strategy calculation is 100 000 dollars (e.g. there are three open positions: 50 000 long, 20 000 long and 30 000 short).</para><code>
             double investedCapital = Portfolio.InvestedCapital;
             </code></example><para>Notes:</para><para>This property can only be used in signals that will be used in the Portfolio Backtester.</para></summary>
    </member>
    <member name="P:PowerLanguage.IPortfolioPerformance.LossTradesNumber">
      <summary>Read-only property. Returns a numerical value, indicating the number of all completed losing trades for a portfolio.
             <para>Example:</para><example><para>LossTradesNumber will return a value of 5 if there were a total of five completed losing trades.</para><para>LossTradesNumber will return a value of 0 if no losing trades were completed during the entire trading period.</para><code>
             int lossTradesNumber = Portfolio.LossTradesNumber;
             </code></example><para>Notes:</para><para>This property can only be used in signals that will be used in the Portfolio Backtester.</para></summary>
    </member>
    <member name="P:PowerLanguage.IPortfolioPerformance.MarginPerContract">
      <summary> Read-only property. Returns:
             <para>a numerical value indicated in the % of contract cost box multiplied by -1, if the Margin value option is selected;</para><para>or:</para><para>the same value as a reserved word Margin, if the Absolute Margin Value option is selected.</para><para>Notes:</para><para>This property can only be used in signals that will be used in the Portfolio Backtester.</para></summary>
    </member>
    <member name="P:PowerLanguage.IPortfolioPerformance.MaxIDDrawdown">
      <summary>Read-only property. Returns a negative numerical value, indicating the largest decline in equity for the entire portfolio during the trading period.
             <para>Example:</para><example><para>MaxIDDrawdown will return a value of -500 if the largest decline in equity during the entire trading period was $500.</para><code>
             double maxIdDrawdown = Portfolio.MaxIDDrawdown;
             </code></example><para>Notes:</para><para>This property can only be used in signals that will be used in the Portfolio Backtester.</para></summary>
    </member>
    <member name="P:PowerLanguage.IPortfolioPerformance.MaxOpenPositionPotentialLoss">
      <summary>Read-only property. Returns a dollar value indicating the combined potential loss (not including margin, commission or slippage) for the traded symbols' open position within the portfolio.
             <para>Example:</para><example><para>MaxOpenPositionPotentialLoss will return a value of 0 if there are currently no open positions within a portfolio.</para><para>MaxOpenPositionPotentialLoss will return a value of 100 if the combined potential loss for all open positions within a portfolio is $100 since the positions were entered.</para><code>
             double maxPotentialLoss = Portfolio.MaxOpenPositionPotentialLoss;
             if ( maxPotentialLoss != 0 ) {
                 CurSpecOrdersMode = ESpecOrdersMode.PerPosition;
                 GenerateStopLoss(maxPotentialLoss);
             }
             </code></example><para>Notes:</para><para>This property can only be used in signals that will be used in the Portfolio Backtester.</para></summary>
    </member>
    <member name="P:PowerLanguage.IPortfolioPerformance.MaxPotentialLossPerContract">
      <summary>Read-only property. Returns:
             <para>a numerical value indicated in the % box multiplied by -1, if the Max Potential Loss option is selected in the Format Settings dialog window under the Portfolio Settings tab;</para><para>or:</para><para>a numerical value indicated in the $ box, if the Absolute Max Potential Loss option is selected in the Format Settings dialog window under the Portfolio Settings tab.</para><para>Example:</para><example><para>MaxPotentialLossPerContract will return -5 if the Max Potential Loss option is selected and % box value is 5 under the Portfolio Settings tab in the Format Settings dialog window.</para><para>MaxPotentialLossPerContract will return 0.001 if the Absolute Max Potential Loss option is selected and $ box value is 0.001 under the Portfolio Settings tab in the Format Settings dialog window.</para><code>
             double lossPerContract = Portfolio.MaxPotentialLossPerContract;
             </code></example><para>Notes:</para><para>This property can only be used in signals that will be used in the Portfolio Backtester.</para></summary>
    </member>
    <member name="P:PowerLanguage.IPortfolioPerformance.MaxRiskEquityPerPosPercent">
      <summary>Read-only property. Returns the Max % of Equity at Risk per Position numerical value set by the user in the Portfolio Settings tab of the Portfolio Backtester Format Settings window.
             <para>Example:</para><example><para>MaxRiskEquityPerPosPercent will return the Max % of Equity at Risk per Position numerical value set by the user.</para><code>
             double maxRiskEquityPerPosPercent = Portfolio.MaxRiskEquityPerPosPercent;
             </code></example><para>Notes:</para><para>This property can only be used in signals that will be used in the Portfolio Backtester.</para></summary>
    </member>
    <member name="P:PowerLanguage.IPortfolioPerformance.NetProfit">
      <summary>Read-only property. Returns a numerical value, indicating the total currency value of all completed trades for a portfolio.
             <para>Example:</para><example><para>NetProfit will return a value of 20 if there were winning trades at 25 and 10, and losing trades at 5 and 10.</para><para>NetProfit will return a value of -15 if there were winning trades at 10 and 5, and losing trades at 20 and 10.</para><para>NetProfit will return a value of 0 no trades were completed during the entire trading period.</para><code>
             double netProfit = Portfolio.NetProfit;
             </code></example><para>Notes:</para><para>This property can only be used in signals that will be used in the Portfolio Backtester.</para></summary>
    </member>
    <member name="P:PowerLanguage.IPortfolioPerformance.OpenPositionProfit">
      <summary>Read-only property. Returns a numerical value, indicating the current combined profit or loss for all open positions within a portfolio.
             <para>Example:</para><example><para>OpenPositionProfit will return a value of 0 if there are currently no open positions within a portfolio.</para><para>OpenPositionProfit will return a value of 100 if the combined value of all open positions within a portfolio has increased by $100 since the positions were entered.</para><para>OpenPositionProfit will return a value of -50 if the combined value of all open positions within a portfolio has decreased by $50 since the positions were entered.</para><code>
             double openPositionPL = Portfolio.OpenPositionProfit;
             </code></example><para>Notes:</para><para>This property can only be used in signals that will be used in the Portfolio Backtester.</para></summary>
    </member>
    <member name="P:PowerLanguage.IPortfolioPerformance.ProfitTradesNumber">
      <summary>Read-only property. Returns a numerical value, indicating the number of all completed winning trades for a portfolio.
             <para>Example:</para><example><para>ProfitTradesNumber will return a value of 5 if there were a total of five completed winning trades.</para><para>ProfitTradesNumber will return a value of 0 if no winning trades were completed during the entire trading period.</para><code>
             int profitTradesNumber = Portfolio.ProfitTradesNumber;
             </code></example><para>Notes:</para><para>This property can only be used in signals that will be used in the Portfolio Backtester.</para></summary>
    </member>
    <member name="P:PowerLanguage.IPortfolioPerformance.PercentProfit">
      <summary>Read-only property. Returns a numerical value, indicating the percentage of winning trades in all trades completed for a portfolio.
             <para>Example:</para><example><para>PercentProfit will return a value of 70 if seven out of the total of 10 completed trades were winning trades.</para><code>
             double percentProfit = Portfolio.PercentProfit;
             </code></example><para>Notes:</para><para>This property can only be used in signals that will be used in the Portfolio Backtester.</para></summary>
    </member>
    <member name="P:PowerLanguage.IPortfolioPerformance.PortfolioEntriesPriority">
      <summary>
             Write-only property. Assigns a priority to each entry order within a portfolio. 
             If execution of all entries generated for a portfolio would cause the capital limits to be exceeded, the entries with the highest priority will receive preference, while the entries with the lowest priority will not be executed.
             If PortfolioEntriesPriority is not specified, the entries will be executed according to the order the symbols are listed in the symbol grid of the Portfolio Backtester.
             <para>Example:</para><example><para>Assign higher execution priority to entry orders for symbols with lower share prices.</para><para><code>
             Lambda&lt;double&gt; PriorityExpr = new Lambda&lt;double&gt;(delegate { return -Bars.CloseValue; });
             </code></para><para><code>
             Portfolio.PortfolioEntriesPriority = PriorityExpr;
             </code></para></example><para>Notes:</para><para>This property can only be used in signals that will be used in the Portfolio Backtester.</para></summary>
    </member>
    <member name="P:PowerLanguage.IPortfolioPerformance.StrategyDrawdown">
      <summary>Read-only property. Returns a negative numerical value, indicating the current decline in equity for the entire portfolio from the peak value for the entire trading period.
             <para>Example:</para><example><para>StrategyDrawdown will return a value of -100 if the current decline in equity from the peak value is $100.</para><code>
             double drawdown = Portfolio.StrategyDrawdown;
             </code></example><para>Notes:</para><para>This property can only be used in signals that will be used in the Portfolio Backtester.</para></summary>
    </member>
    <member name="P:PowerLanguage.IPortfolioPerformance.TotalMaxRiskEquityPercent">
      <summary>Read-only property. Returns the equity Exposure % numerical value set by the user in the Portfolio Settings tab of the Portfolio Backtester Format Settings window.
            </summary>
    </member>
    <member name="P:PowerLanguage.IPortfolioPerformance.TotalTrades">
      <summary>Read-only property. Returns a numerical value, indicating the total number of all completed trades for a portfolio.
             <para>Example:</para><example><para>TotalTrades will return a value of 5 if there were a total of 5 completed trades.</para><para>TotalTrades will return a value of 0 if no trades were completed during the entire trading period.</para><code>
             int tradesNum = Portfolio.TotalTrades;
             </code></example><para>Notes:</para><para>This property can only be used in signals that will be used in the Portfolio Backtester.</para></summary>
    </member>
    <member name="T:PowerLanguage.ISymbolsStorage">
      <summary>
            An interface for accessing symbol storage. 
            </summary>
    </member>
    <member name="M:PowerLanguage.ISymbolsStorage.GetSymbols(System.String)">
      <summary>
            Returns symbol array.
            </summary>
      <param name="data_feed">Data feed name.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PowerLanguage.ISymbolsStorage.GetSymbols(System.String,System.String)">
      <summary>
            Returns symbol array.
            </summary>
      <param name="data_feed">Data feed name.</param>
      <param name="name">Symbol name.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PowerLanguage.ISymbolsStorage.GetSymbols(System.String,System.String,PowerLanguage.ESymbolCategory)">
      <summary>
            Returns symbol array.
            </summary>
      <param name="data_feed">Data feed name.</param>
      <param name="name">Symbol name.</param>
      <param name="_cat">Symbol category.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PowerLanguage.ISymbolsStorage.GetSymbols(System.String,System.String,PowerLanguage.ESymbolCategory,System.String)">
      <summary>
            Returns symbol array.
            </summary>
      <param name="data_feed">Data feed name.</param>
      <param name="name">Symbol name.</param>
      <param name="_cat">Symbol category.</param>
      <param name="Exchange">Symbol exchange.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PowerLanguage.ISymbolsStorage.AddSymbol(ATCenterProxy.interop.MTPA_MCSymbolInfo2,System.String,PowerLanguage.ESymbolSettingsType)">
      <summary>
            Adding symbol to the symbol storage
            </summary>
      <param name="symbol_info">Structure with the paramaters of the symbol that is being added</param>
      <param name="data_feed">Data source name of the symbol that is being added</param>
      <param name="settings_type">Settings type of the symbol that is being added (custom, exchange or dictionary)</param>
      <returns>Returns ID  of the symbol that is being added</returns>
    </member>
    <member name="T:PowerLanguage.ExtensionMethods">
      <exclude />
    </member>
    <member name="M:PowerLanguage.ExtensionMethods.toString(ATCenterProxy.interop.MTPA_MCSymbolInfo2)">
      <exclude />
    </member>
    <member name="T:PowerLanguage.EBarState">
      <summary>
             Enumeration describing bar state. 
            </summary>
    </member>
    <member name="F:PowerLanguage.EBarState.None">
      <summary>
             'None' bar state.
            </summary>
    </member>
    <member name="F:PowerLanguage.EBarState.Open">
      <summary>
             Open bar.
            </summary>
    </member>
    <member name="F:PowerLanguage.EBarState.Inside">
      <summary>
             Inside bar.
            </summary>
    </member>
    <member name="F:PowerLanguage.EBarState.Close">
      <summary>
             Close bar.
            </summary>
    </member>
    <member name="T:PowerLanguage.ISeriesSymbolData">
      <summary>
            Interface for access to symbol's price and time data.
            </summary>
    </member>
    <member name="P:PowerLanguage.ISeriesSymbolData.Time">
      <summary>
             Read-only property. 
             Provides an array for accessing DateTime bars, previous to the current one.
             The array index is number of bars back (Bars ago).
            </summary>
    </member>
    <member name="P:PowerLanguage.ISeriesSymbolData.High">
      <summary>
             Read-only property.
             Provides an array for accessing High bars previous to the current one.
             The array index is number of bars back (Bars ago).
            </summary>
    </member>
    <member name="P:PowerLanguage.ISeriesSymbolData.Low">
      <summary>
             Read-only property. 
             Provides an array for accessing Low bars, previous to the current one.
             The array index is number of bars back (Bars ago).
            </summary>
    </member>
    <member name="P:PowerLanguage.ISeriesSymbolData.Open">
      <summary>
             Read-only property. 
             Provides an array for accessing Open bars, previous to the current one.
             The array index is number of bars back (Bars ago).
            </summary>
    </member>
    <member name="P:PowerLanguage.ISeriesSymbolData.Close">
      <summary>
             Read-only property. 
             Provides an array for accessing Close bars, previous to the current one.
             The array index is number of bars back (Bars ago).
            </summary>
    </member>
    <member name="P:PowerLanguage.ISeriesSymbolData.Volume">
      <summary>
             Read-only property. 
             Provides an array for accessing Volume bars, previous to the current one.
             The array index is number of bars back (Bars ago).
            </summary>
    </member>
    <member name="P:PowerLanguage.ISeriesSymbolData.Ticks">
      <summary>
             Read-only property. 
             Provides an array for accessing Tick bars,previous to the current one.
             The array index is number of bars back (Bars ago).
            </summary>
    </member>
    <member name="P:PowerLanguage.ISeriesSymbolData.UpTicks">
      <summary>
             Read-only property. 
             Provides an array for accessing UpTick bars, previous to the current one.
             The array index is number of bars back (Bars ago).
            </summary>
    </member>
    <member name="P:PowerLanguage.ISeriesSymbolData.DownTicks">
      <summary>
             Read-only property. 
             Provides an array for accessing DownTick bars, previous to the current one.
             The array index is number of bars back (Bars ago).
            </summary>
    </member>
    <member name="P:PowerLanguage.ISeriesSymbolData.OpenInt">
      <summary>
             Read-only property. 
             Provides an array for accessing Open Interest bars, previous to the current one.
             The array index is number of bars back (Bars ago).
            </summary>
    </member>
    <member name="T:PowerLanguage.ISeriesSymbolDataRand">
      <summary>
            Interface for access to symbol's price and time data of any bar (no Max Number of Bar Reference limits).
            </summary>
    </member>
    <member name="P:PowerLanguage.ISeriesSymbolDataRand.Current">
      <summary>
             Read-only property.
             Returns symbol's current bar number.
             Start from 1 to Count.
             Do not include original CurrentBar when calculating Max Number of Bar Reference offset.
            </summary>
    </member>
    <member name="P:PowerLanguage.ISeriesSymbolDataRand.Count">
      <summary>
            Read-only property.
            Returns series bars count.
            </summary>
    </member>
    <member name="T:PowerLanguage.IInstrument">
      <summary>
             Interface for series data access.
            </summary>
    </member>
    <member name="P:PowerLanguage.IInstrument.CurrentBar">
      <summary>
             Read-only property. Returns current bar number.
            </summary>
    </member>
    <member name="P:PowerLanguage.IInstrument.Info">
      <summary>
             Read-only property. Provides an interface for accessing symbol information.
            </summary>
    </member>
    <member name="P:PowerLanguage.IInstrument.StatusLine">
      <summary>
             Read-only property. Provides an interface for accessing information 
             reflected in Status Line.
            </summary>
    </member>
    <member name="P:PowerLanguage.IInstrument.HighValue">
      <summary>
             Read-only property. Returns series current bar's High value.
            </summary>
    </member>
    <member name="P:PowerLanguage.IInstrument.LowValue">
      <summary>
             Read-only property.Returns series current bar’s Low value.
            </summary>
    </member>
    <member name="P:PowerLanguage.IInstrument.OpenValue">
      <summary>
             Read-only property.Returns series current bar’s Open value.
            </summary>
    </member>
    <member name="P:PowerLanguage.IInstrument.CloseValue">
      <summary>
             Read-only property.Returns series current bar’s Close value.
            </summary>
    </member>
    <member name="P:PowerLanguage.IInstrument.VolumeValue">
      <summary>
             Read-only property. Returns series current bar’s Volume value.
            </summary>
    </member>
    <member name="P:PowerLanguage.IInstrument.TicksValue">
      <summary>
             Read-only property. Returns series current bar’s Ticks value.
            </summary>
    </member>
    <member name="P:PowerLanguage.IInstrument.UpTicksValue">
      <summary>
             Read-only property. Returns series current bar’s Up Ticks value.
            </summary>
    </member>
    <member name="P:PowerLanguage.IInstrument.DownTicksValue">
      <summary>
             Read-only property. Returns series current bar’s  Down Ticks value.
            </summary>
    </member>
    <member name="P:PowerLanguage.IInstrument.OpenIntValue">
      <summary>
             Read-only property. Returns series current bar’s  Open Interest value.
            </summary>
    </member>
    <member name="P:PowerLanguage.IInstrument.TimeValue">
      <summary>
             Read-only property. Returns current bar’s time.
            </summary>
    </member>
    <member name="P:PowerLanguage.IInstrument.LastBarTime">
      <summary>
             Read-only property. Returns the last bar’s time.
            </summary>
    </member>
    <member name="P:PowerLanguage.IInstrument.LastBarOnChart">
      <summary>
             Read-only property. Indicates whether current bar is the last bar on the chart.
            </summary>
    </member>
    <member name="P:PowerLanguage.IInstrument.LastBarInSession">
      <summary>
             Read-only property. Indicates whether current bar is the last bar in the SessionObject.
            </summary>
    </member>
    <member name="P:PowerLanguage.IInstrument.Point">
      <summary>
             Read-only property. Returns value of a point(pip).
            </summary>
    </member>
    <member name="P:PowerLanguage.IInstrument.Status">
      <summary>
             Read-only property. Returns current bar’s status:
             None = -1,
             Open = 0,
             Inside = 1,
             Close = 2.
            </summary>
    </member>
    <member name="P:PowerLanguage.IInstrument.Sessions">
      <summary>
             Read-only property. 
             Provides an interface for accessing Sessions information.
            </summary>
    </member>
    <member name="P:PowerLanguage.IInstrument.FullSymbolData">
      <summary>
            Read-only property. 
            Provides an interface for accessing any bar in the series.
            </summary>
    </member>
    <member name="P:PowerLanguage.IInstrument.DOM">
      <summary>
            Read-only property. 
            Provides an interface for accessing Depth Of Market data.
            </summary>
    </member>
    <member name="P:PowerLanguage.IInstrument.Request">
      <summary>
             Read-only property.
             Returns the request for data describing the instrument.
            </summary>
    </member>
    <member name="P:PowerLanguage.IInstrument.BarUpdateTime">
      <summary>
             Read-only property.
              Returns time of the last update of the current bar if Bar Magnifier mode is on. 
              If Bar Magnifier mode is off, returns the time of the current bar (as the Time property).
            </summary>
    </member>
    <member name="T:PowerLanguage.IInstrumentExt">
      <exclude />
    </member>
    <member name="M:PowerLanguage.IInstrumentExt.CurrentBarAbsolute(PowerLanguage.IInstrument)">
      <summary>
            Read-only property. Returns current bar absolute number (zero-based, excluding MaxBarsBack value).
            Return value is same as FullSymbolData.Current - 1 returns.
            </summary>
      <param name="_this">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:PowerLanguage.DOMPrice">
      <summary>
            The structure that defines a DOM price. 
            </summary>
    </member>
    <member name="F:PowerLanguage.DOMPrice.Price">
      <summary>
            Price value.
            </summary>
    </member>
    <member name="F:PowerLanguage.DOMPrice.Size">
      <summary>
            Size value.
            </summary>
    </member>
    <member name="M:PowerLanguage.DOMPrice.#ctor(System.Double,System.Double)">
      <summary>
            Initializes a new instance of the DOMPrice. 
            </summary>
      <param name="price">Price value.</param>
      <param name="size">Size value.</param>
    </member>
    <member name="M:PowerLanguage.DOMPrice.Equals(PowerLanguage.DOMPrice)">
      <summary>
            Returns "true" if this object is equal to the other object. 
            </summary>
      <param name="other">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:PowerLanguage.DOMPrice.op_Equality(PowerLanguage.DOMPrice,PowerLanguage.DOMPrice)">
      <summary>
            Returns "true" if left and right are equal.
            </summary>
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:PowerLanguage.DOMPrice.op_Inequality(PowerLanguage.DOMPrice,PowerLanguage.DOMPrice)">
      <summary>
            Returns "true" if left and right are not equal.
            </summary>
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:PowerLanguage.IDOMData">
      <summary>
            Interface for DOM data access.
            </summary>
    </member>
    <member name="P:PowerLanguage.IDOMData.Ask">
      <summary>
            Read-only property. Returns ask price.
            </summary>
    </member>
    <member name="P:PowerLanguage.IDOMData.Bid">
      <summary>
            Read-only property. Returns bid price.
            </summary>
    </member>
    <member name="P:PowerLanguage.IDOMData.Connected">
      <summary>
            Read-only property. Returns "is connected" if DOM connected.
            </summary>
    </member>
    <member name="T:PowerLanguage.ETickTradedSide">
      <summary>
            Enumeration represents the trade side of the tick, i.e. ask or bid.
            </summary>
    </member>
    <member name="F:PowerLanguage.ETickTradedSide.Undefined">
      <summary>
            Undefined.
            </summary>
    </member>
    <member name="F:PowerLanguage.ETickTradedSide.AskTraded">
      <summary>
            Traded Ask.
            </summary>
    </member>
    <member name="F:PowerLanguage.ETickTradedSide.BidTraded">
      <summary>
            Traded Bid.
            </summary>
    </member>
    <member name="T:PowerLanguage.Bar">
      <summary>
            The structure that defines Bar data. 
            </summary>
    </member>
    <member name="M:PowerLanguage.Bar.Equals(PowerLanguage.Bar)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
      <param name="other">An object to compare with this object.
                            </param>
    </member>
    <member name="M:PowerLanguage.Bar.Equals(System.Object)">
      <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
      <returns>
            True if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
      <param name="obj">Another object to compare to. 
                            </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:PowerLanguage.Bar.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:PowerLanguage.Bar.op_Equality(PowerLanguage.Bar,PowerLanguage.Bar)">
      <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:PowerLanguage.Bar.op_Inequality(PowerLanguage.Bar,PowerLanguage.Bar)">
      <summary>
            Indicates whether this instance and a specified object are not equal.
            </summary>
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:PowerLanguage.Bar.#ctor(System.DateTime,System.Double,System.Double,System.Double,System.Double,System.Single,System.Single,System.Single,System.Single,System.Single,PowerLanguage.EBarState,PowerLanguage.ETickTradedSide,System.Boolean,System.UInt32)">
      <exclude />
    </member>
    <member name="P:PowerLanguage.Bar.Time">
      <summary>
            Read-write property. Bar time.
            </summary>
    </member>
    <member name="P:PowerLanguage.Bar.TickID">
      <summary>
            Read-write property. TickID for tick-based resolution. Can be used for time measurement within one second.
            </summary>
    </member>
    <member name="P:PowerLanguage.Bar.Open">
      <summary>
            Read-write property. Bar "Open" price value.
            </summary>
    </member>
    <member name="P:PowerLanguage.Bar.High">
      <summary>
            Read-write property. Bar "High" price value.
            </summary>
    </member>
    <member name="P:PowerLanguage.Bar.Low">
      <summary>
            Read-write property. Bar "Low" price value.
            </summary>
    </member>
    <member name="P:PowerLanguage.Bar.Close">
      <summary>
            Read-write property. Bar "Close" price value.
            </summary>
    </member>
    <member name="P:PowerLanguage.Bar.UpVolume">
      <summary>
            Read-write property. Bar "UpVolume" value.
            </summary>
    </member>
    <member name="P:PowerLanguage.Bar.DownVolume">
      <summary>
            Read-write property. Bar "DownVolume" value.
            </summary>
    </member>
    <member name="P:PowerLanguage.Bar.UnchangedVolume">
      <summary>
            Read-write property. Bar "UnchangedVolume" value.
            </summary>
    </member>
    <member name="P:PowerLanguage.Bar.TotalVolume">
      <summary>
            Read-write property. Bar "TotalVolume" value.
            </summary>
    </member>
    <member name="P:PowerLanguage.Bar.OpenInterest">
      <summary>
            Read-write property. Bar "OpenInterest" value.
            </summary>
    </member>
    <member name="P:PowerLanguage.Bar.State">
      <summary>
            Read-write property. Bar "State" value.
            </summary>
    </member>
    <member name="P:PowerLanguage.Bar.TickTradedSide">
      <summary>
            Read-write property. Current tick traded side, i.e. ask or bid. <see cref="T:PowerLanguage.ETickTradedSide" />.
            </summary>
    </member>
    <member name="P:PowerLanguage.Bar.EndOfSession">
      <summary>
            Read-write Property. Indicates that bar is the end of session bar.
            </summary>
    </member>
    <member name="T:PowerLanguage.PriceLevel">
      <summary>
            Structure that describes a price level for Volume Profile. <see cref="T:PowerLanguage.BarPriceLevels" /></summary>
    </member>
    <member name="M:PowerLanguage.PriceLevel.Equals(PowerLanguage.PriceLevel)">
      <summary>
            Indicates whether this instance and the specified object are equal.
            </summary>
      <param name="other">
        <see cref="T:PowerLanguage.PriceLevel" /> object for comparison.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PowerLanguage.PriceLevel.Equals(System.Object)">
      <summary>
            Indicates whether this instance and the specified object are equal.
            </summary>
      <returns>
            true if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
      <param name="obj">Another object to compare to. 
                            </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:PowerLanguage.PriceLevel.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:PowerLanguage.PriceLevel.op_Equality(PowerLanguage.PriceLevel,PowerLanguage.PriceLevel)">
      <summary>
            Indicates whether two instances of <see cref="T:PowerLanguage.PriceLevel" /> are equal.
            </summary>
      <param name="left">First instance.</param>
      <param name="right">Second instance.</param>
      <returns>True if instances are equal; otherwise false.</returns>
    </member>
    <member name="M:PowerLanguage.PriceLevel.op_Inequality(PowerLanguage.PriceLevel,PowerLanguage.PriceLevel)">
      <summary>
            Indicates whether two instances of <see cref="T:PowerLanguage.PriceLevel" /> are not equal.
            </summary>
      <param name="left">First instance.</param>
      <param name="right">Second instance.</param>
      <returns>True if instances are not equal; otherwise false.</returns>
    </member>
    <member name="F:PowerLanguage.PriceLevel.Price">
      <summary>
            Price level.
            </summary>
    </member>
    <member name="F:PowerLanguage.PriceLevel.UpVolume">
      <summary>
            Up ticks Volume of the price level.
            An up tick is a tick with the price higher then the preceding tick.
            </summary>
    </member>
    <member name="F:PowerLanguage.PriceLevel.DownVolume">
      <summary>
            Down ticks Volume of the price level.
            A down tick is a tick with the price lower then the preceding tick.
            </summary>
    </member>
    <member name="P:PowerLanguage.PriceLevel.TotalVolume">
      <summary>
            Total Volume of the price level.
            </summary>
    </member>
    <member name="T:PowerLanguage.BarPriceLevels">
      <summary>
            Structure describes volume data by showing at specific prices for a bar (Bar's Volume Profile).
            </summary>
    </member>
    <member name="M:PowerLanguage.BarPriceLevels.#ctor(PowerLanguage.Bar,PowerLanguage.PriceLevel[],System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:PowerLanguage.BarPriceLevels" /> structure to the specified value.
            </summary>
      <param name="bar">
        <see cref="T:PowerLanguage.Bar" /> object.</param>
      <param name="levels">Price levels. <see cref="T:PowerLanguage.PriceLevel" /></param>
      <param name="index">Bar index.</param>
    </member>
    <member name="M:PowerLanguage.BarPriceLevels.Equals(PowerLanguage.BarPriceLevels)">
      <summary>
            Indicates whether this instance and other instance of <see cref="T:PowerLanguage.BarPriceLevels" /> are equal.
            </summary>
      <param name="other">Instance of <see cref="T:PowerLanguage.BarPriceLevels" /> object for comparison.</param>
      <returns>true if the other parameter is equal to the current <see cref="T:PowerLanguage.BarPriceLevels" /> object; otherwise, false.</returns>
    </member>
    <member name="M:PowerLanguage.BarPriceLevels.Equals(System.Object)">
      <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
      <returns>
            true if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
      <param name="obj">Another object to compare to. 
                            </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:PowerLanguage.BarPriceLevels.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:PowerLanguage.BarPriceLevels.op_Equality(PowerLanguage.BarPriceLevels,PowerLanguage.BarPriceLevels)">
      <summary>
            Indicates whether two instances of <see cref="T:PowerLanguage.BarPriceLevels" /> are equal.
            </summary>
      <param name="left">First instance of <see cref="T:PowerLanguage.BarPriceLevels" /> object for comparison.</param>
      <param name="right">Second instance of <see cref="T:PowerLanguage.BarPriceLevels" /> object for comparison.</param>
      <returns>true if first instance is equal to the second; otherwise, false.</returns>
    </member>
    <member name="M:PowerLanguage.BarPriceLevels.op_Inequality(PowerLanguage.BarPriceLevels,PowerLanguage.BarPriceLevels)">
      <summary>
            Indicates whether two instances of <see cref="T:PowerLanguage.BarPriceLevels" /> are not equal.
            </summary>
      <param name="left">First instance of <see cref="T:PowerLanguage.BarPriceLevels" /> object for comparison.</param>
      <param name="right">Second instance of <see cref="T:PowerLanguage.BarPriceLevels" /> object for comparison.</param>
      <returns>true if first instance is not equal to the second; otherwise, false.</returns>
    </member>
    <member name="P:PowerLanguage.BarPriceLevels.Bar">
      <summary>
            Read-write property. <see cref="T:PowerLanguage.Bar" /> object.
            </summary>
    </member>
    <member name="P:PowerLanguage.BarPriceLevels.Levels">
      <summary>
            Read-write property. Bar's price levels. Volume profile of the bar. <see cref="T:PowerLanguage.PriceLevel" /></summary>
    </member>
    <member name="P:PowerLanguage.BarPriceLevels.Index">
      <summary>
            Read-write property. Bar's index.
            </summary>
    </member>
    <member name="P:PowerLanguage.BarPriceLevels.Time">
      <summary>
            Read-write property. Bar's time.
            </summary>
    </member>
    <member name="P:PowerLanguage.BarPriceLevels.TickID">
      <summary>
            Read-write property. Bar's tick ID.
            </summary>
    </member>
    <member name="T:PowerLanguage.ETextStyleH">
      <summary>
             Enumeration describing horizontal text alignment style. 
            </summary>
    </member>
    <member name="F:PowerLanguage.ETextStyleH.Right">
      <summary>
             Align text to the right.
            </summary>
    </member>
    <member name="F:PowerLanguage.ETextStyleH.Left">
      <summary>
             Align text to the left.
            </summary>
    </member>
    <member name="F:PowerLanguage.ETextStyleH.Center">
      <summary>
             Center the text.
            </summary>
    </member>
    <member name="T:PowerLanguage.ETextStyleV">
      <summary>
             Enumeration describing vertical text alignment style. 
            </summary>
    </member>
    <member name="F:PowerLanguage.ETextStyleV.Below">
      <summary>
             Below text.
            </summary>
    </member>
    <member name="F:PowerLanguage.ETextStyleV.Above">
      <summary>
             Above text.
            </summary>
    </member>
    <member name="F:PowerLanguage.ETextStyleV.Center">
      <summary>
             Center the text.
            </summary>
    </member>
    <member name="T:PowerLanguage.EDrawingSource">
      <summary>
             Enumeration describing drawing’s origin.
            </summary>
    </member>
    <member name="F:PowerLanguage.EDrawingSource.CurrentTech">
      <summary>
             Drawing was created by current study.
            </summary>
    </member>
    <member name="F:PowerLanguage.EDrawingSource.NotCurrentTechOrManual">
      <summary>
             Drawing was not created by the current study or manually.
            </summary>
    </member>
    <member name="F:PowerLanguage.EDrawingSource.AnyTechOrManual">
      <summary>
             Drawing was created by any study or manually.
            </summary>
    </member>
    <member name="F:PowerLanguage.EDrawingSource.CurrentTechOrManual">
      <summary>
             Drawing was created by current study or manually.
            </summary>
    </member>
    <member name="F:PowerLanguage.EDrawingSource.NotCurrentTech">
      <summary>
             Drawing was not created by current study.
            </summary>
    </member>
    <member name="F:PowerLanguage.EDrawingSource.AnyTech">
      <summary>
             Drawing was not created by any study.
            </summary>
    </member>
    <member name="F:PowerLanguage.EDrawingSource.Manual">
      <summary>
             Drawing was created manually.
            </summary>
    </member>
    <member name="T:PowerLanguage.ChartPoint">
      <summary>
             The structure that defines a point on the chart.
            </summary>
    </member>
    <member name="M:PowerLanguage.ChartPoint.#ctor(System.DateTime,System.Double)">
      <summary>
             Initializes a new instance of ChartPoint. 
            </summary>
      <param name="time">System time (first coordinate)</param>
      <param name="price">Price (second coordinate)</param>
    </member>
    <member name="M:PowerLanguage.ChartPoint.#ctor(System.Int32,System.Double)">
      <summary>
             Initializes a new instance of ChartPoint. 
            </summary>
      <param name="barNumber">Bar number (first coordinate)</param>
      <param name="price">Price (second coordinate)</param>
    </member>
    <member name="M:PowerLanguage.ChartPoint.#ctor(System.Double)">
      <summary>
            Initializes a new instance of ChartPoint. 
            </summary>
      <param name="price">Price (second coordinate)</param>
    </member>
    <member name="M:PowerLanguage.ChartPoint.Equals(PowerLanguage.ChartPoint)">
      <summary>
            Returns "true" if coordinates are equal.
            </summary>
      <param name="other">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:PowerLanguage.ChartPoint.op_Equality(PowerLanguage.ChartPoint,PowerLanguage.ChartPoint)">
      <summary>
            Returns "true" if left and right coordinates are equal.
            </summary>
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:PowerLanguage.ChartPoint.op_Inequality(PowerLanguage.ChartPoint,PowerLanguage.ChartPoint)">
      <summary>
            Returns "true" if left and right coordinates are not equal.
            </summary>
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:PowerLanguage.ChartPoint.Time">
      <summary>
             Read-write property. System time (first coordinate).
            </summary>
    </member>
    <member name="P:PowerLanguage.ChartPoint.BarNumber">
      <summary>
             Read-write property. Bar number (first coordinate).
            </summary>
    </member>
    <member name="P:PowerLanguage.ChartPoint.Price">
      <summary>
             Read-write property. Price (second coordinate).
            </summary>
    </member>
    <member name="P:PowerLanguage.ChartPoint.Empty">
      <summary>
             Read-only property. Returns an empty coordinate.
            </summary>
    </member>
    <member name="T:PowerLanguage.MouseClickArgs">
      <summary>
            The structure that defines mouse-click arguments.
            </summary>
    </member>
    <member name="F:PowerLanguage.MouseClickArgs.keys">
      <summary>
            Specifies key codes and modifiers.
            </summary>
    </member>
    <member name="F:PowerLanguage.MouseClickArgs.buttons">
      <summary>
            Specifies pressed mouse button.
            </summary>
    </member>
    <member name="F:PowerLanguage.MouseClickArgs.point">
      <summary>
            Specifies chart point where mouse was pressed.
            </summary>
    </member>
    <member name="F:PowerLanguage.MouseClickArgs.data_number">
      <summary>
            Data stream number.
            </summary>
    </member>
    <member name="F:PowerLanguage.MouseClickArgs.bar_number">
      <summary>
            Bar number where mouse was pressed.
            </summary>
    </member>
    <member name="M:PowerLanguage.MouseClickArgs.#ctor(System.Windows.Forms.Keys,System.Windows.Forms.MouseButtons,PowerLanguage.ChartPoint,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the MouseClickArgs.
            </summary>
      <param name="keys">Specifies key codes and modifiers.</param>
      <param name="buttons">Specifies pressed mouse button.</param>
      <param name="point">Specifies chart point where mouse was pressed.</param>
      <param name="dataNumber">Data stream number.</param>
      <param name="barNumber">Bar number where mouse was pressed.</param>
    </member>
    <member name="T:PowerLanguage.ETLStyle">
      <summary>
             Enumeration describing trend line style.
            </summary>
    </member>
    <member name="F:PowerLanguage.ETLStyle.ToolSolid">
      <summary>
             Solid line style.
            </summary>
    </member>
    <member name="F:PowerLanguage.ETLStyle.ToolDashed">
      <summary>
             Dashed line style.
            </summary>
    </member>
    <member name="F:PowerLanguage.ETLStyle.ToolDotted">
      <summary>
             Dotted line style.
            </summary>
    </member>
    <member name="F:PowerLanguage.ETLStyle.ToolDashed2">
      <summary>
             Dashed2 line style.
            </summary>
    </member>
    <member name="F:PowerLanguage.ETLStyle.ToolDashed3">
      <summary>
             Dashed3 line style.
            </summary>
    </member>
    <member name="T:PowerLanguage.EAlertType">
      <summary>
             Enumeration describing alert types.
            </summary>
    </member>
    <member name="F:PowerLanguage.EAlertType.Disabled">
      <summary>
             Alerts are disabled.
            </summary>
    </member>
    <member name="F:PowerLanguage.EAlertType.BreakoutIntrabar">
      <summary>
             Alerts can be triggered intrabar.
            </summary>
    </member>
    <member name="F:PowerLanguage.EAlertType.BreakoutOnClose">
      <summary>
             Alerts can be triggered on close of bar.
            </summary>
    </member>
    <member name="T:PowerLanguage.EArrowForms">
      <summary>
             Enumeration describing arrow forms.
            </summary>
    </member>
    <member name="F:PowerLanguage.EArrowForms.ArrowForm0">
      <summary>
             Arrow form 0.
            </summary>
    </member>
    <member name="F:PowerLanguage.EArrowForms.ArrowForm1">
      <summary>
             Arrow form 1.
            </summary>
    </member>
    <member name="F:PowerLanguage.EArrowForms.ArrowForm2">
      <summary>
             Arrow form 2.
            </summary>
    </member>
    <member name="F:PowerLanguage.EArrowForms.ArrowForm3">
      <summary>
             Arrow form 3.
            </summary>
    </member>
    <member name="F:PowerLanguage.EArrowForms.ArrowForm4">
      <summary>
             Arrow form 4.
            </summary>
    </member>
    <member name="F:PowerLanguage.EArrowForms.ArrowForm5">
      <summary>
             Arrow form 5.
            </summary>
    </member>
    <member name="F:PowerLanguage.EArrowForms.ArrowForm6">
      <summary>
             Arrow form 6.
            </summary>
    </member>
    <member name="F:PowerLanguage.EArrowForms.ArrowForm7">
      <summary>
             Arrow form 7.
            </summary>
    </member>
    <member name="F:PowerLanguage.EArrowForms.ArrowForm8">
      <summary>
             Arrow form 8.
            </summary>
    </member>
    <member name="F:PowerLanguage.EArrowForms.ArrowForm9">
      <summary>
             Arrow form 9.
            </summary>
    </member>
    <member name="F:PowerLanguage.EArrowForms.ArrowForm10">
      <summary>
             Arrow form 10.
            </summary>
    </member>
    <member name="F:PowerLanguage.EArrowForms.ArrowForm11">
      <summary>
             Arrow form 11.
            </summary>
    </member>
    <member name="F:PowerLanguage.EArrowForms.ArrowForm12">
      <summary>
             Arrow form 12.
            </summary>
    </member>
    <member name="F:PowerLanguage.EArrowForms.ArrowForm13">
      <summary>
             Arrow form 13.
            </summary>
    </member>
    <member name="T:PowerLanguage.Indexator">
      <exclude />
    </member>
    <member name="M:PowerLanguage.Indexator.RecoveryIndexes(System.Int32@,System.Int32@)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.Indexator.CloseBarIndexes(System.Int32@,System.Int32@)">
      <exclude />
    </member>
    <member name="P:PowerLanguage.Indexator.Item(System.Int32)">
      <exclude />
    </member>
    <member name="P:PowerLanguage.Indexator.BufferSize">
      <exclude />
    </member>
    <member name="T:PowerLanguage.IVariablesControl">
      <exclude />
    </member>
    <member name="M:PowerLanguage.IVariablesControl.Initialize">
      <exclude />
    </member>
    <member name="M:PowerLanguage.IVariablesControl.CloseBar">
      <exclude />
    </member>
    <member name="M:PowerLanguage.IVariablesControl.Recovery">
      <exclude />
    </member>
    <member name="T:PowerLanguage.IVar`1">
      <summary>
             The base interface for variables.
            </summary>
      <typeparam name="T">
             Any type - double, int, string, etc.
             </typeparam>
    </member>
    <member name="P:PowerLanguage.IVar`1.Value">
      <summary>
             Read-write property for accessing the value of the variable.
            </summary>
    </member>
    <member name="P:PowerLanguage.IVar`1.DefaultValue">
      <summary>
             Read-only propertry. Returns default value.
            </summary>
    </member>
    <member name="T:PowerLanguage.VariableObject`1">
      <summary>
             Class for simple variables, provides access to the value of the variable 
             in the current context of study execution.
            </summary>
      <typeparam name="T">Any type - double, int, string, etc.</typeparam>
    </member>
    <member name="M:PowerLanguage.VariableObject`1.#ctor(PowerLanguage.IStudyControl)">
      <summary>
             Initializes a new instance of the VariableObject. 
            </summary>
      <param name="master">Study object which manages this variable object.</param>
    </member>
    <member name="M:PowerLanguage.VariableObject`1.#ctor(PowerLanguage.IStudyControl,`0)">
      <summary>
             Initializes a new instance of the VariableObject.
            </summary>
      <param name="master">Study object which manages this variable object.</param>
      <param name="defaultVal">Simple variable default value.</param>
    </member>
    <member name="M:PowerLanguage.VariableObject`1.#ctor(PowerLanguage.IStudyControl,`0,System.Int32)">
      <summary>
             Initializes a new instance of the VariableObject.
            </summary>
      <param name="master">Study object which manages this variable object.</param>
      <param name="defaultVal">Simple variable default value.</param>
      <param name="dataStream">Simple variable base data stream number.</param>
    </member>
    <member name="P:PowerLanguage.VariableObject`1.Item(System.Int32)">
      <summary>
             Read-only property. Returns a reference to a bar located a specified number of bars back from the current bar. 
            </summary>
      <param name="barsAgo">The numerical expression, specifying the number of bars back.</param>
    </member>
    <member name="P:PowerLanguage.VariableObject`1.Value">
      <summary>
             A read-write property for accessing the value of the variable.
            </summary>
    </member>
    <member name="P:PowerLanguage.VariableObject`1.DefaultValue">
      <summary>
             A read-write property for accessing the default value of the variable.
            </summary>
    </member>
    <member name="T:PowerLanguage.VariableSeries`1">
      <summary>
             Class that allows access to and preserves historical variable values (for a series of variables).
            </summary>
      <typeparam name="T">Any type - double, int, string, etc.</typeparam>
    </member>
    <member name="M:PowerLanguage.VariableSeries`1.#ctor(PowerLanguage.IStudyControl)">
      <summary>
             Initializes a new instance of the VariableSeries. 
            </summary>
      <param name="master">Study object which manages this variable object.</param>
    </member>
    <member name="M:PowerLanguage.VariableSeries`1.#ctor(PowerLanguage.IStudyControl,`0)">
      <summary>
             Initializes a new instance of the VariableSeries. 
            </summary>
      <param name="master">Study object which manages this variable object.</param>
      <param name="defaultVal">Series variable default value.</param>
    </member>
    <member name="M:PowerLanguage.VariableSeries`1.#ctor(PowerLanguage.IStudyControl,`0,System.Int32)">
      <summary>
             Initializes a new instance of the VariableSeries. 
            </summary>
      <param name="master">Study object which manages this variable object.</param>
      <param name="defaultVal">Series variable default value.</param>
      <param name="dataStream">Series variable base data stream number.</param>
    </member>
    <member name="M:PowerLanguage.VariableSeries`1.#ctor(PowerLanguage.IStudyControl,`0,System.Int32,System.Boolean)">
      <summary>
             Initializes a new instance of the VariableSeries. 
            </summary>
      <param name="master">Study object which manages this variable object.</param>
      <param name="defaultVal">Series variable default value.</param>
      <param name="dataStream">Series variable base data stream number.</param>
      <param name="intrabarPersist">If true: Series variable does not reset its value (from the previous bar) before the calculation is done on the next bar.</param>
    </member>
    <member name="P:PowerLanguage.VariableSeries`1.Item(System.Int32)">
      <summary>
             Read-only property. Returns a reference to a bar located a specified number of bars back from the current bar.
            </summary>
      <param name="barsAgo">The numerical expression specifying the number of bars back. </param>
    </member>
    <member name="P:PowerLanguage.VariableSeries`1.Value">
      <summary>
             A read-write property for accessing the value of the variable.
            </summary>
    </member>
    <member name="P:PowerLanguage.VariableSeries`1.DefaultValue">
      <summary>
             A read-write property for accessing the default value of the variable.
            </summary>
    </member>
    <member name="T:PowerLanguage.details.SOrder">
      <exclude />
    </member>
    <member name="M:PowerLanguage.details.SOrder.#ctor(System.Int32,System.Double,System.Double,PowerLanguage.Contracts,System.String)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.details.SOrder.#ctor(System.Int32,System.Double,System.Double)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.details.SOrder.#ctor(System.Int32,System.Double,PowerLanguage.Contracts,System.String)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.details.SOrder.#ctor(System.Int32,PowerLanguage.Contracts,System.String)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.details.SOrder.#ctor(System.Int32,System.Double)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.details.SOrder.#ctor(System.Int32)">
      <exclude />
    </member>
    <member name="P:PowerLanguage.details.SOrder.OrderID">
      <exclude />
    </member>
    <member name="P:PowerLanguage.details.SOrder.Price1">
      <exclude />
    </member>
    <member name="P:PowerLanguage.details.SOrder.Price2">
      <exclude />
    </member>
    <member name="P:PowerLanguage.details.SOrder.Contract">
      <exclude />
    </member>
    <member name="P:PowerLanguage.details.SOrder.Name">
      <exclude />
    </member>
    <member name="T:PowerLanguage.details.IOrderControl">
      <exclude />
    </member>
    <member name="M:PowerLanguage.details.IOrderControl.RegisterOrder(PowerLanguage.Order)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.details.IOrderControl.GenerateOrder(PowerLanguage.details.SOrder)">
      <exclude />
    </member>
    <member name="T:PowerLanguage.details.CBaseOrderObject">
      <exclude />
    </member>
    <member name="M:PowerLanguage.details.CBaseOrderObject.#ctor(PowerLanguage.Order,PowerLanguage.details.IOrderControl)">
      <exclude />
    </member>
    <member name="P:PowerLanguage.details.CBaseOrderObject.Host">
      <exclude />
    </member>
    <member name="P:PowerLanguage.details.CBaseOrderObject.Info">
      <exclude />
    </member>
    <member name="P:PowerLanguage.details.CBaseOrderObject.ID">
      <exclude />
    </member>
    <member name="T:PowerLanguage.details.COrderMarket">
      <exclude />
    </member>
    <member name="M:PowerLanguage.details.COrderMarket.#ctor(PowerLanguage.Order,PowerLanguage.details.IOrderControl)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.details.COrderMarket.Send">
      <exclude />
    </member>
    <member name="M:PowerLanguage.details.COrderMarket.Send(System.Int32)">
      <exclude />
    </member>
    <member name="T:PowerLanguage.details.COrderPriced">
      <exclude />
    </member>
    <member name="M:PowerLanguage.details.COrderPriced.#ctor(PowerLanguage.Order,PowerLanguage.details.IOrderControl)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.details.COrderPriced.Send(System.Double)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.details.COrderPriced.Send(System.Double,System.Int32)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.details.COrderPriced.Send(System.String,System.Double)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.details.COrderPriced.Send(System.String,System.Double,System.Int32)">
      <exclude />
    </member>
    <member name="T:PowerLanguage.details.COrderStopLimit">
      <exclude />
    </member>
    <member name="M:PowerLanguage.details.COrderStopLimit.#ctor(PowerLanguage.Order,PowerLanguage.details.IOrderControl)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.details.COrderStopLimit.Send(System.Double,System.Double)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.details.COrderStopLimit.Send(System.Double,System.Double,System.Int32)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.details.COrderStopLimit.Send(System.String,System.Double,System.Double)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.details.COrderStopLimit.Send(System.String,System.Double,System.Double,System.Int32)">
      <exclude />
    </member>
    <member name="T:PowerLanguage.IChartCommands">
      <summary>
            Charting commands access interface.
            </summary>
    </member>
    <member name="M:PowerLanguage.IChartCommands.ScrollToBar(System.Int32,System.Int32)">
      <summary>
            Scrolls the chart to the specified bar (barN) of the data series with the dataN number
            </summary>
      <param name="dataN">Data series number starting from 1</param>
      <param name="barN">Bar number starting from 1. Absolute value regardless of the bars back settings</param>
    </member>
    <member name="M:PowerLanguage.IChartCommands.CommandLine(System.String)">
      <summary>
            Execute the command for the chart (command line)
            </summary>
      <param name="command">
      </param>
    </member>
    <member name="T:PowerLanguage.GetLambda`1">
      <summary>
             Delegate GetLambda
            </summary>
      <param name="barsBack">The bars back number.</param>
      <typeparam name="T">Any type - double, int, string, etc.</typeparam>
    </member>
    <member name="T:PowerLanguage.SetLambda`1">
      <summary>
             Delegate SetLambda
            </summary>
      <param name="value">
      </param>
      <typeparam name="T">Any type - double, int, string, etc.</typeparam>
    </member>
    <member name="T:PowerLanguage.Lambda`1">
      <summary>
             The lambda implementation of ISeries.
            </summary>
      <typeparam name="T">Any type - double, int, string, etc.</typeparam>
    </member>
    <member name="M:PowerLanguage.Lambda`1.#ctor(PowerLanguage.GetLambda{`0})">
      <summary>
             Initializes a new instance of the Lambda.
            </summary>
      <param name="expr">Lambda expression.</param>
    </member>
    <member name="P:PowerLanguage.Lambda`1.Item(System.Int32)">
      <summary>
             Read-only property. Returns a reference to a bar located a specified number of bars back from the current bar.
            </summary>
      <param name="barsAgo">The numerical expression, specifying the number of bars back.</param>
    </member>
    <member name="P:PowerLanguage.Lambda`1.Value">
      <summary>
             Read-only property. Returns series value.
            </summary>
    </member>
    <member name="T:PowerLanguage.LambdaRef`1">
      <summary>
             The lambda implementation of IVar.
            </summary>
      <typeparam name="T">Any type - double, int, string, etc.</typeparam>
    </member>
    <member name="M:PowerLanguage.LambdaRef`1.#ctor(PowerLanguage.GetLambda{`0},PowerLanguage.SetLambda{`0})">
      <summary>
             Initializes a new instance of the LambdaRef.
            </summary>
      <param name="getExpression">GetLambda expression.</param>
      <param name="setExpression">SetLambda expression.</param>
    </member>
    <member name="P:PowerLanguage.LambdaRef`1.Item(System.Int32)">
      <summary>
             Read-only property. Returns a reference to a bar located a specified number of bars back from the current bar.
            </summary>
      <param name="barsAgo">The numerical expression specifying the number of bars back.</param>
    </member>
    <member name="T:PowerLanguage.ConstantObject`1">
      <summary>
             ISeries implementation that emulates behavior of the simple property with a constant value.
            </summary>
      <typeparam name="T">
             Any type - double, int, string, etc.
             </typeparam>
    </member>
    <member name="M:PowerLanguage.ConstantObject`1.#ctor(`0)">
      <summary>
             Initializes a new instance of the ConstantObject class.
            </summary>
      <param name="value">
             The value that ConstantObject always returns.
             </param>
    </member>
    <member name="P:PowerLanguage.ConstantObject`1.Item(System.Int32)">
      <summary>
             Read-only property. Returns Value property.
            </summary>
      <param name="barsAgo">
             Not used.
             </param>
    </member>
    <member name="P:PowerLanguage.ConstantObject`1.Value">
      <summary>
             Read-only property. Returns constant value.
            </summary>
    </member>
    <member name="T:PowerLanguage.IStudy">
      <summary>
            Common base interface for data access.
            </summary>
      <remarks>
        <para>
                Enjoy <c>IStudy</c> type 
                and <c>C#</c>!
              </para>
        <para>
                Enjoy it more!
              </para>
      </remarks>
    </member>
    <member name="M:PowerLanguage.IStudy.BarsOfData(System.Int32)">
      <summary>
            Read-only property. Provides an interface for accessing data series on a particular datastream. 
            Datastream number is provided in the parameter.
            </summary>
    </member>
    <member name="M:PowerLanguage.IStudy.IsExist(System.Int32)">
      <summary>
             Read-only property. Indicates whether there is a series with given number on the chart.
            </summary>
      <param name="dataStream">Data stream number.</param>
      <returns>
      </returns>
    </member>
    <member name="P:PowerLanguage.IStudy.Name">
      <summary>
             Read-only property. Returns study name.
            </summary>
    </member>
    <member name="P:PowerLanguage.IStudy.Bars">
      <summary>
            Read-only property. Provides an interface for accessing current series' data.
            </summary>
    </member>
    <member name="P:PowerLanguage.IStudy.MaxDataStream">
      <summary>
             Read-only property. The maximum index number of datastreams present on the chart.
            </summary>
    </member>
    <member name="P:PowerLanguage.IStudy.Output">
      <summary>
             Read-only property. Provides an interface for accessing Output Window.
            </summary>
    </member>
    <member name="P:PowerLanguage.IStudy.Alerts">
      <summary>
             Read-only property. Provides an interface for accessing Alerts.
            </summary>
    </member>
    <member name="P:PowerLanguage.IStudy.DrwText">
      <summary>
             Read-only property. Provides an interface for accessing Text Drawings.
            </summary>
    </member>
    <member name="P:PowerLanguage.IStudy.DrwTrendLine">
      <summary>
             Read-only property. Provides an interface for accessing Trend Line Drawings.
            </summary>
    </member>
    <member name="P:PowerLanguage.IStudy.DrwArrow">
      <summary>
             Read-only property. Provides an interface for accessing  Arrow Drawings.
            </summary>
    </member>
    <member name="P:PowerLanguage.IStudy.StrategyInfo">
      <summary>
             Read-only property. Provides an interface for accessing strategy information.
            </summary>
    </member>
    <member name="P:PowerLanguage.IStudy.ExecInfo">
      <summary>
             Read-only property. Provides an interface for accessing information regarding study’s context.
            </summary>
    </member>
    <member name="P:PowerLanguage.IStudy.ExecControl">
      <summary>
             Read-only property. Provides an interface for controlling study’s calculation.
            </summary>
    </member>
    <member name="P:PowerLanguage.IStudy.Environment">
      <summary>
             Read-only property. Provides an interface for accessing the environment.
            </summary>
    </member>
    <member name="P:PowerLanguage.IStudy.ExpertCommentary">
      <summary>
            Read-only property. Provides an interface for accessing Expert Commentary.
            </summary>
    </member>
    <member name="T:PowerLanguage.IStrategy">
      <summary>
             An interface describing the strategy. 
            </summary>
    </member>
    <member name="P:PowerLanguage.IStrategy.PositionSide">
      <summary>
             Read-only property. Returns strategy's MarketPosition.
            </summary>
    </member>
    <member name="P:PowerLanguage.IStrategy.AvgBarsEvenTrade">
      <summary>
             Read-only property. Returns the average length of even trades (without profit and loss) in terms of bars.
            </summary>
    </member>
    <member name="P:PowerLanguage.IStrategy.AvgBarsLosTrade">
      <summary>
             Read-only property. Returns the average length of losing trades in terms of bars.
            </summary>
    </member>
    <member name="P:PowerLanguage.IStrategy.AvgBarsWinTrade">
      <summary>
             Read-only property. Returns the average length of winning trades in terms of bars.
            </summary>
    </member>
    <member name="P:PowerLanguage.IStrategy.GrossLoss">
      <summary>
             Read-only property. Returns a non-positive number that indicates total strategy loss.
            </summary>
    </member>
    <member name="P:PowerLanguage.IStrategy.GrossProfit">
      <summary>
             Read-only property. Returns non-negative number that indicates total strategy profit. 
            </summary>
    </member>
    <member name="P:PowerLanguage.IStrategy.LargestLosTrade">
      <summary>				
             Read-only property. Returns non-positive number with maximum loss of a single trade.
            </summary>
    </member>
    <member name="P:PowerLanguage.IStrategy.LargestWinTrade">
      <summary>				
             Read-only property. Returns non-negative number with maximum profit of a single trade.
            </summary>
    </member>
    <member name="P:PowerLanguage.IStrategy.MaxConsecLosers">
      <summary>
             Read-only property. Returns maximum number of sequential unprofitable trades.
            </summary>
    </member>
    <member name="P:PowerLanguage.IStrategy.MaxConsecWinners">
      <summary>				
             Read-only property. Returns maximum number of sequential profitable trades.
            </summary>
    </member>
    <member name="P:PowerLanguage.IStrategy.MaxLotsHeld">
      <summary>				
             Read-only property. Returns maximum number of sequential unprofitable trades.
            </summary>
    </member>
    <member name="P:PowerLanguage.IStrategy.MaxDrawDown">
      <summary>				
             Read-only property. Returns maximum potential loss (drawdown) during entire trading period.
            </summary>
    </member>
    <member name="P:PowerLanguage.IStrategy.NumEvenTrades">
      <summary>				
             Read-only property. Returns total number of trades that did not bring any profit or loss.
            </summary>
    </member>
    <member name="P:PowerLanguage.IStrategy.NumLosTrades">
      <summary>
             Read-only property. Returns total number or losing trades.
            </summary>
    </member>
    <member name="P:PowerLanguage.IStrategy.NumWinTrades">
      <summary>
             Read-only property. Returns total number or profitable trades.
            </summary>
    </member>
    <member name="P:PowerLanguage.IStrategy.PercentProfit">
      <summary>
             Returns a ratio of profitable trades to total number of trades expressed in percent 
             ( 100*(NumWinTrades/TotalTrades)).
            </summary>
    </member>
    <member name="P:PowerLanguage.IStrategy.TotalBarsEvenTrades">
      <summary>				
             Read-only property. Returns the total number of bars during which even trades (without profit and loss) were open.
            </summary>
    </member>
    <member name="P:PowerLanguage.IStrategy.TotalBarsLosTrades">
      <summary>				
             Read-only property. Returns the total number of bars during which losing trades were open.
            </summary>
    </member>
    <member name="P:PowerLanguage.IStrategy.TotalBarsWinTrades">
      <summary>
             Read-only property. Returns the total number of bars during which winning trades were open.
            </summary>
    </member>
    <member name="P:PowerLanguage.IStrategy.TotalTrades">
      <summary>
             Read-only property. Returns the total number of trades.
            </summary>
    </member>
    <member name="P:PowerLanguage.IStrategy.Portfolio">
      <summary>
             Read-only property. Returns an interface which provides Portfolio Perfomance.
            </summary>
    </member>
    <member name="P:PowerLanguage.IStrategy.CurrentPosition">
      <summary>
             Read-only property. Returns strategy's current position.
            </summary>
    </member>
    <member name="P:PowerLanguage.IStrategy.Positions">
      <summary>
             Read-only property. Returns a read-only collection of all strategy positions.
            </summary>
    </member>
    <member name="P:PowerLanguage.IStrategy.Commission">
      <summary>
             Read-only property. Returns 'Commission' from the Strategy Properties window.
            </summary>
    </member>
    <member name="P:PowerLanguage.IStrategy.Slippage">
      <summary>
             Read-only property. Returns 'Slippage' from the Strategy Properties window.
            </summary>
    </member>
    <member name="P:PowerLanguage.IStrategy.InitialCapital">
      <summary>
             Read-only property. Returns 'Initial Capital' from the Strategy Properties window.
            </summary>
    </member>
    <member name="P:PowerLanguage.IStrategy.InterestRate">
      <summary>
            Read-only property. Returns 'Interest Rate' from the Strategy Properties window.
            </summary>
    </member>
    <member name="T:PowerLanguage.IFunctionAbstract">
      <exclude />
    </member>
    <member name="T:PowerLanguage.IFunctionObject`1">
      <summary>
             An interface that describes a function object.
            </summary>
      <typeparam name="T">
             Any type - double, int, string, etc.
             </typeparam>
    </member>
    <member name="P:PowerLanguage.IFunctionObject`1.Value">
      <summary>
             Read-only property, returns value of the function.
            </summary>
    </member>
    <member name="T:PowerLanguage.ExecuteStudyException">
      <exclude />
    </member>
    <member name="M:PowerLanguage.ExecuteStudyException.#ctor">
      <exclude />
    </member>
    <member name="M:PowerLanguage.ExecuteStudyException.#ctor(System.String)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.ExecuteStudyException.#ctor(System.String,System.Exception)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.ExecuteStudyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <exclude />
    </member>
    <member name="T:PowerLanguage.WrongDataNumberException">
      <exclude />
    </member>
    <member name="M:PowerLanguage.WrongDataNumberException.#ctor(System.Int32)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.WrongDataNumberException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.WrongDataNumberException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <exclude />
    </member>
    <member name="P:PowerLanguage.WrongDataNumberException.DataStreamNumber">
      <exclude />
    </member>
    <member name="T:PowerLanguage.WrongInputFormatException">
      <exclude />
    </member>
    <member name="M:PowerLanguage.WrongInputFormatException.#ctor(System.String)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.WrongInputFormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <exclude />
    </member>
    <member name="T:PowerLanguage.DrawingObjectException">
      <summary>
             The exception that is displayed when working with drawings.
            </summary>
    </member>
    <member name="M:PowerLanguage.DrawingObjectException.#ctor(System.Int32)">
      <summary>
             Initializes a new instance of the DrawingObjectException class.
            </summary>
      <param name="errCode">A code that describes the error</param>
    </member>
    <member name="M:PowerLanguage.DrawingObjectException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
      </summary>
    </member>
    <member name="M:PowerLanguage.DrawingObjectException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> with information about the exception.
            </summary>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination. </param>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being displayed. </param>
      <exception cref="T:System.ArgumentNullException">The info parameter is a null reference (Nothing in Visual Basic). </exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter" />
      </PermissionSet>
    </member>
    <member name="P:PowerLanguage.DrawingObjectException.Error">
      <summary>
             Returns error code.
            </summary>
    </member>
    <member name="T:PowerLanguage.TextObjectException">
      <summary>
             The exception that is displayed when working with text objects.
            </summary>
    </member>
    <member name="M:PowerLanguage.TextObjectException.#ctor(System.Int32)">
      <summary>
             Initializes a new instance of the TextObjectException class.
            </summary>
      <param name="errCode">A code that describes the error</param>
    </member>
    <member name="M:PowerLanguage.TextObjectException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
             Initializes a new instance of the TextObjectException class.
            </summary>
    </member>
    <member name="T:PowerLanguage.TrendLineObjectException">
      <summary>
             The exception that is displayed when working with trend line objects.
            </summary>
    </member>
    <member name="M:PowerLanguage.TrendLineObjectException.#ctor(System.Int32)">
      <summary>
             Initializes a new instance of the TrendLineObjectException class.
            </summary>
      <param name="errCode">A code that describes the error</param>
    </member>
    <member name="M:PowerLanguage.TrendLineObjectException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
             Initializes a new instance of the TrendLineObjectException class.
            </summary>
    </member>
    <member name="T:PowerLanguage.ArrowObjectException">
      <summary>
             The exception that is displayed when a "create drawings" error occurs. 
            </summary>
    </member>
    <member name="M:PowerLanguage.ArrowObjectException.#ctor(System.Int32)">
      <summary>
             Initializes a new instance of the ArrowObjectException class. 
            </summary>
      <param name="errCode">
             A code that describes the error. 
             </param>
    </member>
    <member name="M:PowerLanguage.ArrowObjectException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
             Initializes a new instance of the ArrowObjectException class. 
            </summary>
    </member>
    <member name="T:PowerLanguage.WrongContextException">
      <summary>
             The exception that is displayed when a context is wrong. 
            </summary>
    </member>
    <member name="M:PowerLanguage.WrongContextException.#ctor(System.String)">
      <summary>
             Initializes a new instance of the ArrowObjectException class.
            </summary>
    </member>
    <member name="M:PowerLanguage.WrongContextException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
             Initializes a new instance of the ArrowObjectException class. 
            </summary>
    </member>
    <member name="T:PowerLanguage.StrategyOnlyKeywordException">
      <summary>
             The exception that is displayed when a strategy keyword is used outside of a strategy. 
            </summary>
    </member>
    <member name="M:PowerLanguage.StrategyOnlyKeywordException.#ctor">
      <summary>
             Initializes a new instance of the StrategyOnlyKeywordException class.
            </summary>
    </member>
    <member name="M:PowerLanguage.StrategyOnlyKeywordException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
             Initializes a new instance of the StrategyOnlyKeywordException class.
            </summary>
    </member>
    <member name="T:PowerLanguage.StudyRuntimeException">
      <summary>
             The exception that is displayed when a study runtime error occurs. 
            </summary>
    </member>
    <member name="M:PowerLanguage.StudyRuntimeException.#ctor(System.String)">
      <summary>
             Initializes a new instance of the StudyRuntimeException class.
            </summary>
    </member>
    <member name="M:PowerLanguage.StudyRuntimeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
             Initializes a new instance of the StudyRuntimeException class.
            </summary>
    </member>
    <member name="T:PowerLanguage.SymbolNotFoundException">
      <summary>
             The exception displayed when a symbol is not found.
            </summary>
    </member>
    <member name="M:PowerLanguage.SymbolNotFoundException.#ctor(System.String)">
      <summary>
             Initializes a new instance of the SymbolNotFoundException class.
            </summary>
    </member>
    <member name="M:PowerLanguage.SymbolNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
             Initializes a new instance of the SymbolNotFoundException class.
            </summary>
    </member>
    <member name="T:PowerLanguage.SessionNotFoundException">
      <summary>
             The exception displayed when a session is not found.
            </summary>
    </member>
    <member name="M:PowerLanguage.SessionNotFoundException.#ctor(System.String)">
      <summary>
             Initializes a new instance of the SessionNotFoundException class.
            </summary>
    </member>
    <member name="M:PowerLanguage.SessionNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
             Initializes a new instance of the SessionNotFoundException class.
            </summary>
    </member>
    <member name="T:PowerLanguage.ToolBarAction">
      <summary>
            Defines signature of the callback function, which will be called when access to chart's toolbar is requested.
            Contains the toolbar as a parameter to be sent.
            </summary>
      <param name="tb">Chart's toolbar.</param>
    </member>
    <member name="T:PowerLanguage.ICustomToolBar">
      <summary>
            Interface for accessing custom toolbar. 
            </summary>
    </member>
    <member name="M:PowerLanguage.ICustomToolBar.AccessToolBar(PowerLanguage.ToolBarAction)">
      <summary>
            Method for accessing the toolbar.
            </summary>
      <param name="action">
      </param>
    </member>
    <member name="M:PowerLanguage.ICustomToolBar.AccessToolBarAsync(PowerLanguage.ToolBarAction)">
      <summary>
            Method for asynchronous access to the toolbar.
            </summary>
      <param name="action">
      </param>
    </member>
    <member name="P:PowerLanguage.ICustomToolBar.Visible">
      <summary>
            Write-only property. Sets the visibility of the toolbar.
            </summary>
    </member>
    <member name="T:PowerLanguage.CustomToolBar">
      <exclude />
    </member>
    <member name="M:PowerLanguage.CustomToolBar.AddRef">
      <exclude />
    </member>
    <member name="M:PowerLanguage.CustomToolBar.Release">
      <exclude />
    </member>
    <member name="P:PowerLanguage.CustomToolBar.ChartHwnd">
      <exclude />
    </member>
    <member name="P:PowerLanguage.CustomToolBar.Disposed">
      <exclude />
    </member>
    <member name="T:PowerLanguage.CustomToolBarsPool">
      <exclude />
    </member>
    <member name="M:PowerLanguage.CustomToolBarsPool.Get(System.IntPtr)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.CustomToolBarsPool.Free(PowerLanguage.CustomToolBar)">
      <exclude />
    </member>
    <member name="T:PowerLanguage.DataRequestType">
      <summary>
            Enumeration that describes Data Range types in data request objects <see cref="T:PowerLanguage.DataRequest" /></summary>
    </member>
    <member name="F:PowerLanguage.DataRequestType.FromTo">
      <summary>
            From/To requests.
            </summary>
    </member>
    <member name="F:PowerLanguage.DataRequestType.DaysBack">
      <summary>
            Days Back requests.
            </summary>
    </member>
    <member name="F:PowerLanguage.DataRequestType.BarsBack">
      <summary>
            Bars Back Requests.
            </summary>
    </member>
    <member name="T:PowerLanguage.DataRequest">
      <summary>
            Class that describes data requests.
            </summary>
    </member>
    <member name="M:PowerLanguage.DataRequest.Equals(PowerLanguage.DataRequest)">
      <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
      <param name="other">Another object to compare to.</param>
      <returns>true if <paramref name="other" /> and this instance are represent the same value; otherwise, false.</returns>
    </member>
    <member name="M:PowerLanguage.DataRequest.Equals(System.Object)">
      <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
      <returns>
            true if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
      <param name="obj">Another object to compare to. 
                            </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:PowerLanguage.DataRequest.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:PowerLanguage.DataRequest.op_Equality(PowerLanguage.DataRequest,PowerLanguage.DataRequest)">
      <summary>
            Indicates whether two instances are equal.
            </summary>
      <param name="left">One DataRequest object.</param>
      <param name="right">Another DataRequest object.</param>
      <returns>true if both objects are represent the same value; otherwise, false.</returns>
    </member>
    <member name="M:PowerLanguage.DataRequest.op_Inequality(PowerLanguage.DataRequest,PowerLanguage.DataRequest)">
      <summary>
            Indicates whether two instances are not equal.
            </summary>
      <param name="left">One DataRequest object.</param>
      <param name="right">Another DataRequest object.</param>
      <returns>true if one object is not equal another one; otherwise, false.</returns>
    </member>
    <member name="F:PowerLanguage.DataRequest.RequestType">
      <summary>
            Member represents data request type.
            </summary>
    </member>
    <member name="F:PowerLanguage.DataRequest.Count">
      <summary>
            Member represents number of bars or days in BarsBack or DaysBack requests respectively.
            </summary>
    </member>
    <member name="F:PowerLanguage.DataRequest.From">
      <summary>
            Member represents the start point of the request.
            </summary>
    </member>
    <member name="F:PowerLanguage.DataRequest.To">
      <summary>
            Member represents the end point of the request.
            </summary>
    </member>
    <member name="F:PowerLanguage.DataRequest.ToAlwaysIsNow">
      <summary>
            Member shows if the 'To' point value is fixed or floating and is always equal to the current time.
            false - the value is fixed, true - the value is equal to the current time.
            </summary>
    </member>
    <member name="M:PowerLanguage.DataRequest.CreateFromTo(System.DateTime,System.DateTime)">
      <summary>
            Creates From/To data request.
            </summary>
      <param name="_from">Cpecifier for start point of the request.</param>
      <param name="_to">Cpecifier for end point of the request.</param>
      <returns>New DataRequest object.</returns>
    </member>
    <member name="M:PowerLanguage.DataRequest.CreateDaysBack(System.DateTime,System.Int32)">
      <summary>
            Creates Days Back data request.
            </summary>
      <param name="_to">Specifies end point for data request.</param>
      <param name="_days">Specifies number of days back from end point for the request.</param>
      <returns>New DataRequest object.</returns>
    </member>
    <member name="M:PowerLanguage.DataRequest.CreateBarsBack(System.DateTime,System.Int32)">
      <summary>
            Creates Bars Back data request.
            </summary>
      <param name="_to">Specifies end point for data request.</param>
      <param name="_bars">Specifies number of bars back from end point for the request.</param>
      <returns>New DataRequest object.</returns>
    </member>
    <member name="M:PowerLanguage.DataRequest.#ctor(System.DateTime,System.Int32,PowerLanguage.DataRequestType,System.DateTime)">
      <summary>
            Initializes a new instance of the <see cref="T:PowerLanguage.DataRequest" /> class.
            </summary>
      <param name="to">Specifies end point for data request.</param>
      <param name="count">Specifies number of bars or days back from end point for data request.</param>
      <param name="requestType">Specifies data request type.</param>
      <param name="from">Specifies start point for data request.</param>
    </member>
    <member name="T:PowerLanguage.IInstrumentSettings">
      <summary>
             An interface for accessing symbol information.
            </summary>
    </member>
    <member name="P:PowerLanguage.IInstrumentSettings.Name">
      <summary>
             Read-only property. Returns name of the symbol.
            </summary>
    </member>
    <member name="P:PowerLanguage.IInstrumentSettings.DataFeed">
      <summary>
            Read-only property. Returns datafeed name for the symbol.
            </summary>
    </member>
    <member name="P:PowerLanguage.IInstrumentSettings.Description">
      <summary>
            Read-only property. Returns description for the symbol.
            </summary>
    </member>
    <member name="P:PowerLanguage.IInstrumentSettings.Category">
      <summary>
            Read-only property. Returns category of the symbol.
            </summary>
    </member>
    <member name="P:PowerLanguage.IInstrumentSettings.Exchange">
      <summary>
             Read-only property. Returns name of the exchange.
            </summary>
    </member>
    <member name="P:PowerLanguage.IInstrumentSettings.PriceScale">
      <summary>
             Read-only property. Returns symbol’s Price Scale value.
            </summary>
    </member>
    <member name="P:PowerLanguage.IInstrumentSettings.PointValue">
      <summary>
             Read-only property. Returns symbol’s Point Value.
            </summary>
    </member>
    <member name="P:PowerLanguage.IInstrumentSettings.BigPointValue">
      <summary>
             Read-only property. Returns symbol’s Big Point Value.
            </summary>
    </member>
    <member name="P:PowerLanguage.IInstrumentSettings.MinMove">
      <summary>
             Read-only property.  Returns symbol’s Min Movement value.
            </summary>
    </member>
    <member name="P:PowerLanguage.IInstrumentSettings.Resolution">
      <summary>
             Read-only property. Returns symbol’s resolution.
            </summary>
    </member>
    <member name="P:PowerLanguage.IInstrumentSettings.DailyLimit">
      <summary>
             Read-only property. Returns symbol's Daily Limit value.
            </summary>
    </member>
    <member name="P:PowerLanguage.IInstrumentSettings.ASymbolInfo2">
      <summary>
            Read-only property. Returns symbol information as MTPA_MCSymbolInfo2 structure (all fields that are included in this structure).
            </summary>
    </member>
    <member name="P:PowerLanguage.IInstrumentSettings.Expiration">
      <summary>
            Read-only property. Returns symbol expiration date (useful for futures).
            </summary>
    </member>
    <member name="P:PowerLanguage.IInstrumentSettings.TimeZone">
      <summary>
            Read-only property. Returns current time zone for symbol.
            </summary>
    </member>
    <member name="P:PowerLanguage.IInstrumentSettings.QuoteField">
      <summary>
            Read-only property. Returns current quote for symbol (Ask, Bid or Trade).
            </summary>
    </member>
    <member name="P:PowerLanguage.IInstrumentSettings.SessionName">
      <summary>
            Read-only property. Returns current session name for symbol.
            </summary>
    </member>
    <member name="P:PowerLanguage.IInstrumentSettings.StrikePrice">
      <summary>
            Read-only property. Returns strike price for options.
            </summary>
    </member>
    <member name="P:PowerLanguage.IInstrumentSettings.OptionType">
      <summary>
            Read-only property. Returns option's type.
            </summary>
    </member>
    <member name="P:PowerLanguage.IInstrumentSettings.Request">
      <summary>
            Read-only property. Returns data request settings for symbol.
            </summary>
    </member>
    <member name="P:PowerLanguage.IInstrumentSettings.BVO">
      <summary>
            Read-only property. Returns built volume on tick-count or volume.
            </summary>
    </member>
    <member name="P:PowerLanguage.IInstrumentSettings.Margin">
      <summary>
            Read-only property. Returns margin value for symbol.
            </summary>
    </member>
    <member name="T:PowerLanguage.OptionType">
      <summary>
            Enumeration that describes option type.
            </summary>
    </member>
    <member name="F:PowerLanguage.OptionType.Call">
      <summary>
            Option type is CALL
            </summary>
    </member>
    <member name="F:PowerLanguage.OptionType.Put">
      <summary>
            Option type is PUT
            </summary>
    </member>
    <member name="T:PowerLanguage.EResolution">
      <summary>
             Enumeration describing resolution type.
            </summary>
    </member>
    <member name="F:PowerLanguage.EResolution.Tick">
      <summary>
             Tick resolution type.
            </summary>
    </member>
    <member name="F:PowerLanguage.EResolution.Volume">
      <summary>
             Volume resolution type.
            </summary>
    </member>
    <member name="F:PowerLanguage.EResolution.Second">
      <summary>
             Second resolution type.
            </summary>
    </member>
    <member name="F:PowerLanguage.EResolution.Minute">
      <summary>
             Minute resolution type.
            </summary>
    </member>
    <member name="F:PowerLanguage.EResolution.Hour">
      <summary>
             Hour resolution type.
            </summary>
    </member>
    <member name="F:PowerLanguage.EResolution.Day">
      <summary>
             Day resolution type.
            </summary>
    </member>
    <member name="F:PowerLanguage.EResolution.Week">
      <summary>
             Week resolution type.
            </summary>
    </member>
    <member name="F:PowerLanguage.EResolution.Month">
      <summary>
             Month resolution type.
            </summary>
    </member>
    <member name="F:PowerLanguage.EResolution.Year">
      <summary>
             Year resolution type.
            </summary>
    </member>
    <member name="F:PowerLanguage.EResolution.Quarter">
      <summary>
             Quarter resolution type.
            </summary>
    </member>
    <member name="F:PowerLanguage.EResolution.Points">
      <summary>
             Points resolution type.
            </summary>
    </member>
    <member name="F:PowerLanguage.EResolution.Change">
      <summary>
             Change resolution type.
            </summary>
    </member>
    <member name="F:PowerLanguage.EResolution.OrigPoints">
      <summary>
             OrigPoints resolution type.
            </summary>
    </member>
    <member name="T:PowerLanguage.ChartType">
      <summary>
            Enumeration that describes chart types of instruments.
            </summary>
    </member>
    <member name="F:PowerLanguage.ChartType.Regular">
      <summary>
            Regular chart type
            </summary>
    </member>
    <member name="F:PowerLanguage.ChartType.PointAndFigure">
      <summary>
             PointAndFigure chart type.
            </summary>
    </member>
    <member name="F:PowerLanguage.ChartType.Kagi">
      <summary>
             Kagi chart type.
            </summary>
    </member>
    <member name="F:PowerLanguage.ChartType.Renko">
      <summary>
             Renko chart type.
            </summary>
    </member>
    <member name="F:PowerLanguage.ChartType.LineBreak">
      <summary>
             LineBreak chart type.
            </summary>
    </member>
    <member name="F:PowerLanguage.ChartType.HeikinAshi">
      <summary>
             HeikinAshi chart type.
            </summary>
    </member>
    <member name="F:PowerLanguage.ChartType.FootPrint">
      <summary>
            FootPrint chart type.
            </summary>
    </member>
    <member name="F:PowerLanguage.ChartType.CumulativeDelta">
      <summary>
            CumulativeDelta chart type.
            </summary>
    </member>
    <member name="T:PowerLanguage.ChartTypeCommonOptions">
      <summary>
            Enumeration represents common options for not regular chart types.
            </summary>
    </member>
    <member name="F:PowerLanguage.ChartTypeCommonOptions.BREAK_ON_SESSION">
      <summary>
            Break on session.
            </summary>
    </member>
    <member name="T:PowerLanguage.PointAndFigureOptions">
      <summary>
            Enumeration represents options for Point And Figure chart type.
            </summary>
    </member>
    <member name="F:PowerLanguage.PointAndFigureOptions.BOXSIZE">
      <summary>
            Bos size.
            </summary>
    </member>
    <member name="F:PowerLanguage.PointAndFigureOptions.REVERSAL">
      <summary>
            Reversal.
            </summary>
    </member>
    <member name="F:PowerLanguage.PointAndFigureOptions.BASIS">
      <summary>
            Base for point and figures.
            </summary>
    </member>
    <member name="T:PowerLanguage.PointAndFigureBasis">
      <summary>
            Enumeration represents whether on Close or High/Low "Point And Figure" chart will be based on.
            </summary>
    </member>
    <member name="F:PowerLanguage.PointAndFigureBasis.Close">
      <summary>
            Chart based on Close values.
            </summary>
    </member>
    <member name="F:PowerLanguage.PointAndFigureBasis.HighLow">
      <summary>
            Chart based on High and Low values.
            </summary>
    </member>
    <member name="T:PowerLanguage.KagiReversalType">
      <summary>
             Enumeration represents the reversal type of Kagi chart.
            </summary>
    </member>
    <member name="F:PowerLanguage.KagiReversalType.FIXEDPRICE">
      <summary>
             Fixed price reversal.
            </summary>
    </member>
    <member name="F:PowerLanguage.KagiReversalType.PERCENT">
      <summary>
             Percent reversal.
            </summary>
    </member>
    <member name="T:PowerLanguage.KagiOptions">
      <summary>
             Enumeration represents options for Kagi chart type.
            </summary>
    </member>
    <member name="F:PowerLanguage.KagiOptions.REVERSAL_VALUE">
      <summary>
             Reversal fixed.
            </summary>
    </member>
    <member name="F:PowerLanguage.KagiOptions.REVERSAL_TYPE">
      <summary>
             Reversal type.
            </summary>
    </member>
    <member name="F:PowerLanguage.KagiOptions.REVERSAL_PERCENT">
      <summary>
             Reversal percent.
            </summary>
    </member>
    <member name="T:PowerLanguage.RenkoBoxSizeType">
      <summary>
             Enumeration represents the renko boxsize value type 
            </summary>
    </member>
    <member name="F:PowerLanguage.RenkoBoxSizeType.FIXEDPRICE">
      <summary>
             Box size is the fixed value.
            </summary>
    </member>
    <member name="F:PowerLanguage.RenkoBoxSizeType.PERCENT">
      <summary>
             Box size in percents.
            </summary>
    </member>
    <member name="T:PowerLanguage.RenkoOptions">
      <summary>
             Enumeration represents options for Renko chart type.
            </summary>
    </member>
    <member name="F:PowerLanguage.RenkoOptions.BOXSIZE">
      <summary>
             Bos size value.
            </summary>
    </member>
    <member name="F:PowerLanguage.RenkoOptions.SHOW_FANTOM_BAR">
      <summary>
             Show 'phantom' bars.
            </summary>
    </member>
    <member name="F:PowerLanguage.RenkoOptions.SHOW_WICK">
      <summary>
             Show wick.
            </summary>
    </member>
    <member name="F:PowerLanguage.RenkoOptions.SHOW_REAL_OPEN">
      <summary>
             Show real open.
            </summary>
    </member>
    <member name="F:PowerLanguage.RenkoOptions.BOXSIZE_TYPE">
      <summary>
             Box size value type.
            </summary>
    </member>
    <member name="T:PowerLanguage.LineBreakOptions">
      <summary>
             Enumeration represents options for LineBreak chart type.
            </summary>
    </member>
    <member name="F:PowerLanguage.LineBreakOptions.LINE_BREAK_COUNT">
      <summary>
             Line Break count.
            </summary>
    </member>
    <member name="T:PowerLanguage.FootPrintChartType">
      <summary>
             Enumeration represents the base elements type for Volume Delta chart type.
            </summary>
    </member>
    <member name="F:PowerLanguage.FootPrintChartType.BID_ASK_VOL">
      <summary>
             Volume Delta is constructed by Bid x Ask volume.
            </summary>
    </member>
    <member name="F:PowerLanguage.FootPrintChartType.TOTAL_VOL">
      <summary>
             Volume Delta is constructed by Total volume.
            </summary>
    </member>
    <member name="F:PowerLanguage.FootPrintChartType.DELTA_ASK_BID_VOL">
      <summary>
             Volume Delta is constructed by Delta (Ask volume - Bid volume).
            </summary>
    </member>
    <member name="T:PowerLanguage.CumulativeDeltaChartType">
      <summary>
             Enumeration represents Breakdown type for Cumulative Delta and Volume Delta chart types.
            </summary>
    </member>
    <member name="F:PowerLanguage.CumulativeDeltaChartType.NOTHING">
      <summary>
      </summary>
    </member>
    <member name="F:PowerLanguage.CumulativeDeltaChartType.ASK_TRADE_BID_TRADE">
      <summary>
             Breakdown by Ask Traded vs Bid Traded.
            </summary>
    </member>
    <member name="F:PowerLanguage.CumulativeDeltaChartType.DELTA_UP_TICK_DOWN_TICK">
      <summary>
             Breakdown by Up tick vs Down Tick. 
            </summary>
    </member>
    <member name="T:PowerLanguage.FootPrintAttributes">
      <summary>
             Enumeration represents options for Volume Delta chart type.
            </summary>
    </member>
    <member name="F:PowerLanguage.FootPrintAttributes.CHART_TYPE">
      <summary>
             Base element for Volume Delta.
            </summary>
    </member>
    <member name="F:PowerLanguage.FootPrintAttributes.PRINT_SHOW_PERCENT">
      <summary>
             Displayed as a percentage.
            </summary>
    </member>
    <member name="T:PowerLanguage.CumulativeDeltaAttributes">
      <summary>
             Enumeration represents options for Cumulative Delta and Volume Delta chart types.
            </summary>
    </member>
    <member name="F:PowerLanguage.CumulativeDeltaAttributes.CHART_TYPE">
      <summary>
             Breakdown type for Cumulative Delta.
            </summary>
    </member>
    <member name="T:PowerLanguage.Resolution">
      <summary>
             The structure that defines a resolution.
            </summary>
    </member>
    <member name="M:PowerLanguage.Resolution.#ctor(PowerLanguage.EResolution,System.UInt32)">
      <summary>
             Initializes a new instance of the <see cref="T:PowerLanguage.Resolution" /> object.
            </summary>
      <param name="type">Resolution type.</param>
      <param name="size">Resolution size.</param>
    </member>
    <member name="M:PowerLanguage.Resolution.CreatePointAndFigure(PowerLanguage.EResolution,System.UInt32,System.Double,System.Int32,PowerLanguage.PointAndFigureBasis,System.Boolean)">
      <summary>
            Creates new instance of Point and Figure <see cref="T:PowerLanguage.Resolution" /> object.
            </summary>
      <param name="based_res_type">Resolution type.</param>
      <param name="based_res_size">Resolution size.</param>
      <param name="box_size">Box size.</param>
      <param name="reversal">Reversal.</param>
      <param name="_basis">Point and Figure basis.</param>
      <param name="break_on_session">Break on session.</param>
      <returns>New <see cref="T:PowerLanguage.Resolution" /> instance.</returns>
    </member>
    <member name="M:PowerLanguage.Resolution.CreateKagi(PowerLanguage.EResolution,System.UInt32,PowerLanguage.KagiReversalType,System.Double,System.Double,System.Boolean)">
      <summary>
             Creates new instance of Kagi <see cref="T:PowerLanguage.Resolution" /> object.
            </summary>
      <param name="based_res_type">Resolution type.</param>
      <param name="based_res_size">Resolution size.</param>
      <param name="Type">Kagi reversal type.</param>
      <param name="Reversal">Kagi reversal fixed value.</param>
      <param name="ReversalAsPercent">Kagi reversal value in percents.</param>
      <param name="break_on_session">Break on session.</param>
      <returns>New <see cref="T:PowerLanguage.Resolution" /> instance.</returns>
    </member>
    <member name="M:PowerLanguage.Resolution.CreateRenko(PowerLanguage.EResolution,System.UInt32,PowerLanguage.RenkoBoxSizeType,System.Double,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
             Creates new instance of Renko <see cref="T:PowerLanguage.Resolution" /> object.
            </summary>
      <param name="based_res_type">Resolution type.</param>
      <param name="based_res_size">Resolution size.</param>
      <param name="Type">Box Size type.</param>
      <param name="BoxSize">Box Size value.</param>
      <param name="break_on_session">Break on session.</param>
      <param name="show_fantom_bars">Show 'Phantom' bars.</param>
      <param name="show_wick">Show wick.</param>
      <param name="show_real_open">Show real open.</param>
      <returns>New <see cref="T:PowerLanguage.Resolution" /> instance.</returns>
    </member>
    <member name="M:PowerLanguage.Resolution.CreateLineBreak(PowerLanguage.EResolution,System.UInt32,System.Int32,System.Boolean)">
      <summary>
             Creates new instance of Line Break <see cref="T:PowerLanguage.Resolution" /> object.
            </summary>
      <param name="based_res_type">Resolution type.</param>
      <param name="based_res_size">Resolution size.</param>
      <param name="line_break_count">Line Breaks count.</param>
      <param name="break_on_session">Break on session.</param>
      <returns>New <see cref="T:PowerLanguage.Resolution" /> instance.</returns>
    </member>
    <member name="M:PowerLanguage.Resolution.CreateHeikinAshi(PowerLanguage.EResolution,System.UInt32,System.Boolean)">
      <summary>
             Creates new instance of Heikin-Ashi <see cref="T:PowerLanguage.Resolution" /> object.
            </summary>
      <param name="based_res_type">Resolution type.</param>
      <param name="based_res_size">Resolution size.</param>
      <param name="break_on_session">Break on session.</param>
      <returns>New <see cref="T:PowerLanguage.Resolution" /> instance.</returns>
    </member>
    <member name="M:PowerLanguage.Resolution.CreateFootPrint(PowerLanguage.EResolution,System.UInt32,PowerLanguage.CumulativeDeltaChartType,PowerLanguage.FootPrintChartType,System.Boolean)">
      <summary>
             Creates new instance of Volume Delta <see cref="T:PowerLanguage.Resolution" /> object.
            </summary>
      <param name="based_res_type">Resolution type.</param>
      <param name="based_res_size">Resolution size.</param>
      <param name="cum_delta_chart_type">Breakdown by: ... (Ack vs Bid, UpTicks vs DownTicks). <see cref="T:PowerLanguage.CumulativeDeltaChartType" /></param>
      <param name="foot_print_chart_type">Show Volume as: ... (Bid/Ask, Total, Delta). <see cref="T:PowerLanguage.FootPrintChartType" /></param>
      <param name="disp_as_percentage">Displayed as a percentage.</param>
      <returns>New <see cref="T:PowerLanguage.Resolution" /> instance.</returns>
    </member>
    <member name="M:PowerLanguage.Resolution.CreateCumulativeDelta(PowerLanguage.EResolution,System.UInt32,PowerLanguage.CumulativeDeltaChartType,System.Boolean)">
      <summary>
             Creates new instance of Cumulative Delta <see cref="T:PowerLanguage.Resolution" /> object.
            </summary>
      <param name="based_res_type">Resolution type.</param>
      <param name="based_res_size">Resolution size.</param>
      <param name="cum_delta_chart_type">Breakdown by: ... (Ack vs Bid, UpTicks vs DownTicks). <see cref="T:PowerLanguage.CumulativeDeltaChartType" /></param>
      <param name="break_on_session">Break on session.</param>
      <returns>New <see cref="T:PowerLanguage.Resolution" /> instance.</returns>
    </member>
    <member name="P:PowerLanguage.Resolution.Type">
      <summary>
             Read-write property. Resolution type.
            </summary>
    </member>
    <member name="P:PowerLanguage.Resolution.Size">
      <summary>
             Read-write property. Resolution size.
            </summary>
    </member>
    <member name="P:PowerLanguage.Resolution.ChartType">
      <summary>
            Read-write property. Resolution chart type.
            </summary>
    </member>
    <member name="P:PowerLanguage.Resolution.Attributes">
      <summary>
            Read-write property. Resolution attributes.
            </summary>
    </member>
    <member name="T:PowerLanguage.Instrument">
      <exclude />
    </member>
    <member name="M:PowerLanguage.Instrument.#ctor(System.String,System.String,System.String,System.String,System.DateTime,System.Double,System.Double,System.Double,PowerLanguage.Resolution,System.Double,System.String,PowerLanguage.ESymbolCategory,System.Double,PowerLanguage.OptionType)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.Instrument.#ctor(System.String,System.String,System.String,System.String,System.DateTime,System.Double,System.Double,System.Double,PowerLanguage.Resolution,System.Double,System.String,PowerLanguage.ESymbolCategory,PowerLanguage.RequestTimeZone,PowerLanguage.RequestQuoteField,System.String,System.Double,PowerLanguage.OptionType)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.Instrument.#ctor(System.String,System.String,System.String,System.String,System.DateTime,System.Double,System.Double,System.Double,PowerLanguage.Resolution,System.Double,System.String,PowerLanguage.ESymbolCategory,PowerLanguage.RequestTimeZone,PowerLanguage.RequestQuoteField,System.String,PowerLanguage.DataRequest,System.Double,PowerLanguage.OptionType,PowerLanguage.BuildVolumeOn,System.Double)">
      <exclude />
    </member>
    <member name="P:PowerLanguage.Instrument.Name">
      <exclude />
    </member>
    <member name="P:PowerLanguage.Instrument.DataFeed">
      <exclude />
    </member>
    <member name="P:PowerLanguage.Instrument.Category">
      <exclude />
    </member>
    <member name="P:PowerLanguage.Instrument.Exchange">
      <exclude />
    </member>
    <member name="P:PowerLanguage.Instrument.Root">
      <exclude />
    </member>
    <member name="P:PowerLanguage.Instrument.Description">
      <exclude />
    </member>
    <member name="P:PowerLanguage.Instrument.Expiration">
      <exclude />
    </member>
    <member name="P:PowerLanguage.Instrument.TimeZone">
      <exclude />
    </member>
    <member name="P:PowerLanguage.Instrument.QuoteField">
      <exclude />
    </member>
    <member name="P:PowerLanguage.Instrument.SessionName">
      <exclude />
    </member>
    <member name="P:PowerLanguage.Instrument.StrikePrice">
      <exclude />
    </member>
    <member name="P:PowerLanguage.Instrument.OptionType">
      <exclude />
    </member>
    <member name="P:PowerLanguage.Instrument.Request">
      <exclude />
    </member>
    <member name="P:PowerLanguage.Instrument.BVO">
      <exclude />
    </member>
    <member name="P:PowerLanguage.Instrument.PriceScale">
      <exclude />
    </member>
    <member name="P:PowerLanguage.Instrument.PointValue">
      <exclude />
    </member>
    <member name="P:PowerLanguage.Instrument.PriceStep">
      <exclude />
    </member>
    <member name="P:PowerLanguage.Instrument.BigPointValue">
      <exclude />
    </member>
    <member name="P:PowerLanguage.Instrument.MinMove">
      <exclude />
    </member>
    <member name="P:PowerLanguage.Instrument.Resolution">
      <exclude />
    </member>
    <member name="P:PowerLanguage.Instrument.DailyLimit">
      <exclude />
    </member>
    <member name="T:PowerLanguage.EDrawPhases">
      <summary>
            Enumeration describing chart drawing phases.
            </summary>
    </member>
    <member name="F:PowerLanguage.EDrawPhases.AfterBGFill">
      <summary>
            Phase after background filled.
            </summary>
    </member>
    <member name="F:PowerLanguage.EDrawPhases.BeforeBGShapes">
      <summary>
            Phase after grid is drawn, but before background figures are drawn (circles, ellipses, etc.)
            </summary>
    </member>
    <member name="F:PowerLanguage.EDrawPhases.BeforeSeries">
      <summary>
            Phase after background figures are drawn, but before data series (bars) are drawn, and before indicators (plots) are drawn.
            </summary>
    </member>
    <member name="F:PowerLanguage.EDrawPhases.BeforeFGShapes">
      <summary>
            Phase after series and plots are drawn, but before foreground figures (trendlines, text, etc.)are drawn.
            </summary>
    </member>
    <member name="F:PowerLanguage.EDrawPhases.Final">
      <summary>
            Phase after everything is drawn.
            </summary>
    </member>
    <member name="T:PowerLanguage.IDrawDataEnviroment">
      <summary>
            An interface for accessing "Draw" data environment. 
            </summary>
    </member>
    <member name="M:PowerLanguage.IDrawDataEnviroment.Point2ChartPoint(System.Drawing.PointF)">
      <summary>
            Convert "System Point" to "Chart Point".
            </summary>
      <param name="p">System Point value.</param>
      <returns>Chart Point value.</returns>
    </member>
    <member name="M:PowerLanguage.IDrawDataEnviroment.ChartPoint2Point(PowerLanguage.ChartPoint)">
      <summary>
            Convert "Chart Point" to "System Point".
            </summary>
      <param name="p">Chart point value.</param>
      <returns>System Point value.</returns>
    </member>
    <member name="M:PowerLanguage.IDrawDataEnviroment.BarIndex2PointX(System.UInt32)">
      <summary>
            Return "System.Point.X" for bar by "index"
            </summary>
      <param name="index">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:PowerLanguage.IDrawDataEnviroment.PointX2BarIndex(System.Int32)">
      <summary>
            Return nearest bar "index" for "System.Point.X"
            </summary>
      <param name="X">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:PowerLanguage.IDrawDataEnviroment.Bars">
      <summary>
            Read-only property. Returns "Draw" symbol bars.
            </summary>
    </member>
    <member name="P:PowerLanguage.IDrawDataEnviroment.StatusLine">
      <summary>
            Read-only property. Returns symbol's status line.
            </summary>
    </member>
    <member name="T:PowerLanguage.IDrawSymbolBars">
      <summary>
            An interface for accessing "Draw" symbol bars. 
            </summary>
    </member>
    <member name="M:PowerLanguage.IDrawSymbolBars.Get(System.DateTime,System.DateTime,PowerLanguage.Bar[]@)">
      <summary>
            Get bar array for specified DateTime range.
            </summary>
      <param name="from">"From" date.</param>
      <param name="to">"To" date.</param>
      <param name="bars">The resulting bar array.</param>
    </member>
    <member name="M:PowerLanguage.IDrawSymbolBars.Get(System.UInt32,PowerLanguage.Bar[]@)">
      <summary>
            Get bar array.
            </summary>
      <param name="from">"From" value.</param>
      <param name="bars">The resulting bar array.</param>
    </member>
    <member name="M:PowerLanguage.IDrawSymbolBars.Get(System.UInt32,System.UInt32,PowerLanguage.Bar[]@)">
      <summary>
            Get bar array.
            </summary>
      <param name="from">"From" value.</param>
      <param name="to">"To" value.</param>
      <param name="bars">The resulting bar array.</param>
    </member>
    <member name="M:PowerLanguage.IDrawSymbolBars.GetIndexByTime(System.DateTime)">
      <summary>
            Returns index of the bar with the specified time.
            If there is no bar with specified time, GetIndexByTime will return the closest index to the left of the specified time.
            If there is no index to the left of the specified time, then the closest index from the right will be returned. 
            </summary>
      <param name="dt">DateTime value.</param>
      <returns>Index of the bar with the specified time.</returns>
    </member>
    <member name="P:PowerLanguage.IDrawSymbolBars.Count">
      <summary>
            Read-only property. Returns "Draw" symbol bars count.
            </summary>
    </member>
    <member name="P:PowerLanguage.IDrawSymbolBars.PureCount">
      <summary>
            Read-only property. Returns "Draw" pure symbol bars count.
            If playback is turned on, Count returns current series size based on start playback point.
            PureCount returns original series size independent from start playback point.
            </summary>
    </member>
    <member name="P:PowerLanguage.IDrawSymbolBars.Item(System.UInt32)">
      <summary>
            Read-only property.  Returns information referencing a bar that is located a specified number of bars back from the current bar. 
            </summary>
      <param name="i">
      </param>
    </member>
    <member name="P:PowerLanguage.IDrawSymbolBars.All">
      <summary>
            Read-only property. Returns all bars.
            </summary>
    </member>
    <member name="T:PowerLanguage._IDrawSymbolBarsExtensions">
      <exclude />
    </member>
    <member name="M:PowerLanguage._IDrawSymbolBarsExtensions.Last(PowerLanguage.IDrawSymbolBars)">
      <summary>
            Returns last bar.
            </summary>
      <param name="_this">
      </param>
      <returns>Last Bar.</returns>
    </member>
    <member name="M:PowerLanguage._IDrawSymbolBarsExtensions.First(PowerLanguage.IDrawSymbolBars)">
      <summary>
            Returns first bar.
            </summary>
      <param name="_this">
      </param>
      <returns>First bar.</returns>
    </member>
    <member name="T:PowerLanguage.DrawContext">
      <summary>
            Structure containing information necessary for drawing on the chart.
            </summary>
    </member>
    <member name="F:PowerLanguage.DrawContext.graphics">
      <summary>
            Handle for drawing. 
            </summary>
    </member>
    <member name="F:PowerLanguage.DrawContext.FullRect">
      <summary>
            Entire chart area.
            </summary>
    </member>
    <member name="F:PowerLanguage.DrawContext.DrawRect">
      <summary>
            Chart area that will be drawn in.
            </summary>
    </member>
    <member name="F:PowerLanguage.DrawContext.DirtyRect">
      <summary>
            Chart area that needs to be re-drawn, i.e. which you modified.
            </summary>
    </member>
    <member name="F:PowerLanguage.DrawContext.ReDraw">
      <summary>
            Set to "true" if full chart redraw needed.
            </summary>
    </member>
    <member name="F:PowerLanguage.DrawContext.FinalDraw">
      <summary>
            Returns "true" if this is the final redraw. 
            I.e. there won't be any more redrawings due to changes in DirtyRect. 
            </summary>
    </member>
    <member name="F:PowerLanguage.DrawContext.Environment">
      <summary>
            Provides methods for converting <see cref="T:PowerLanguage.ChartPoint" /> into <see cref="T:System.Drawing.PointF" /> and back.
            Gives access to information about drawings on bars. <see cref="T:PowerLanguage.IDrawSymbolBars" />.
            </summary>
    </member>
    <member name="F:PowerLanguage.DrawContext.BackGround">
      <summary>
            Returns chart background color.
            </summary>
    </member>
    <member name="M:PowerLanguage.DrawContext.#ctor(System.IntPtr,System.Drawing.RectangleF,System.Drawing.RectangleF,PowerLanguage.IDrawDataEnviroment,System.Boolean,System.Drawing.Color)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.DrawContext.Free">
      <exclude />
    </member>
    <member name="T:PowerLanguage.IChartCustomDrawer">
      <summary>
            Interface for custom drawing.
            This interface realizes a class that can add drawings to the chart at different stages.
            </summary>
    </member>
    <member name="M:PowerLanguage.IChartCustomDrawer.Draw(PowerLanguage.DrawContext,PowerLanguage.EDrawPhases)">
      <summary>
            !IMPORTANT! This interface is called from the main thread,
            while indicators and signals calculate in work threads.
            If implementing class for this interface needs data generated
            during calculation of studies, you need to guarantee thread-safe 
            access to that data.
            </summary>
      <param name="context">
            Contains information for drawing.
            !IMPORANT! Context exists only until exiting the method. DO NOT SAVE!
            </param>
      <param name="phase">
            Current drawing phase.
            </param>
    </member>
    <member name="T:PowerLanguage.IChartCustomDrawRegistrator">
      <summary>
            Interface for adding/deleting custom drawers.
            </summary>
    </member>
    <member name="M:PowerLanguage.IChartCustomDrawRegistrator.Register(PowerLanguage.IChartCustomDrawer)">
      <summary>
            Adds drawers. Registers the interface for drawing on chart.
            <remarks>Each <see cref="M:PowerLanguage.IChartCustomDrawRegistrator.Register(PowerLanguage.IChartCustomDrawer)" /> call must have an associated
            <see cref="M:PowerLanguage.IChartCustomDrawRegistrator.Unregister(PowerLanguage.IChartCustomDrawer)" /> call when finishing working with drawings.
            </remarks></summary>
      <param name="drawer">Drawing interface.</param>
    </member>
    <member name="M:PowerLanguage.IChartCustomDrawRegistrator.Unregister(PowerLanguage.IChartCustomDrawer)">
      <summary>
            Deletes drawers. Unregisters the interface for drawing on chart.
            <remarks>Each <see cref="M:PowerLanguage.IChartCustomDrawRegistrator.Register(PowerLanguage.IChartCustomDrawer)" /> call must have an associated
            <see cref="M:PowerLanguage.IChartCustomDrawRegistrator.Unregister(PowerLanguage.IChartCustomDrawer)" /> call when finishing working with drawings.
            </remarks></summary>
      <param name="drawer">
      </param>
    </member>
    <member name="M:PowerLanguage.IChartCustomDrawRegistrator.ReDraw">
      <summary>
            Redraws custom drawings.
            </summary>
    </member>
    <member name="P:PowerLanguage.IChartCustomDrawRegistrator.Environment">
      <summary>
            Return interface for access to drawing environment.
            </summary>
    </member>
    <member name="T:PowerLanguage.ChartCustomDrawRegistrator">
      <exclude />
    </member>
    <member name="T:PowerLanguage.IROList`1">
      <summary>
             Base interface for the read-only list.
            </summary>
      <typeparam name="T">
             Any type - double, int, string, etc. 
             </typeparam>
    </member>
    <member name="P:PowerLanguage.IROList`1.Count">
      <summary>
             Read-only property. Returns the count of read-only list.
            </summary>
    </member>
    <member name="P:PowerLanguage.IROList`1.Item(System.Int32)">
      <summary>
             Returns the read-only list item at specified index.
            </summary>
      <param name="idx">Item index.</param>
    </member>
    <member name="T:PowerLanguage.IROListObjectEx`1">
      <summary>
             An interface describing enumerable read-only list. 
            </summary>
      <typeparam name="T">Any type - double, int, string, etc. </typeparam>
    </member>
    <member name="P:PowerLanguage.IROListObjectEx`1.Items">
      <summary>
             Read-only property. Returns list of items.
            </summary>
    </member>
    <member name="T:PowerLanguage.IOutput">
      <summary>
             An interface for accessing the Output Window.
            </summary>
    </member>
    <member name="M:PowerLanguage.IOutput.Write(System.String,System.Object[])">
      <summary>
             A method that outputs to Output Window the resulting string of '_args' arguments 
             application to '_format' formatting string.
            </summary>
      <param name="format">Format string.</param>
      <param name="args">Arguments.</param>
    </member>
    <member name="M:PowerLanguage.IOutput.WriteLine(System.String,System.Object[])">
      <summary>
             A method that outputs to Output Window the resulting string 
             of the '_args'  arguments application to the '_format' formatting string and 
             then positions the cursor on a new line.
            </summary>
      <param name="format">Format string.</param>
      <param name="args">Arguments.</param>
    </member>
    <member name="M:PowerLanguage.IOutput.Clear">
      <summary>
             A method for cleaning the Output Window.
            </summary>
    </member>
    <member name="T:PowerLanguage.IAlert">
      <summary>
             An interface for working with alerts.
            </summary>
    </member>
    <member name="M:PowerLanguage.IAlert.Alert">
      <summary>
             A method that displays an alert.
            </summary>
    </member>
    <member name="M:PowerLanguage.IAlert.Alert(System.String,System.Object[])">
      <summary>
             A method that displays an alert with a resulting string of '_args' 
             arguments application to '_format' formatting string.
            </summary>
      <param name="format">
      </param>
      <param name="_args">
      </param>
    </member>
    <member name="M:PowerLanguage.IAlert.Cancel">
      <summary>
             A method for cancelling an alert generated on a current bar.
            </summary>
    </member>
    <member name="P:PowerLanguage.IAlert.Enabled">
      <summary>
             Read-only property. 
             Indicates whether a study’s alert is in enabled state.
            </summary>
    </member>
    <member name="P:PowerLanguage.IAlert.CheckAlertLastBar">
      <summary>
             Read-only property.
             Indicates whether an alert can be generated on the last bar.
             For all but the last bar returns 'false'.
            </summary>
    </member>
    <member name="T:PowerLanguage.IStudyControl">
      <exclude />
    </member>
    <member name="M:PowerLanguage.IStudyControl.GetIndexer(System.Int32)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.IStudyControl.AddVariable(PowerLanguage.IVariablesControl,System.Int32)">
      <exclude />
    </member>
    <member name="M:PowerLanguage.IStudyControl.AddFunction(PowerLanguage.IFunctionAbstract)">
      <exclude />
    </member>
    <member name="P:PowerLanguage.IStudyControl.StudyDataNumber">
      <exclude />
    </member>
    <member name="T:PowerLanguage.IExpertCommentary">
      <summary>
            Expert commentary.
            </summary>
    </member>
    <member name="M:PowerLanguage.IExpertCommentary.Write(System.String,System.Object[])">
      <summary>
            Write commentary text for current bar.
            </summary>
      <param name="format">
            Format string.
            </param>
      <param name="_args">
            Arguments for format string.
            </param>
    </member>
    <member name="M:PowerLanguage.IExpertCommentary.WriteLine(System.String,System.Object[])">
      <summary>
            Write commentary text for current bar with line terminator.
            </summary>
      <param name="format">
            Format string.
            </param>
      <param name="_args">
            Arguments for format string.
            </param>
    </member>
    <member name="P:PowerLanguage.IExpertCommentary.Enabled">
      <summary>
            Return true if expert commentary mode is active.
            </summary>
    </member>
    <member name="P:PowerLanguage.IExpertCommentary.AtCommentaryBar">
      <summary>
            Return 'true' if this bar was selected by user in expert commentary mode.
            </summary>
    </member>
    <member name="T:PowerLanguage.ESymbolCategory">
      <summary>
             Enumeration describing Symbol Category. 
            </summary>
    </member>
    <member name="F:PowerLanguage.ESymbolCategory.None">
      <summary>
            "None" symbol category.
            </summary>
    </member>
    <member name="F:PowerLanguage.ESymbolCategory.Future">
      <summary>
            "Futures" symbol category.
            </summary>
    </member>
    <member name="F:PowerLanguage.ESymbolCategory.FutureOption">
      <summary>
            "Futures Option" symbol category.
            </summary>
    </member>
    <member name="F:PowerLanguage.ESymbolCategory.Stock">
      <summary>
            "Stock" symbol category.
            </summary>
    </member>
    <member name="F:PowerLanguage.ESymbolCategory.StockOption">
      <summary>
            "Stock Option" symbol category.
            </summary>
    </member>
    <member name="F:PowerLanguage.ESymbolCategory.Index">
      <summary>
            "Index" symbol category.
            </summary>
    </member>
    <member name="F:PowerLanguage.ESymbolCategory.CurrOption">
      <summary>
            "Currency Option" symbol category.
            </summary>
    </member>
    <member name="F:PowerLanguage.ESymbolCategory.IndexOption">
      <summary>
            "Index Option" symbol category.
            </summary>
    </member>
    <member name="F:PowerLanguage.ESymbolCategory.Cash">
      <summary>
            "Cash Option" symbol category.
            </summary>
    </member>
    <member name="F:PowerLanguage.ESymbolCategory.Bond">
      <summary>
            "Bond" symbol category.
            </summary>
    </member>
    <member name="F:PowerLanguage.ESymbolCategory.Spread">
      <summary>
            "Spread" symbol category.
            </summary>
    </member>
    <member name="F:PowerLanguage.ESymbolCategory.Forex">
      <summary>
            "Forex" symbol category.
            </summary>
    </member>
    <member name="F:PowerLanguage.ESymbolCategory.FutureRolover">
      <summary>
            "Futures Rollover" symbol category.
            </summary>
    </member>
    <member name="F:PowerLanguage.ESymbolCategory.Commodity">
      <summary>
            "Commodity" symbol category.
            </summary>
    </member>
    <member name="T:PowerLanguage.ESymbolSettingsType">
      <summary>
             Enumeration describing settings types.
            </summary>
    </member>
    <member name="F:PowerLanguage.ESymbolSettingsType.Custom">
      <summary>
            Custom settings
            </summary>
    </member>
    <member name="F:PowerLanguage.ESymbolSettingsType.Exchange">
      <summary>
            exchange settings
            </summary>
    </member>
    <member name="F:PowerLanguage.ESymbolSettingsType.Dictionary">
      <summary>
            Symbol Dictionary settings (for futures)
            </summary>
    </member>
    <member name="T:PowerLanguage.ROList`1">
      <exclude />
    </member>
    <member name="P:PowerLanguage.ROList`1.Items">
      <exclude />
    </member>
    <member name="P:PowerLanguage.ROList`1.Count">
      <exclude />
    </member>
    <member name="P:PowerLanguage.ROList`1.Item(System.Int32)">
      <exclude />
    </member>
    <member name="T:PowerLanguage.ICalculationInfo">
      <summary>
             An interface for accessing current execution context.
            </summary>
    </member>
    <member name="P:PowerLanguage.ICalculationInfo.BaseDataNumber">
      <summary>
             Read-only property. Returns the number of base data stream.
            </summary>
    </member>
    <member name="P:PowerLanguage.ICalculationInfo.CurrentDataNumber">
      <summary>
             Read-only property. Returns the number of current data stream.
            </summary>
    </member>
    <member name="P:PowerLanguage.ICalculationInfo.ExecOffset">
      <summary>
             Read-only property. Returns the offset of the bars for execution.
            </summary>
    </member>
    <member name="P:PowerLanguage.ICalculationInfo.MaxBarsBack">
      <summary>
             Property. Maximum number of bars "backward".
            </summary>
    </member>
    <member name="P:PowerLanguage.ICalculationInfo.MaxBarsForward">
      <summary>
             Read-only property. Returns maximum number of bars "forward".
            </summary>
    </member>
    <member name="T:PowerLanguage.ICalculationControl">
      <summary>
             An interface for  controlling study calculations.
            </summary>
    </member>
    <member name="M:PowerLanguage.ICalculationControl.Abort">
      <summary>
             Method for terminating execution of a study.
            </summary>
    </member>
    <member name="M:PowerLanguage.ICalculationControl.Abort(System.String,System.Object[])">
      <summary>
             A method that terminates a study's execution and displays 
             an alert-type error message  with a string which is a result 
             of '_args' arguments application to '_format_str' format string.
            </summary>
      <param name="formatStr">
      </param>
      <param name="_args">
      </param>
    </member>
    <member name="M:PowerLanguage.ICalculationControl.Recalculate">
      <summary>
             A method carrying out study's recalculation.
            </summary>
    </member>
    <member name="M:PowerLanguage.ICalculationControl.RecalcLastBarAfter(System.TimeSpan)">
      <summary>
            A method carrying out study's recalculation after a time interval.
            </summary>
      <param name="interval">The time interval after which study should be recalculated.</param>
    </member>
    <member name="T:PowerLanguage.IArraySeries`1">
      <summary>
             The array series access interface.
            </summary>
      <typeparam name="T">
             Any type - double, int, string, etc.
             </typeparam>
    </member>
    <member name="P:PowerLanguage.IArraySeries`1.Item(System.Int32)">
      <summary>
             Read-only property. Returns to reference the bar located a specified number of bars back from the current bar.
            </summary>
      <param name="barsAgo">
             The numerical expression, specifying the number of bars back.
             </param>
    </member>
    <member name="P:PowerLanguage.IArraySeries`1.Length">
      <summary>
             Read-only property. Returns the array series length.
            </summary>
    </member>
    <member name="T:PowerLanguage.IArraySeries2D`1">
      <summary>
             The 2D array series access interface.
            </summary>
      <typeparam name="T">
             Any type - double, int, string, etc.
             </typeparam>
    </member>
    <member name="P:PowerLanguage.IArraySeries2D`1.Item(System.Int32)">
      <summary>
             Read-only property. Returns to reference the bar located a specified number of bars back from the current bar.
            </summary>
      <param name="barsAgo">
             The numerical expression, specifying the number of bars back.
             </param>
    </member>
    <member name="P:PowerLanguage.IArraySeries2D`1.Length1">
      <summary>
             Read-only property. Returns the first dimension of 2D array series.
            </summary>
    </member>
    <member name="P:PowerLanguage.IArraySeries2D`1.Length2">
      <summary>
             Read-only property. Returns the second dimension of 2D array series.
            </summary>
    </member>
    <member name="T:PowerLanguage.IArray`1">
      <summary>
             The array access interface.
            </summary>
      <typeparam name="T">
             Any type - double, int, string, etc.
             </typeparam>
    </member>
    <member name="P:PowerLanguage.IArray`1.DefaultValue">
      <summary>
             Read-only properties. Returns the default value.
            </summary>
    </member>
    <member name="T:PowerLanguage.IArray2D`1">
      <summary>
             The 2D array access interface.
            </summary>
      <typeparam name="T">
             Any type - double, int, string, etc.
             </typeparam>
    </member>
    <member name="P:PowerLanguage.IArray2D`1.DefaultValue">
      <summary>
             Read-only properties. Returns the default value.
            </summary>
    </member>
    <member name="T:PowerLanguage.ArraySimpleAbstract`1">
      <exclude />
    </member>
    <member name="M:PowerLanguage.ArraySimpleAbstract`1.#ctor(PowerLanguage.IStudyControl,System.Int32,System.Int32[])">
      <exclude />
    </member>
    <member name="M:PowerLanguage.ArraySimpleAbstract`1.fill_values(System.Array,`0)">
      <exclude />
    </member>
    <member name="P:PowerLanguage.ArraySimpleAbstract`1.Item(System.Int32)">
      <exclude />
    </member>
    <member name="P:PowerLanguage.ArraySimpleAbstract`1.DefaultValue">
      <summary>
      </summary>
    </member>
    <member name="T:PowerLanguage.ArraySimple`1">
      <summary>
             Array simple class with behavior similar to PowerLanguage version.
            </summary>
      <typeparam name="T">
             Any type - double, int, string, etc.
             </typeparam>
    </member>
    <member name="M:PowerLanguage.ArraySimple`1.#ctor(PowerLanguage.IStudyControl,System.Int32)">
      <summary>
             Initializes a new instance of the ArraySimple.
            </summary>
      <param name="master">The master object of array simple.</param>
      <param name="length">The array simple length.</param>
    </member>
    <member name="M:PowerLanguage.ArraySimple`1.#ctor(PowerLanguage.IStudyControl,System.Int32,System.Int32)">
      <summary>
             Initializes a new instance of the ArraySimple.
            </summary>
      <param name="master">The master object of array simple.</param>
      <param name="dataStream">The data stream number.</param>
      <param name="length">The array simple length.</param>
    </member>
    <member name="M:PowerLanguage.ArraySimple`1.fill_values(System.Array,`0)">
      <exclude />
    </member>
    <member name="P:PowerLanguage.ArraySimple`1.Item(System.Int32)">
      <summary>
             Read-only property. Returns information referencing a bar that is located a specified number of bars back from the current bar.
            </summary>
      <param name="barsAgo">
             The numerical expression, specifying the number of bars back.
             </param>
    </member>
    <member name="P:PowerLanguage.ArraySimple`1.Length">
      <summary>
             Read-only property. Returns the array series length.
            </summary>
    </member>
    <member name="T:PowerLanguage.Array2DSimple`1">
      <summary>
             2D array simple class with behavior similar to PowerLanguage version.
            </summary>
      <typeparam name="T">
             Any type - double, int, string, etc
            </typeparam>
    </member>
    <member name="M:PowerLanguage.Array2DSimple`1.#ctor(PowerLanguage.IStudyControl,System.Int32,System.Int32)">
      <summary>
             Initializes a new instance of the Array2DSimple.
            </summary>
      <param name="master">The master object of 2D array simple.</param>
      <param name="length1">The first dimension of 2D array simple.</param>
      <param name="length2">The second dimension of 2D array simple.</param>
    </member>
    <member name="M:PowerLanguage.Array2DSimple`1.#ctor(PowerLanguage.IStudyControl,System.Int32,System.Int32,System.Int32)">
      <summary>
             Initializes a new instance of Array2DSimple.
            </summary>
      <param name="master">The master object of 2D array simple.</param>
      <param name="dataStream">The data stream number.</param>
      <param name="length1">The first dimension of 2D array simple.</param>
      <param name="length2">The second dimension of 2D array simple.</param>
    </member>
    <member name="M:PowerLanguage.Array2DSimple`1.fill_values(System.Array,`0)">
      <exclude />
    </member>
    <member name="P:PowerLanguage.Array2DSimple`1.Item(System.Int32)">
      <summary>
             Read-only property. Returns information referencing a bar that is located a specified number of bars back from the current bar.
            </summary>
      <param name="barsAgo">The numerical expression specifying the number of bars back.</param>
    </member>
    <member name="P:PowerLanguage.Array2DSimple`1.Length1">
      <summary>
             Read-only property. Returns the first dimension of 2D array simple.
            </summary>
    </member>
    <member name="P:PowerLanguage.Array2DSimple`1.Length2">
      <summary>
             Read-only property. Returns the second dimension of 2D array simple.
            </summary>
    </member>
    <member name="T:PowerLanguage.ArraySeriesAbstract`1">
      <exclude />
    </member>
    <member name="M:PowerLanguage.ArraySeriesAbstract`1.#ctor(PowerLanguage.IStudyControl,System.Int32,System.Int32[])">
      <exclude />
    </member>
    <member name="M:PowerLanguage.ArraySeriesAbstract`1.fill_values(System.Array,`0)">
      <exclude />
    </member>
    <member name="P:PowerLanguage.ArraySeriesAbstract`1.Item(System.Int32)">
      <exclude />
    </member>
    <member name="P:PowerLanguage.ArraySeriesAbstract`1.DefaultValue">
      <summary>
      </summary>
    </member>
    <member name="T:PowerLanguage.ArraySeries`1">
      <summary>
             Array series class with behavior similar to PowerLanguage version.
            </summary>
      <typeparam name="T">
             Any type - double, int, string, etc.
             </typeparam>
    </member>
    <member name="M:PowerLanguage.ArraySeries`1.#ctor(PowerLanguage.IStudyControl,System.Int32)">
      <summary>
             Initializes a new instance of the ArraySeries.
            </summary>
      <param name="master">The master object of array simple.</param>
      <param name="length">The array series length.</param>
    </member>
    <member name="M:PowerLanguage.ArraySeries`1.#ctor(PowerLanguage.IStudyControl,System.Int32,System.Int32)">
      <summary>
             Initializes a new instance of the ArraySeries.
            </summary>
      <param name="master">The master object of array simple.</param>
      <param name="dataStream">The data stream number.</param>
      <param name="length">The array series length.</param>
    </member>
    <member name="M:PowerLanguage.ArraySeries`1.fill_values(System.Array,`0)">
      <exclude />
    </member>
    <member name="P:PowerLanguage.ArraySeries`1.Item(System.Int32)">
      <summary>
             Read-only property. Returns information referencing the bar located a specified number of bars back from the current bar.
            </summary>
      <param name="barsAgo">
             The numerical expression specifying the number of bars back.
             </param>
    </member>
    <member name="P:PowerLanguage.ArraySeries`1.Length">
      <summary>
             Read-only property. Returns the array series length.
            </summary>
    </member>
    <member name="T:PowerLanguage.Array2DSeries`1">
      <summary>
              2D array series class with behavior similar to PowerLanguage version.
            </summary>
      <typeparam name="T">
             Any type - double, int, string, etc.
            </typeparam>
    </member>
    <member name="M:PowerLanguage.Array2DSeries`1.#ctor(PowerLanguage.IStudyControl,System.Int32,System.Int32)">
      <summary>
             Initializes a new instance of the Array2DSeries.
            </summary>
      <param name="master">The master object of 2D array series.</param>
      <param name="length1">The first dimension of 2D array series.</param>
      <param name="length2">The second dimension of 2D array series.</param>
    </member>
    <member name="M:PowerLanguage.Array2DSeries`1.#ctor(PowerLanguage.IStudyControl,System.Int32,System.Int32,System.Int32)">
      <summary>
             Initializes a new instance of the Array2DSeries.
            </summary>
      <param name="master">The master object of 2D array series.</param>
      <param name="dataStream">The data stream number.</param>
      <param name="length1">The first dimension of 2D array series.</param>
      <param name="length2">The second dimension of 2D array series.</param>
    </member>
    <member name="M:PowerLanguage.Array2DSeries`1.fill_values(System.Array,`0)">
      <exclude />
    </member>
    <member name="P:PowerLanguage.Array2DSeries`1.Item(System.Int32)">
      <summary>
             Read-only property. Returns information referencing a bar that is located a specified number of bars back from the current bar.
            </summary>
      <param name="barsAgo">The numerical expression specifying the number of bars back.</param>
    </member>
    <member name="P:PowerLanguage.Array2DSeries`1.Length1">
      <summary>
             Read-only property. Returns the first dimension of 2D array series.
            </summary>
    </member>
    <member name="P:PowerLanguage.Array2DSeries`1.Length2">
      <summary>
             Read-only property. Returns the second dimension of 2D array series.
            </summary>
    </member>
    <member name="T:PowerLanguage.TradeManager.TRealtime">
      <summary>
             New real time data delegate.
            </summary>
      <param name="bid">Bid price.</param>
      <param name="ask">Ask price.</param>
    </member>
    <member name="T:PowerLanguage.TradeManager.TConnection">
      <summary>
             New connection state delegate.
            </summary>
      <param name="_state">New connection state.</param>
    </member>
    <member name="T:PowerLanguage.TradeManager.MCSymbolInfo">
      <summary>
             Structure that defines MultiCharts' symbol info.
            </summary>
    </member>
    <member name="F:PowerLanguage.TradeManager.MCSymbolInfo.symbol">
      <summary>
             Symbol information.
            </summary>
    </member>
    <member name="F:PowerLanguage.TradeManager.MCSymbolInfo.data_feed">
      <summary>
             Data source.
            </summary>
    </member>
    <member name="M:PowerLanguage.TradeManager.MCSymbolInfo.#ctor(ATCenterProxy.interop.MTPA_MCSymbolInfo2,System.String)">
      <summary>
             Initializes a new instance of DOMPrice.
            </summary>
      <param name="symbol">Symbol information.</param>
      <param name="dataFeed">Data source.</param>
    </member>
    <member name="T:PowerLanguage.TradeManager.OrderParams">
      <summary>
             Structure describing parameters of the order.
            </summary>
    </member>
    <member name="F:PowerLanguage.TradeManager.OrderParams.action">
      <summary>
             Order action field. The possible values are eMTPA_OA_Buy and eMTPA_OA_Sell.
            </summary>
    </member>
    <member name="F:PowerLanguage.TradeManager.OrderParams.category">
      <summary>
             Order category field. The possible values are: 
             eMTPA_OA_Sell,
             eMTPA_OC_Market,
             eMTPA_OC_MarketRange,
             eMTPA_OC_Stop,
             eMTPA_OC_StopLimit,
             eMTPA_OC_Unsupported
            </summary>
    </member>
    <member name="F:PowerLanguage.TradeManager.OrderParams.contracts">
      <summary>
             Number of contracts in the order.
            </summary>
    </member>
    <member name="F:PowerLanguage.TradeManager.OrderParams.stop_price">
      <summary>
             Stop price value.
            </summary>
    </member>
    <member name="F:PowerLanguage.TradeManager.OrderParams.limit_price">
      <summary>
             Limit price value.
            </summary>
    </member>
    <member name="F:PowerLanguage.TradeManager.OrderParams.tif">
      <summary>
             The time in force.
             The possible values are:
             eMTPA_TIF_AON,
             eMTPA_TIF_DAY,
             eMTPA_TIF_FOK,
             eMTPA_TIF_GTC,
             eMTPA_TIF_GTD,
             eMTPA_TIF_IOC,
             eMTPA_TIF_UNSPECIFIED,
             eMTPA_TIF_Unsupported
            </summary>
    </member>
    <member name="F:PowerLanguage.TradeManager.OrderParams.gtd">
      <summary>
             The 'good till date' (GTD) value. Must be determined if the Time In Force (TIF) is eMTPA_TIF_GTD.
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.OrderParams.AsMTPA">
      <summary>
             Read-only property. Returns order as MTPA_SOrder3.
            </summary>
    </member>
    <member name="T:PowerLanguage.TradeManager.ITradingProfile">
      <summary>
             An interface for accessing trading profile.
            </summary>
    </member>
    <member name="M:PowerLanguage.TradeManager.ITradingProfile.PlaceOrder(PowerLanguage.TradeManager.OrderParams)">
      <summary>
             Places new order with specified parameters.
            </summary>
      <param name="order">Order parameters.</param>
      <returns>New order ID.</returns>
    </member>
    <member name="M:PowerLanguage.TradeManager.ITradingProfile.PlaceOCOOrders(ATCenterProxy.interop.MTPA_OCOGroupType,PowerLanguage.TradeManager.OrderParams[])">
      <summary>
             Places One-Cancel-Others (OCO) group order with specified parameters.
            </summary>
      <param name="oco_type">OCO group type.</param>
      <param name="orders">Order parameters.</param>
      <returns>Array of IDs for new orders.</returns>
    </member>
    <member name="M:PowerLanguage.TradeManager.ITradingProfile.ModifyOrder(System.Int32,PowerLanguage.TradeManager.OrderParams,ATCenterProxy.interop.MTPA_ModifiableOrderFields)">
      <summary>
             Modify specified order.
            </summary>
      <param name="order_id">Specified order ID.</param>
      <param name="order">New order parameters.</param>
      <param name="fields_for_modify">Modified order fields.</param>
    </member>
    <member name="M:PowerLanguage.TradeManager.ITradingProfile.CancelOrder(System.Int32)">
      <summary>
             Cancel specified order.
            </summary>
      <param name="order_id">Cancelled order ID.</param>
    </member>
    <member name="P:PowerLanguage.TradeManager.ITradingProfile.Name">
      <summary>
             Read-only property. Returns trading profile name.
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.ITradingProfile.PluginName">
      <summary>
             Read-only property. Returns trading profile plug-in name.
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.ITradingProfile.ConnectionState">
      <summary>
             Read-only property. Returns trading profile actual connection state.
             The possible values are:
             eTM_CC_Connected,
             eTM_CC_Connecting,
             eTM_CC_Disconnected
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.ITradingProfile.CurrentSymbol">
      <summary>
             Read-write property for accessing the current symbol in the trading profile.
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.ITradingProfile.CurrentAccount">
      <summary>
             Read-write property for accessing the current account in the trading profile.
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.ITradingProfile.Accounts">
      <summary>
             Read-only property. Returns the list of accounts in the trading profile.
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.ITradingProfile.ModifiableFields">
      <summary>
             Read-only property. Returns order fields that may be modified.
            </summary>
    </member>
    <member name="E:PowerLanguage.TradeManager.ITradingProfile.RT">
      <summary>
             Raised when real-time data added.
            </summary>
    </member>
    <member name="E:PowerLanguage.TradeManager.ITradingProfile.Connection">
      <summary>
             Raised when connection is changed.
            </summary>
    </member>
    <member name="T:PowerLanguage.TradeManager.IDentifiable">
      <summary>
             An interface for identification.
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.IDentifiable.ID">
      <summary>
             Read-only property. Returns ID.
            </summary>
    </member>
    <member name="T:PowerLanguage.TradeManager.Order">
      <summary>
             The structure that defines order info.
            </summary>
    </member>
    <member name="M:PowerLanguage.TradeManager.Order.#ctor(ATCenterProxy.interop.ITC_OrderItem)">
      <summary>
             Initializes a new instance of Order.
            </summary>
      <param name="order">Raw order information.</param>
    </member>
    <member name="M:PowerLanguage.TradeManager.Order.CompareByDT(PowerLanguage.TradeManager.Order,PowerLanguage.TradeManager.Order)">
      <summary>
            Compare orders by time.
            If order doesn't have a final state (Filled, Cancelled, Rejected) its time is GeneratedDT; otherwise FinalDT.
            </summary>
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:PowerLanguage.TradeManager.Order.GetHashCode">
      <exclude />
    </member>
    <member name="P:PowerLanguage.TradeManager.Order.IsManual">
      <summary>
             Indicates whether the order is manual.
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.Order.GeneratedDT">
      <summary>
            Return order's place time.
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.Order.FinalDT">
      <summary>
            Return order's last update time.
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.Order.Account">
      <summary>
             Account name.
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.Order.Profile">
      <summary>
             Profile name.
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.Order.Symbol">
      <summary>
             Symbol name.
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.Order.Resolution">
      <summary>
             Resolution as string.
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.Order.Name">
      <summary>
             Order name.
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.Order.StrategyName">
      <summary>
             Strategy name.
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.Order.Workspace">
      <summary>
             Workspace name.
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.Order.Action">
      <summary>
             Order action.
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.Order.State">
      <summary>
             Order state.
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.Order.Category">
      <summary>
             Order category.
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.Order.TIF">
      <summary>
             Order's Time In Force value.
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.Order.TIFDate">
      <summary>
             Order's Time In Force date. Must be specified for Good Till Date.
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.Order.Contracts">
      <summary>
             Number of contracts.
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.Order.FilledContracts">
      <summary>
             Number of filled contracts.
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.Order.StopPrice">
      <summary>
             Stop price value.
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.Order.LimitPrice">
      <summary>
             Limit price value.
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.Order.ExecPrice">
      <summary>
             Executed price value.
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.Order.BrokerID">
      <summary>
             Broker ID value.
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.Order.OrderID">
      <summary>
             Order ID value.
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.Order.OCOGroupID">
      <summary>
             One-Cancel-Others group's ID value.
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.Order.ID">
      <exclude />
    </member>
    <member name="T:PowerLanguage.TradeManager.Position">
      <summary>
             The structure that defines position info.
            </summary>
    </member>
    <member name="M:PowerLanguage.TradeManager.Position.#ctor(ATCenterProxy.interop.ITC_PositionItem)">
      <summary>
             Initializes a new instance of Position. 
            </summary>
      <param name="item">Raw position information.</param>
    </member>
    <member name="M:PowerLanguage.TradeManager.Position.ToString">
      <exclude />
    </member>
    <member name="P:PowerLanguage.TradeManager.Position.Account">
      <summary>
             Account name.
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.Position.Profile">
      <summary>
             Profile name.
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.Position.Symbol">
      <summary>
             Symbol name.
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.Position.Value">
      <summary>
             Position value.
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.Position.AvgPrice">
      <summary>
             Average Price value.
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.Position.OpenPL">
      <summary>
             Open profit/loss value.
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.Position.ID">
      <summary>
             Position ID.
            </summary>
    </member>
    <member name="T:PowerLanguage.TradeManager.Account">
      <summary>
             The structure that defines account information. 
            </summary>
    </member>
    <member name="M:PowerLanguage.TradeManager.Account.#ctor(ATCenterProxy.interop.ITC_AccountItem)">
      <summary>
             Initializes a new instance of Account. 
            </summary>
      <param name="item">Account information.</param>
    </member>
    <member name="M:PowerLanguage.TradeManager.Account.ToString">
      <exclude />
    </member>
    <member name="P:PowerLanguage.TradeManager.Account.ID">
      <summary>
             Read-only property. Returns account ID.
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.Account.Profile">
      <summary>
             Profile name.
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.Account.Name">
      <summary>
             Account name.
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.Account.Balance">
      <summary>
             Balance value.
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.Account.Equity">
      <summary>
             Equity value.
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.Account.OpenPL">
      <summary>
             Open profit/loss (PnL) value.
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.Account.BalanceInPrcnt">
      <summary>
             Indicates balance in percent.
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.Account.EquityInPrcnt">
      <summary>
             Indicates equity in percent.
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.Account.Margin">
      <summary>
             Margin value.
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.Account.MarginAsPrcnt">
      <summary>
             Margin as percent value.
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.Account.AvailableToTrade">
      <summary>
             Amount available to trade value.
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.Log.Time">
      <summary>
            Returns time when this log message was issued.
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.Log.Symbol">
      <summary>
            Returns symbol name (for messages from a strategies).
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.Log.Profile">
      <summary>
            Returns the name of the profile from which this message was received.
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.Log.Text">
      <summary>
            Returns text of message.
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.Log.Category">
      <summary>
            Returns category of this message.
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.Log.Source">
      <summary>
            Returns the strategy name from which this message was received.
            </summary>
    </member>
    <member name="T:PowerLanguage.TradeManager.IBaseFilterNotify">
      <summary>
             A base filter 'notify' interface.
            </summary>
    </member>
    <member name="E:PowerLanguage.TradeManager.IBaseFilterNotify.CurrentChanged">
      <summary>
             Raised when current filter is changed.
            </summary>
    </member>
    <member name="T:PowerLanguage.TradeManager.IBaseFilter`1">
      <summary>
             A base filter interface. 
            </summary>
      <typeparam name="T">Any type - double, int, string, etc.</typeparam>
    </member>
    <member name="P:PowerLanguage.TradeManager.IBaseFilter`1.CurrentValue">
      <summary>
             Read-write property. Current filter value.
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.IBaseFilter`1.CurrentIsAll">
      <summary>
             Read-only property. Indicates whether current filter is set to 'all', i.e. there is no filtering.
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.IBaseFilter`1.Values">
      <summary>
             Read-only property. Returns filter values.
            </summary>
    </member>
    <member name="T:PowerLanguage.TradeManager.IListFilter`1">
      <summary>
             Interface for list filter.
            </summary>
      <typeparam name="T">Any type - double, int, string, etc.</typeparam>
    </member>
    <member name="T:PowerLanguage.TradeManager.IDateTimeFilter">
      <summary>
             A DateTime filter interface.
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.IDateTimeFilter.From">
      <summary>
             'From DateTime' filter value.
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.IDateTimeFilter.To">
      <summary>
             'To DateTime' filter value.
            </summary>
    </member>
    <member name="T:PowerLanguage.TradeManager.TItemsChanged`1">
      <summary>
             Items changed delegate. 
            </summary>
      <param name="_items">Changed items</param>
      <typeparam name="T">Any type - double, int, string, etc.</typeparam>
    </member>
    <member name="T:PowerLanguage.TradeManager.IDataSource`1">
      <summary>
             A base data source interface.
            </summary>
      <typeparam name="T">Any type - double, int, string, etc.</typeparam>
    </member>
    <member name="E:PowerLanguage.TradeManager.IDataSource`1.StartChanging">
      <summary>
             Raised when 'start' is changing.
            </summary>
    </member>
    <member name="E:PowerLanguage.TradeManager.IDataSource`1.FinishChanging">
      <summary>
             Raised when 'finish' is changing.
            </summary>
    </member>
    <member name="E:PowerLanguage.TradeManager.IDataSource`1.ReloadStarted">
      <summary>
             Raised when 'reload' is started.
            </summary>
    </member>
    <member name="E:PowerLanguage.TradeManager.IDataSource`1.ReloadFinished">
      <summary>
             Raised when 'reload' is finished.
            </summary>
    </member>
    <member name="E:PowerLanguage.TradeManager.IDataSource`1.Added">
      <summary>
             Raised when 'item' is added.
            </summary>
    </member>
    <member name="E:PowerLanguage.TradeManager.IDataSource`1.Changed">
      <summary>
             Raised when 'item' is changed.
            </summary>
    </member>
    <member name="E:PowerLanguage.TradeManager.IDataSource`1.Deleted">
      <summary>
             Raised when 'item' is deleted.
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.IDataSource`1.Items">
      <summary>
             Read-only property. Returns item collection.
            </summary>
    </member>
    <member name="T:PowerLanguage.TradeManager.IAccounts">
      <summary>
             An 'accounts' access interface. 
            </summary>
    </member>
    <member name="T:PowerLanguage.TradeManager.IPositions">
      <summary>
             A 'positions data' source interface.
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.IPositions.ProfileFltr">
      <summary>
             Read-only property. Returns profile filter.
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.IPositions.AccountFltr">
      <summary>
             Read-only property. Returns account filter.
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.IPositions.SymbolFltr">
      <summary>
             Read-only property. Returns symbol filter.
            </summary>
    </member>
    <member name="T:PowerLanguage.TradeManager.IOrders">
      <summary>
             An 'orders data' source interface.
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.IOrders.ProfileFltr">
      <summary>
             Read-only property. Returns profile filter.
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.IOrders.AccountFltr">
      <summary>
             Read-only property. Returns account filter.
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.IOrders.SymbolFltr">
      <summary>
             Read-only property. Returns symbol filter.
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.IOrders.StatesFilter">
      <summary>
             Read-only property. Returns order state filter.
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.IOrders.IntervalFltr">
      <summary>
             Read-only property. Returns DateTime interval filter.
            </summary>
    </member>
    <member name="T:PowerLanguage.TradeManager.ILogs">
      <summary>
            A 'logs' source interface.
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.ILogs.SymbolFltr">
      <summary>
             Read-only property. Returns symbol filter.
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.ILogs.SourceFltr">
      <summary>
             Read-only property. Returns source filter.
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.ILogs.IntervalFltr">
      <summary>
             Read-only property. Returns DateTime interval filter.
            </summary>
    </member>
    <member name="T:PowerLanguage.TradeManager.ITradingData">
      <summary>
             Trade data access interface.
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.ITradingData.Accounts">
      <summary>
             Read-only property. Returns accounts info.
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.ITradingData.Positions">
      <summary>
             Read-only properties. Returns position info.
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.ITradingData.Orders">
      <summary>
             Read-only properties. Returns orders info.
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.ITradingData.Logs">
      <summary>
             Read-only properties. Returns logs info.
            </summary>
    </member>
    <member name="T:PowerLanguage.TradeManager.ITradeManager">
      <summary>
             Trade manager access interface. 
            </summary>
    </member>
    <member name="M:PowerLanguage.TradeManager.ITradeManager.ProcessEvents(System.TimeSpan)">
      <summary>
             Process trade manager events.
            </summary>
      <param name="max_time">Time interval.</param>
    </member>
    <member name="M:PowerLanguage.TradeManager.ITradeManager.ProcessEvents">
      <summary>
             Process trade manager events.
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.ITradeManager.TradingProfiles">
      <summary>
             Read-only property. Returns profile array.
            </summary>
    </member>
    <member name="P:PowerLanguage.TradeManager.ITradeManager.TradingData">
      <summary>
             Read-only property. Returns trading data.
            </summary>
    </member>
  </members>
</doc>